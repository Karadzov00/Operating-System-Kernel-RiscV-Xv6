GAS LISTING /tmp/ccJi8rXm.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv14syscallHandlerEv
   9              	_ZN5Riscv14syscallHandlerEv:
  10              	.LFB40:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 6/17/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** #include "../h/_thread.hpp"
   8:src/Riscv.cpp **** 
   9:src/Riscv.cpp **** 
  10:src/Riscv.cpp **** void Riscv::syscallHandler() {
  12              		.loc 1 10 30
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  11:src/Riscv.cpp ****     //read syscall code from register a0
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp ****     uint64 arg0;
  22              		.loc 1 13 5
  14:src/Riscv.cpp ****     uint64 arg1;
  23              		.loc 1 14 5
  15:src/Riscv.cpp ****     uint64 arg2;
  24              		.loc 1 15 5
  16:src/Riscv.cpp ****     uint64 arg3;
  25              		.loc 1 16 5
  17:src/Riscv.cpp **** //    uint64 arg4;
  18:src/Riscv.cpp **** //    uint64 arg5;
  19:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (arg0));    //read system call code
  26              		.loc 1 19 5
  27              		.loc 1 19 48 is_stmt 0
  28              	#APP
  29              	# 19 "src/Riscv.cpp" 1
  20              	    if(arg0== 0x01 ){
  30              		mv a5, a0
  31              	# 0 "" 2
  32              	.LVL0:
  33              		.loc 1 20 5 is_stmt 1
  34              	#NO_APP
  35              	.LBB24:
  36 0014 13071000 		li	a4,1
  37 0018 6382E702 		beq	a5,a4,.L6
  38              	.LBE24:
GAS LISTING /tmp/ccJi8rXm.s 			page 2


  21:src/Riscv.cpp ****         //kmem_alloc
  22:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read size from a1 and move it to arg1 loc
  23:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  24:src/Riscv.cpp **** 
  25:src/Riscv.cpp ****         //write return value to a0 register
  26:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ptr));
  27:src/Riscv.cpp ****     }
  28:src/Riscv.cpp ****     else if(arg0==0x02){
  39              		.loc 1 28 10
  40              	.LBB33:
  41              	.LBB25:
  42 001c 13072000 		li	a4,2
  43 0020 6388E702 		beq	a5,a4,.L7
  44              	.LBE25:
  45              	.LBE33:
  29:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read pointer to free from a1 and move it 
  30:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  31:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
  32:src/Riscv.cpp ****     }
  33:src/Riscv.cpp ****     else if(arg0==0x11){
  46              		.loc 1 33 10
  47              	.LBB34:
  48              	.LBB30:
  49              	.LBB26:
  50 0024 13071001 		li	a4,17
  51 0028 638EE702 		beq	a5,a4,.L8
  52              	.LVL1:
  53              	.L1:
  54              	.LBE26:
  55              	.LBE30:
  56              	.LBE34:
  34:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //handle (thread_t*)
  35:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg2));    //start routine
  36:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg3));    //argument of start routine
  37:src/Riscv.cpp **** 
  38:src/Riscv.cpp ****         //make new thread object using overloaded new operator for that function
  39:src/Riscv.cpp ****         _thread* t = _thread::createThread((void (*)(void*))arg2,  (void*)arg3);    //t je thread_t
  40:src/Riscv.cpp **** 
  41:src/Riscv.cpp **** 
  42:src/Riscv.cpp ****         //how to set handle?
  43:src/Riscv.cpp ****         //return _thread* adress through a0
  44:src/Riscv.cpp ****         uint64 ret = (uint64)t;
  45:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
  46:src/Riscv.cpp **** 
  47:src/Riscv.cpp **** 
  48:src/Riscv.cpp **** 
  49:src/Riscv.cpp ****     }
  50:src/Riscv.cpp **** 
  51:src/Riscv.cpp **** }
  57              		.loc 1 51 1 is_stmt 0
  58 002c 83308100 		ld	ra,8(sp)
  59              		.cfi_remember_state
  60              		.cfi_restore 1
  61 0030 03340100 		ld	s0,0(sp)
  62              		.cfi_restore 8
  63              		.cfi_def_cfa 2, 16
  64 0034 13010101 		addi	sp,sp,16
GAS LISTING /tmp/ccJi8rXm.s 			page 3


  65              		.cfi_def_cfa_offset 0
  66 0038 67800000 		jr	ra
  67              	.LVL2:
  68              	.L6:
  69              		.cfi_restore_state
  70              	.LBB35:
  71              	.LBB31:
  22:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  72              		.loc 1 22 9 is_stmt 1
  22:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  73              		.loc 1 22 52 is_stmt 0
  74              	#APP
  75              	# 22 "src/Riscv.cpp" 1
  76              		mv a0, a1
  77              	# 0 "" 2
  78              	.LVL3:
  23:src/Riscv.cpp **** 
  79              		.loc 1 23 9 is_stmt 1
  23:src/Riscv.cpp **** 
  80              		.loc 1 23 57 is_stmt 0
  81              	#NO_APP
  82 0040 97000000 		call	_ZN15MemoryAllocator10kmem_allocEm@plt
  82      E7800000 
  83              	.LVL4:
  26:src/Riscv.cpp ****     }
  84              		.loc 1 26 9 is_stmt 1
  26:src/Riscv.cpp ****     }
  85              		.loc 1 26 52 is_stmt 0
  86              	#APP
  87              	# 26 "src/Riscv.cpp" 1
  88              		mv a0, a0
  89              	# 0 "" 2
  90              	#NO_APP
  91              	.LBE31:
  92 004c 6FF01FFE 		j	.L1
  93              	.LVL5:
  94              	.L7:
  95              	.LBB32:
  96              	.LBB28:
  29:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  97              		.loc 1 29 9 is_stmt 1
  29:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  98              		.loc 1 29 52 is_stmt 0
  99              	#APP
 100              	# 29 "src/Riscv.cpp" 1
 101              		mv a0, a1
 102              	# 0 "" 2
 103              	.LVL6:
  30:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
 104              		.loc 1 30 9 is_stmt 1
  30:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
 105              		.loc 1 30 45 is_stmt 0
 106              	#NO_APP
 107 0054 97000000 		call	_ZN15MemoryAllocator9kmem_freeEPv@plt
 107      E7800000 
 108              	.LVL7:
  31:src/Riscv.cpp ****     }
GAS LISTING /tmp/ccJi8rXm.s 			page 4


 109              		.loc 1 31 9 is_stmt 1
  31:src/Riscv.cpp ****     }
 110              		.loc 1 31 52 is_stmt 0
 111              	#APP
 112              	# 31 "src/Riscv.cpp" 1
 113              		mv a0, a0
 114              	# 0 "" 2
 115              	#NO_APP
 116              	.LBE28:
 117 0060 6FF0DFFC 		j	.L1
 118              	.LVL8:
 119              	.L8:
 120              	.LBB29:
 121              	.LBB27:
  34:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg2));    //start routine
 122              		.loc 1 34 9 is_stmt 1
  34:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg2));    //start routine
 123              		.loc 1 34 52 is_stmt 0
 124              	#APP
 125              	# 34 "src/Riscv.cpp" 1
 126              		mv a5, a1
 127              	# 0 "" 2
 128              	.LVL9:
  35:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg3));    //argument of start routine
 129              		.loc 1 35 9 is_stmt 1
  35:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg3));    //argument of start routine
 130              		.loc 1 35 52 is_stmt 0
 131              	# 35 "src/Riscv.cpp" 1
 132              		mv a0, a1
 133              	# 0 "" 2
 134              	.LVL10:
  36:src/Riscv.cpp **** 
 135              		.loc 1 36 9 is_stmt 1
  36:src/Riscv.cpp **** 
 136              		.loc 1 36 52 is_stmt 0
 137              	# 36 "src/Riscv.cpp" 1
 138              		mv a1, a1
 139              	# 0 "" 2
 140              	.LVL11:
  39:src/Riscv.cpp **** 
 141              		.loc 1 39 9 is_stmt 1
  39:src/Riscv.cpp **** 
 142              		.loc 1 39 43 is_stmt 0
 143              	#NO_APP
 144 0070 97000000 		call	_ZN7_thread12createThreadEPFvPvES0_@plt
 144      E7800000 
 145              	.LVL12:
  44:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
 146              		.loc 1 44 9 is_stmt 1
  45:src/Riscv.cpp **** 
 147              		.loc 1 45 9
  45:src/Riscv.cpp **** 
 148              		.loc 1 45 52 is_stmt 0
 149              	#APP
 150              	# 45 "src/Riscv.cpp" 1
 151              		mv a0, a0
 152              	# 0 "" 2
GAS LISTING /tmp/ccJi8rXm.s 			page 5


 153              	#NO_APP
 154              	.LBE27:
 155              	.LBE29:
 156              	.LBE32:
 157              	.LBE35:
 158              		.loc 1 51 1
 159 007c 6FF01FFB 		j	.L1
 160              		.cfi_endproc
 161              	.LFE40:
 163              		.align	2
 164              		.globl	_ZN5Riscv10popSppSpieEv
 166              	_ZN5Riscv10popSppSpieEv:
 167              	.LFB41:
  52:src/Riscv.cpp **** 
  53:src/Riscv.cpp **** void Riscv::popSppSpie()    //pop supervisor previous privilege, supervisor previous interrupt enab
  54:src/Riscv.cpp **** {
 168              		.loc 1 54 1 is_stmt 1
 169              		.cfi_startproc
 170 0080 130101FF 		addi	sp,sp,-16
 171              		.cfi_def_cfa_offset 16
 172 0084 23348100 		sd	s0,8(sp)
 173              		.cfi_offset 8, -8
 174 0088 13040101 		addi	s0,sp,16
 175              		.cfi_def_cfa 8, 0
  55:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
 176              		.loc 1 55 5
 177              		.loc 1 55 39 is_stmt 0
 178              	#APP
 179              	# 55 "src/Riscv.cpp" 1
  56              	    __asm__ volatile ("sret");  //exit privileged regime
 180              		csrw sepc, ra
 181              	# 0 "" 2
 182              		.loc 1 56 5 is_stmt 1
 183              		.loc 1 56 30 is_stmt 0
 184              	# 56 "src/Riscv.cpp" 1
  57              	}
 185              		sret
 186              	# 0 "" 2
 187              		.loc 1 57 1
 188              	#NO_APP
 189 0094 03348100 		ld	s0,8(sp)
 190              		.cfi_restore 8
 191              		.cfi_def_cfa 2, 16
 192 0098 13010101 		addi	sp,sp,16
 193              		.cfi_def_cfa_offset 0
 194 009c 67800000 		jr	ra
 195              		.cfi_endproc
 196              	.LFE41:
 198              		.align	2
 199              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 201              	_ZN5Riscv20handleSupervisorTrapEv:
 202              	.LFB42:
  58:src/Riscv.cpp **** 
  59:src/Riscv.cpp **** void Riscv::handleSupervisorTrap(){
 203              		.loc 1 59 35 is_stmt 1
 204              		.cfi_startproc
 205 00a0 130101FB 		addi	sp,sp,-80
GAS LISTING /tmp/ccJi8rXm.s 			page 6


 206              		.cfi_def_cfa_offset 80
 207 00a4 23341104 		sd	ra,72(sp)
 208 00a8 23308104 		sd	s0,64(sp)
 209 00ac 233C9102 		sd	s1,56(sp)
 210 00b0 23382103 		sd	s2,48(sp)
 211              		.cfi_offset 1, -8
 212              		.cfi_offset 8, -16
 213              		.cfi_offset 9, -24
 214              		.cfi_offset 18, -32
 215 00b4 13040105 		addi	s0,sp,80
 216              		.cfi_def_cfa 8, 0
  60:src/Riscv.cpp ****     uint scause = r_scause();
 217              		.loc 1 60 5
 218              	.LBB36:
 219              	.LBB37:
 220              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccJi8rXm.s 			page 7


  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
 221              		.loc 2 94 5
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 222              		.loc 2 95 5
 223              		.loc 2 95 72 is_stmt 0
GAS LISTING /tmp/ccJi8rXm.s 			page 8


 224              	#APP
 225              	# 95 "src/../h/Riscv.hpp" 1
  96              	    return scause;
 226              		csrr a5, scause
 227              	# 0 "" 2
 228              	#NO_APP
 229 00bc 233CF4FA 		sd	a5,-72(s0)
 230              		.loc 2 96 5 is_stmt 1
 231              		.loc 2 96 12 is_stmt 0
 232 00c0 833784FB 		ld	a5,-72(s0)
 233              	.LBE37:
 234              	.LBE36:
 235              		.loc 1 60 28
 236 00c4 9B870700 		sext.w	a5,a5
 237              	.LVL13:
  61:src/Riscv.cpp ****     uint64 a0reg;
 238              		.loc 1 61 5 is_stmt 1
  62:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (a0reg));
 239              		.loc 1 62 5
 240              		.loc 1 62 49 is_stmt 0
 241              	#APP
 242              	# 62 "src/Riscv.cpp" 1
  63              	
 243              		mv a3, a0
 244              	# 0 "" 2
 245              	.LVL14:
  64:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL || scause==0x0000000000000009UL){
 246              		.loc 1 64 5 is_stmt 1
 247              	#NO_APP
 248              	.LBB38:
 249              		.loc 1 64 40 is_stmt 0
 250 00cc 9B8787FF 		addiw	a5,a5,-8
 251              	.LVL15:
 252              		.loc 1 64 5
 253 00d0 13071000 		li	a4,1
 254 00d4 637EF700 		bleu	a5,a4,.L15
 255              	.LVL16:
 256              	.L11:
 257              	.LBE38:
  65:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  66:src/Riscv.cpp **** 
  67:src/Riscv.cpp ****         //call from yield
  68:src/Riscv.cpp ****         if(a0reg==0x04){
  69:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
  70:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
  71:src/Riscv.cpp **** 
  72:src/Riscv.cpp ****             _thread::timeSliceCounter = 0;
  73:src/Riscv.cpp ****             _thread::dispatch();
  74:src/Riscv.cpp **** 
  75:src/Riscv.cpp ****             w_sstatus(sstatus);
  76:src/Riscv.cpp ****             w_sepc(sepc);
  77:src/Riscv.cpp ****         }
  78:src/Riscv.cpp ****         else {
  79:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
  80:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
  81:src/Riscv.cpp **** 
  82:src/Riscv.cpp ****             //jump to syscall handler
GAS LISTING /tmp/ccJi8rXm.s 			page 9


  83:src/Riscv.cpp ****             syscallHandler();
  84:src/Riscv.cpp **** 
  85:src/Riscv.cpp ****             w_sstatus(sstatus);
  86:src/Riscv.cpp ****             w_sepc(sepc);
  87:src/Riscv.cpp ****         }
  88:src/Riscv.cpp **** 
  89:src/Riscv.cpp **** 
  90:src/Riscv.cpp **** 
  91:src/Riscv.cpp ****     }
  92:src/Riscv.cpp ****     else if (scause == 0x8000000000000001UL){
  93:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  94:src/Riscv.cpp **** 
  95:src/Riscv.cpp ****     }
  96:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  97:src/Riscv.cpp ****     {
  98:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  99:src/Riscv.cpp **** 
 100:src/Riscv.cpp ****     }
 101:src/Riscv.cpp ****     else{
 102:src/Riscv.cpp ****         // unexpected trap cause
 103:src/Riscv.cpp ****         //print(scause)
 104:src/Riscv.cpp ****         //print(sepc)
 105:src/Riscv.cpp ****         //print(stval) //trap value
 106:src/Riscv.cpp **** 
 107:src/Riscv.cpp ****     }
 108:src/Riscv.cpp **** 
 109:src/Riscv.cpp **** }
 258              		.loc 1 109 1
 259 00d8 83308104 		ld	ra,72(sp)
 260              		.cfi_remember_state
 261              		.cfi_restore 1
 262 00dc 03340104 		ld	s0,64(sp)
 263              		.cfi_restore 8
 264              		.cfi_def_cfa 2, 80
 265 00e0 83348103 		ld	s1,56(sp)
 266              		.cfi_restore 9
 267 00e4 03390103 		ld	s2,48(sp)
 268              		.cfi_restore 18
 269 00e8 13010105 		addi	sp,sp,80
 270              		.cfi_def_cfa_offset 0
 271 00ec 67800000 		jr	ra
 272              	.LVL17:
 273              	.L15:
 274              		.cfi_restore_state
  68:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 275              		.loc 1 68 9 is_stmt 1
 276              	.LBB59:
 277              	.LBB39:
 278 00f0 93074000 		li	a5,4
 279 00f4 638AF602 		beq	a3,a5,.L16
 280              	.LBB40:
  79:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 281              		.loc 1 79 13
 282              	.LBB41:
 283              	.LBB42:
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccJi8rXm.s 			page 10


  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 284              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 285              		.loc 2 107 5
 286              		.loc 2 107 64 is_stmt 0
 287              	#APP
 288              	# 107 "src/../h/Riscv.hpp" 1
 108              	    return sepc;
 289              		csrr a5, sepc
 290              	# 0 "" 2
 291              	#NO_APP
 292 00fc 233CF4FC 		sd	a5,-40(s0)
 293              		.loc 2 108 5 is_stmt 1
 294              		.loc 2 108 12 is_stmt 0
 295 0100 833484FD 		ld	s1,-40(s0)
 296              	.LBE42:
 297              	.LBE41:
  79:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 298              		.loc 1 79 38
 299 0104 93844400 		addi	s1,s1,4
 300              	.LVL18:
  80:src/Riscv.cpp **** 
 301              		.loc 1 80 13 is_stmt 1
 302              	.LBB43:
 303              	.LBB44:
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/Riscv.hpp ****     return stvec;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/Riscv.hpp **** {
 125:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     uint64 volatile stval;
 131:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/Riscv.hpp ****     return stval;
 133:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccJi8rXm.s 			page 11


 134:src/../h/Riscv.hpp **** 
 135:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/Riscv.hpp **** {
 137:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/Riscv.hpp **** {
 152:src/../h/Riscv.hpp ****     uint64 volatile sip;
 153:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/Riscv.hpp ****     return sip;
 155:src/../h/Riscv.hpp **** }
 156:src/../h/Riscv.hpp **** 
 157:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/Riscv.hpp **** {
 159:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** //mask set
 163:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 164:src/../h/Riscv.hpp **** {
 165:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/Riscv.hpp **** }
 167:src/../h/Riscv.hpp **** 
 168:src/../h/Riscv.hpp **** //mask clear
 169:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 170:src/../h/Riscv.hpp **** {
 171:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/Riscv.hpp **** }
 173:src/../h/Riscv.hpp **** 
 174:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 175:src/../h/Riscv.hpp **** {
 176:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 304              		.loc 2 176 5
 177:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 305              		.loc 2 177 5
 306              		.loc 2 177 76 is_stmt 0
 307              	#APP
 308              	# 177 "src/../h/Riscv.hpp" 1
 178              	    return sstatus;
 309              		csrr a5, sstatus
 310              	# 0 "" 2
 311              	#NO_APP
 312 010c 2338F4FC 		sd	a5,-48(s0)
 313              		.loc 2 178 5 is_stmt 1
 314              		.loc 2 178 12 is_stmt 0
 315 0110 033904FD 		ld	s2,-48(s0)
GAS LISTING /tmp/ccJi8rXm.s 			page 12


 316              	.LVL19:
 317              	.LBE44:
 318              	.LBE43:
  83:src/Riscv.cpp **** 
 319              		.loc 1 83 13 is_stmt 1
  83:src/Riscv.cpp **** 
 320              		.loc 1 83 27 is_stmt 0
 321 0114 97000000 		call	_ZN5Riscv14syscallHandlerEv
 321      E7800000 
 322              	.LVL20:
  85:src/Riscv.cpp ****             w_sepc(sepc);
 323              		.loc 1 85 13 is_stmt 1
 324              	.LBB45:
 325              	.LBB46:
 179:src/../h/Riscv.hpp **** }
 180:src/../h/Riscv.hpp **** 
 181:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 182:src/../h/Riscv.hpp **** {
 183:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 326              		.loc 2 183 5
 327              		.loc 2 183 77 is_stmt 0
 328              	#APP
 329              	# 183 "src/../h/Riscv.hpp" 1
 184              	}
 330              		csrw sstatus, s2
 331              	# 0 "" 2
 332              	.LVL21:
 333              	#NO_APP
 334              	.LBE46:
 335              	.LBE45:
  86:src/Riscv.cpp ****         }
 336              		.loc 1 86 13 is_stmt 1
 337              	.LBB47:
 338              	.LBB48:
 113:src/../h/Riscv.hpp **** }
 339              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 340              		.loc 2 113 65 is_stmt 0
 341              	#APP
 342              	# 113 "src/../h/Riscv.hpp" 1
 343              		csrw sepc, s1
 344              	# 0 "" 2
 345              	.LVL22:
 346              	#NO_APP
 347              	.LBE48:
 348              	.LBE47:
 349              	.LBE40:
 350              	.LBE39:
  92:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 351              		.loc 1 92 10 is_stmt 1
  96:src/Riscv.cpp ****     {
 352              		.loc 1 96 10
 353              	.LBE59:
 354              		.loc 1 109 1 is_stmt 0
 355 0124 6FF05FFB 		j	.L11
 356              	.LVL23:
 357              	.L16:
GAS LISTING /tmp/ccJi8rXm.s 			page 13


 358              	.LBB60:
 359              	.LBB58:
 360              	.LBB49:
  69:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 361              		.loc 1 69 13 is_stmt 1
 362              	.LBB50:
 363              	.LBB51:
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 364              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     return sepc;
 365              		.loc 2 107 5
 107:src/../h/Riscv.hpp ****     return sepc;
 366              		.loc 2 107 64 is_stmt 0
 367              	#APP
 368              	# 107 "src/../h/Riscv.hpp" 1
 369              		csrr a5, sepc
 370              	# 0 "" 2
 371              	#NO_APP
 372 012c 2334F4FC 		sd	a5,-56(s0)
 108:src/../h/Riscv.hpp **** }
 373              		.loc 2 108 5 is_stmt 1
 108:src/../h/Riscv.hpp **** }
 374              		.loc 2 108 12 is_stmt 0
 375 0130 833484FC 		ld	s1,-56(s0)
 376              	.LBE51:
 377              	.LBE50:
  69:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 378              		.loc 1 69 38
 379 0134 93844400 		addi	s1,s1,4
 380              	.LVL24:
  70:src/Riscv.cpp **** 
 381              		.loc 1 70 13 is_stmt 1
 382              	.LBB52:
 383              	.LBB53:
 176:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 384              		.loc 2 176 5
 177:src/../h/Riscv.hpp ****     return sstatus;
 385              		.loc 2 177 5
 177:src/../h/Riscv.hpp ****     return sstatus;
 386              		.loc 2 177 76 is_stmt 0
 387              	#APP
 388              	# 177 "src/../h/Riscv.hpp" 1
 389              		csrr a5, sstatus
 390              	# 0 "" 2
 391              	#NO_APP
 392 013c 2330F4FC 		sd	a5,-64(s0)
 178:src/../h/Riscv.hpp **** }
 393              		.loc 2 178 5 is_stmt 1
 178:src/../h/Riscv.hpp **** }
 394              		.loc 2 178 12 is_stmt 0
 395 0140 033904FC 		ld	s2,-64(s0)
 396              	.LVL25:
 397              	.LBE53:
 398              	.LBE52:
  72:src/Riscv.cpp ****             _thread::dispatch();
 399              		.loc 1 72 13 is_stmt 1
  72:src/Riscv.cpp ****             _thread::dispatch();
GAS LISTING /tmp/ccJi8rXm.s 			page 14


 400              		.loc 1 72 39 is_stmt 0
 401 0144 97070000 		la	a5,_ZN7_thread16timeSliceCounterE
 401      83B70700 
 402 014c 23B00700 		sd	zero,0(a5)
  73:src/Riscv.cpp **** 
 403              		.loc 1 73 13 is_stmt 1
  73:src/Riscv.cpp **** 
 404              		.loc 1 73 30 is_stmt 0
 405 0150 97000000 		call	_ZN7_thread8dispatchEv@plt
 405      E7800000 
 406              	.LVL26:
  75:src/Riscv.cpp ****             w_sepc(sepc);
 407              		.loc 1 75 13 is_stmt 1
 408              	.LBB54:
 409              	.LBB55:
 183:src/../h/Riscv.hpp **** }
 410              		.loc 2 183 5
 183:src/../h/Riscv.hpp **** }
 411              		.loc 2 183 77 is_stmt 0
 412              	#APP
 413              	# 183 "src/../h/Riscv.hpp" 1
 414              		csrw sstatus, s2
 415              	# 0 "" 2
 416              	.LVL27:
 417              	#NO_APP
 418              	.LBE55:
 419              	.LBE54:
  76:src/Riscv.cpp ****         }
 420              		.loc 1 76 13 is_stmt 1
 421              	.LBB56:
 422              	.LBB57:
 113:src/../h/Riscv.hpp **** }
 423              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 424              		.loc 2 113 65 is_stmt 0
 425              	#APP
 426              	# 113 "src/../h/Riscv.hpp" 1
 114:src/../h/Riscv.hpp **** 
 427              		csrw sepc, s1
 428              	# 0 "" 2
 429              		.loc 2 114 1
 430              	#NO_APP
 431 0160 6FF09FF7 		j	.L11
 432              	.LBE57:
 433              	.LBE56:
 434              	.LBE49:
 435              	.LBE58:
 436              	.LBE60:
 437              		.cfi_endproc
 438              	.LFE42:
 440              	.Letext0:
 441              		.file 3 "src/../h/../lib/hw.h"
 442              		.file 4 "src/../h/MemoryAllocator.hpp"
 443              		.file 5 "src/../h/_thread.hpp"
GAS LISTING /tmp/ccJi8rXm.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccJi8rXm.s:9      .text:0000000000000000 _ZN5Riscv14syscallHandlerEv
     /tmp/ccJi8rXm.s:13     .text:0000000000000000 .L0 
     /tmp/ccJi8rXm.s:14     .text:0000000000000000 .L0 
     /tmp/ccJi8rXm.s:15     .text:0000000000000004 .L0 
     /tmp/ccJi8rXm.s:18     .text:000000000000000c .L0 
     /tmp/ccJi8rXm.s:19     .text:000000000000000c .L0 
     /tmp/ccJi8rXm.s:21     .text:0000000000000010 .L0 
     /tmp/ccJi8rXm.s:23     .text:0000000000000010 .L0 
     /tmp/ccJi8rXm.s:24     .text:0000000000000010 .L0 
     /tmp/ccJi8rXm.s:25     .text:0000000000000010 .L0 
     /tmp/ccJi8rXm.s:26     .text:0000000000000010 .L0 
     /tmp/ccJi8rXm.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:19     .text:0000000000000010 .L0 
     /tmp/ccJi8rXm.s:36     .text:0000000000000014 .L0 
     /tmp/ccJi8rXm.s:42     .text:000000000000001c .L0 
     /tmp/ccJi8rXm.s:50     .text:0000000000000024 .L0 
     /tmp/ccJi8rXm.s:58     .text:000000000000002c .L0 
     /tmp/ccJi8rXm.s:59     .text:0000000000000030 .L0 
     /tmp/ccJi8rXm.s:60     .text:0000000000000030 .L0 
     /tmp/ccJi8rXm.s:62     .text:0000000000000034 .L0 
     /tmp/ccJi8rXm.s:63     .text:0000000000000034 .L0 
     /tmp/ccJi8rXm.s:65     .text:0000000000000038 .L0 
     /tmp/ccJi8rXm.s:69     .text:000000000000003c .L0 
     /tmp/ccJi8rXm.s:73     .text:000000000000003c .L0 
       src/Riscv.cpp:22     .text:000000000000003c .L0 
     /tmp/ccJi8rXm.s:80     .text:0000000000000040 .L0 
     /tmp/ccJi8rXm.s:82     .text:0000000000000040 .L0 
     /tmp/ccJi8rXm.s:85     .text:0000000000000048 .L0 
       src/Riscv.cpp:26     .text:0000000000000048 .L0 
     /tmp/ccJi8rXm.s:98     .text:0000000000000050 .L0 
       src/Riscv.cpp:29     .text:0000000000000050 .L0 
     /tmp/ccJi8rXm.s:105    .text:0000000000000054 .L0 
     /tmp/ccJi8rXm.s:107    .text:0000000000000054 .L0 
     /tmp/ccJi8rXm.s:110    .text:000000000000005c .L0 
       src/Riscv.cpp:31     .text:000000000000005c .L0 
     /tmp/ccJi8rXm.s:123    .text:0000000000000064 .L0 
       src/Riscv.cpp:34     .text:0000000000000064 .L0 
     /tmp/ccJi8rXm.s:130    .text:0000000000000068 .L0 
       src/Riscv.cpp:35     .text:0000000000000068 .L0 
     /tmp/ccJi8rXm.s:136    .text:000000000000006c .L0 
       src/Riscv.cpp:36     .text:000000000000006c .L0 
     /tmp/ccJi8rXm.s:142    .text:0000000000000070 .L0 
     /tmp/ccJi8rXm.s:144    .text:0000000000000070 .L0 
     /tmp/ccJi8rXm.s:147    .text:0000000000000078 .L0 
     /tmp/ccJi8rXm.s:148    .text:0000000000000078 .L0 
       src/Riscv.cpp:45     .text:0000000000000078 .L0 
     /tmp/ccJi8rXm.s:159    .text:000000000000007c .L0 
     /tmp/ccJi8rXm.s:160    .text:0000000000000080 .L0 
     /tmp/ccJi8rXm.s:166    .text:0000000000000080 _ZN5Riscv10popSppSpieEv
     /tmp/ccJi8rXm.s:169    .text:0000000000000080 .L0 
     /tmp/ccJi8rXm.s:170    .text:0000000000000080 .L0 
     /tmp/ccJi8rXm.s:171    .text:0000000000000084 .L0 
     /tmp/ccJi8rXm.s:173    .text:0000000000000088 .L0 
     /tmp/ccJi8rXm.s:175    .text:000000000000008c .L0 
     /tmp/ccJi8rXm.s:177    .text:000000000000008c .L0 
GAS LISTING /tmp/ccJi8rXm.s 			page 16


       src/Riscv.cpp:55     .text:000000000000008c .L0 
     /tmp/ccJi8rXm.s:183    .text:0000000000000090 .L0 
       src/Riscv.cpp:56     .text:0000000000000090 .L0 
     /tmp/ccJi8rXm.s:189    .text:0000000000000094 .L0 
     /tmp/ccJi8rXm.s:190    .text:0000000000000098 .L0 
     /tmp/ccJi8rXm.s:191    .text:0000000000000098 .L0 
     /tmp/ccJi8rXm.s:193    .text:000000000000009c .L0 
     /tmp/ccJi8rXm.s:195    .text:00000000000000a0 .L0 
     /tmp/ccJi8rXm.s:201    .text:00000000000000a0 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccJi8rXm.s:204    .text:00000000000000a0 .L0 
     /tmp/ccJi8rXm.s:205    .text:00000000000000a0 .L0 
     /tmp/ccJi8rXm.s:206    .text:00000000000000a4 .L0 
     /tmp/ccJi8rXm.s:211    .text:00000000000000b4 .L0 
     /tmp/ccJi8rXm.s:212    .text:00000000000000b4 .L0 
     /tmp/ccJi8rXm.s:213    .text:00000000000000b4 .L0 
     /tmp/ccJi8rXm.s:214    .text:00000000000000b4 .L0 
     /tmp/ccJi8rXm.s:216    .text:00000000000000b8 .L0 
     /tmp/ccJi8rXm.s:221    .text:00000000000000b8 .L0 
     /tmp/ccJi8rXm.s:222    .text:00000000000000b8 .L0 
     /tmp/ccJi8rXm.s:223    .text:00000000000000b8 .L0 
  src/../h/Riscv.hpp:95     .text:00000000000000b8 .L0 
     /tmp/ccJi8rXm.s:231    .text:00000000000000c0 .L0 
     /tmp/ccJi8rXm.s:232    .text:00000000000000c0 .L0 
     /tmp/ccJi8rXm.s:236    .text:00000000000000c4 .L0 
     /tmp/ccJi8rXm.s:239    .text:00000000000000c8 .L0 
     /tmp/ccJi8rXm.s:240    .text:00000000000000c8 .L0 
       src/Riscv.cpp:62     .text:00000000000000c8 .L0 
     /tmp/ccJi8rXm.s:249    .text:00000000000000cc .L0 
     /tmp/ccJi8rXm.s:250    .text:00000000000000cc .L0 
     /tmp/ccJi8rXm.s:253    .text:00000000000000d0 .L0 
     /tmp/ccJi8rXm.s:259    .text:00000000000000d8 .L0 
     /tmp/ccJi8rXm.s:260    .text:00000000000000dc .L0 
     /tmp/ccJi8rXm.s:261    .text:00000000000000dc .L0 
     /tmp/ccJi8rXm.s:263    .text:00000000000000e0 .L0 
     /tmp/ccJi8rXm.s:264    .text:00000000000000e0 .L0 
     /tmp/ccJi8rXm.s:266    .text:00000000000000e4 .L0 
     /tmp/ccJi8rXm.s:268    .text:00000000000000e8 .L0 
     /tmp/ccJi8rXm.s:270    .text:00000000000000ec .L0 
     /tmp/ccJi8rXm.s:274    .text:00000000000000f0 .L0 
     /tmp/ccJi8rXm.s:278    .text:00000000000000f0 .L0 
     /tmp/ccJi8rXm.s:284    .text:00000000000000f8 .L0 
     /tmp/ccJi8rXm.s:285    .text:00000000000000f8 .L0 
     /tmp/ccJi8rXm.s:286    .text:00000000000000f8 .L0 
  src/../h/Riscv.hpp:107    .text:00000000000000f8 .L0 
     /tmp/ccJi8rXm.s:294    .text:0000000000000100 .L0 
     /tmp/ccJi8rXm.s:295    .text:0000000000000100 .L0 
     /tmp/ccJi8rXm.s:299    .text:0000000000000104 .L0 
     /tmp/ccJi8rXm.s:304    .text:0000000000000108 .L0 
     /tmp/ccJi8rXm.s:305    .text:0000000000000108 .L0 
     /tmp/ccJi8rXm.s:306    .text:0000000000000108 .L0 
  src/../h/Riscv.hpp:177    .text:0000000000000108 .L0 
     /tmp/ccJi8rXm.s:314    .text:0000000000000110 .L0 
     /tmp/ccJi8rXm.s:315    .text:0000000000000110 .L0 
     /tmp/ccJi8rXm.s:320    .text:0000000000000114 .L0 
     /tmp/ccJi8rXm.s:321    .text:0000000000000114 .L0 
     /tmp/ccJi8rXm.s:326    .text:000000000000011c .L0 
     /tmp/ccJi8rXm.s:327    .text:000000000000011c .L0 
GAS LISTING /tmp/ccJi8rXm.s 			page 17


  src/../h/Riscv.hpp:183    .text:000000000000011c .L0 
     /tmp/ccJi8rXm.s:339    .text:0000000000000120 .L0 
     /tmp/ccJi8rXm.s:340    .text:0000000000000120 .L0 
  src/../h/Riscv.hpp:113    .text:0000000000000120 .L0 
     /tmp/ccJi8rXm.s:352    .text:0000000000000124 .L0 
     /tmp/ccJi8rXm.s:354    .text:0000000000000124 .L0 
     /tmp/ccJi8rXm.s:355    .text:0000000000000124 .L0 
     /tmp/ccJi8rXm.s:364    .text:0000000000000128 .L0 
     /tmp/ccJi8rXm.s:365    .text:0000000000000128 .L0 
     /tmp/ccJi8rXm.s:366    .text:0000000000000128 .L0 
  src/../h/Riscv.hpp:107    .text:0000000000000128 .L0 
     /tmp/ccJi8rXm.s:374    .text:0000000000000130 .L0 
     /tmp/ccJi8rXm.s:375    .text:0000000000000130 .L0 
     /tmp/ccJi8rXm.s:379    .text:0000000000000134 .L0 
     /tmp/ccJi8rXm.s:384    .text:0000000000000138 .L0 
     /tmp/ccJi8rXm.s:385    .text:0000000000000138 .L0 
     /tmp/ccJi8rXm.s:386    .text:0000000000000138 .L0 
  src/../h/Riscv.hpp:177    .text:0000000000000138 .L0 
     /tmp/ccJi8rXm.s:394    .text:0000000000000140 .L0 
     /tmp/ccJi8rXm.s:395    .text:0000000000000140 .L0 
     /tmp/ccJi8rXm.s:400    .text:0000000000000144 .L0 
     /tmp/ccJi8rXm.s:401    .text:0000000000000144 .L0 
     /tmp/ccJi8rXm.s:404    .text:0000000000000150 .L0 
     /tmp/ccJi8rXm.s:405    .text:0000000000000150 .L0 
     /tmp/ccJi8rXm.s:410    .text:0000000000000158 .L0 
     /tmp/ccJi8rXm.s:411    .text:0000000000000158 .L0 
  src/../h/Riscv.hpp:183    .text:0000000000000158 .L0 
     /tmp/ccJi8rXm.s:423    .text:000000000000015c .L0 
     /tmp/ccJi8rXm.s:424    .text:000000000000015c .L0 
  src/../h/Riscv.hpp:113    .text:000000000000015c .L0 
     /tmp/ccJi8rXm.s:431    .text:0000000000000160 .L0 
     /tmp/ccJi8rXm.s:437    .text:0000000000000164 .L0 
     /tmp/ccJi8rXm.s:444    .text:0000000000000164 .L0 
     /tmp/ccJi8rXm.s:401    .text:0000000000000144 .L0 
     /tmp/ccJi8rXm.s:68     .text:000000000000003c .L6
     /tmp/ccJi8rXm.s:94     .text:0000000000000050 .L7
     /tmp/ccJi8rXm.s:119    .text:0000000000000064 .L8
     /tmp/ccJi8rXm.s:53     .text:000000000000002c .L1
     /tmp/ccJi8rXm.s:273    .text:00000000000000f0 .L15
     /tmp/ccJi8rXm.s:357    .text:0000000000000128 .L16
     /tmp/ccJi8rXm.s:256    .text:00000000000000d8 .L11
     /tmp/ccJi8rXm.s:1573   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccJi8rXm.s:2780   .debug_str:0000000000000633 .LASF124
     /tmp/ccJi8rXm.s:2684   .debug_str:0000000000000382 .LASF125
     /tmp/ccJi8rXm.s:2580   .debug_str:0000000000000075 .LASF126
     /tmp/ccJi8rXm.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccJi8rXm.s:440    .text:0000000000000164 .Letext0
     /tmp/ccJi8rXm.s:2564   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccJi8rXm.s:2602   .debug_str:0000000000000143 .LASF3
     /tmp/ccJi8rXm.s:2700   .debug_str:00000000000003e8 .LASF0
     /tmp/ccJi8rXm.s:2720   .debug_str:0000000000000456 .LASF1
     /tmp/ccJi8rXm.s:2686   .debug_str:0000000000000390 .LASF2
     /tmp/ccJi8rXm.s:2656   .debug_str:00000000000002cf .LASF4
     /tmp/ccJi8rXm.s:2752   .debug_str:000000000000053f .LASF5
     /tmp/ccJi8rXm.s:2586   .debug_str:00000000000000d0 .LASF6
     /tmp/ccJi8rXm.s:2724   .debug_str:0000000000000470 .LASF7
     /tmp/ccJi8rXm.s:2698   .debug_str:00000000000003d5 .LASF8
GAS LISTING /tmp/ccJi8rXm.s 			page 18


     /tmp/ccJi8rXm.s:2798   .debug_str:000000000000078e .LASF9
     /tmp/ccJi8rXm.s:2644   .debug_str:000000000000025c .LASF10
     /tmp/ccJi8rXm.s:2732   .debug_str:00000000000004a4 .LASF11
     /tmp/ccJi8rXm.s:2786   .debug_str:000000000000071c .LASF12
     /tmp/ccJi8rXm.s:2588   .debug_str:00000000000000d7 .LASF13
     /tmp/ccJi8rXm.s:2570   .debug_str:000000000000002b .LASF14
     /tmp/ccJi8rXm.s:2598   .debug_str:0000000000000127 .LASF15
     /tmp/ccJi8rXm.s:2744   .debug_str:00000000000004fb .LASF16
     /tmp/ccJi8rXm.s:2608   .debug_str:0000000000000171 .LASF17
     /tmp/ccJi8rXm.s:2716   .debug_str:0000000000000443 .LASF58
     /tmp/ccJi8rXm.s:2742   .debug_str:00000000000004f0 .LASF50
     /tmp/ccJi8rXm.s:2816   .debug_str:0000000000000833 .LASF52
     /tmp/ccJi8rXm.s:2572   .debug_str:000000000000003b .LASF18
     /tmp/ccJi8rXm.s:2764   .debug_str:0000000000000593 .LASF20
     /tmp/ccJi8rXm.s:2620   .debug_str:00000000000001ea .LASF22
     /tmp/ccJi8rXm.s:2618   .debug_str:00000000000001d5 .LASF24
     /tmp/ccJi8rXm.s:2756   .debug_str:0000000000000560 .LASF19
     /tmp/ccJi8rXm.s:2736   .debug_str:00000000000004d0 .LASF21
     /tmp/ccJi8rXm.s:2778   .debug_str:000000000000062c .LASF23
     /tmp/ccJi8rXm.s:2768   .debug_str:00000000000005c0 .LASF25
     /tmp/ccJi8rXm.s:2634   .debug_str:000000000000023f .LASF26
     /tmp/ccJi8rXm.s:2610   .debug_str:0000000000000187 .LASF27
     /tmp/ccJi8rXm.s:2566   .debug_str:0000000000000000 .LASF28
     /tmp/ccJi8rXm.s:2650   .debug_str:000000000000029d .LASF29
     /tmp/ccJi8rXm.s:2624   .debug_str:00000000000001fb .LASF30
     /tmp/ccJi8rXm.s:2590   .debug_str:00000000000000e7 .LASF31
     /tmp/ccJi8rXm.s:2822   .debug_str:0000000000000867 .LASF32
     /tmp/ccJi8rXm.s:2626   .debug_str:0000000000000203 .LASF33
     /tmp/ccJi8rXm.s:2702   .debug_str:00000000000003f5 .LASF34
     /tmp/ccJi8rXm.s:2814   .debug_str:0000000000000820 .LASF35
     /tmp/ccJi8rXm.s:2582   .debug_str:00000000000000a5 .LASF36
     /tmp/ccJi8rXm.s:2632   .debug_str:000000000000022c .LASF37
     /tmp/ccJi8rXm.s:2642   .debug_str:0000000000000256 .LASF38
     /tmp/ccJi8rXm.s:2776   .debug_str:000000000000061a .LASF39
     /tmp/ccJi8rXm.s:2672   .debug_str:0000000000000334 .LASF40
     /tmp/ccJi8rXm.s:2826   .debug_str:000000000000087f .LASF41
     /tmp/ccJi8rXm.s:2820   .debug_str:000000000000085c .LASF42
     /tmp/ccJi8rXm.s:2750   .debug_str:0000000000000527 .LASF43
     /tmp/ccJi8rXm.s:2666   .debug_str:00000000000002ff .LASF44
     /tmp/ccJi8rXm.s:2766   .debug_str:00000000000005a8 .LASF45
     /tmp/ccJi8rXm.s:2596   .debug_str:000000000000011d .LASF46
     /tmp/ccJi8rXm.s:2652   .debug_str:00000000000002b1 .LASF47
     /tmp/ccJi8rXm.s:2690   .debug_str:00000000000003aa .LASF48
     /tmp/ccJi8rXm.s:2646   .debug_str:000000000000026a .LASF49
     /tmp/ccJi8rXm.s:2758   .debug_str:0000000000000567 .LASF51
     /tmp/ccJi8rXm.s:2592   .debug_str:00000000000000fb .LASF53
     /tmp/ccJi8rXm.s:2806   .debug_str:00000000000007be .LASF54
     /tmp/ccJi8rXm.s:2670   .debug_str:0000000000000312 .LASF56
     /tmp/ccJi8rXm.s:2754   .debug_str:0000000000000551 .LASF55
     /tmp/ccJi8rXm.s:2770   .debug_str:00000000000005d3 .LASF57
     /tmp/ccJi8rXm.s:2682   .debug_str:0000000000000372 .LASF59
     /tmp/ccJi8rXm.s:2782   .debug_str:00000000000006f7 .LASF60
     /tmp/ccJi8rXm.s:2584   .debug_str:00000000000000ac .LASF61
     /tmp/ccJi8rXm.s:2794   .debug_str:0000000000000767 .LASF62
     /tmp/ccJi8rXm.s:2568   .debug_str:0000000000000008 .LASF64
     /tmp/ccJi8rXm.s:2804   .debug_str:00000000000007b4 .LASF63
     /tmp/ccJi8rXm.s:2578   .debug_str:0000000000000053 .LASF65
GAS LISTING /tmp/ccJi8rXm.s 			page 19


     /tmp/ccJi8rXm.s:2796   .debug_str:0000000000000772 .LASF67
     /tmp/ccJi8rXm.s:2694   .debug_str:00000000000003ba .LASF66
     /tmp/ccJi8rXm.s:2808   .debug_str:00000000000007d3 .LASF68
     /tmp/ccJi8rXm.s:2616   .debug_str:00000000000001bc .LASF108
     /tmp/ccJi8rXm.s:2654   .debug_str:00000000000002c7 .LASF69
     /tmp/ccJi8rXm.s:2788   .debug_str:000000000000072b .LASF127
     /tmp/ccJi8rXm.s:2730   .debug_str:000000000000049e .LASF70
     /tmp/ccJi8rXm.s:2760   .debug_str:0000000000000576 .LASF71
     /tmp/ccJi8rXm.s:2658   .debug_str:00000000000002d6 .LASF72
     /tmp/ccJi8rXm.s:2576   .debug_str:000000000000004b .LASF128
     /tmp/ccJi8rXm.s:2792   .debug_str:000000000000075e .LASF73
     /tmp/ccJi8rXm.s:2728   .debug_str:000000000000048e .LASF74
     /tmp/ccJi8rXm.s:2726   .debug_str:0000000000000483 .LASF75
     /tmp/ccJi8rXm.s:2612   .debug_str:000000000000019b .LASF76
     /tmp/ccJi8rXm.s:2688   .debug_str:000000000000039e .LASF77
     /tmp/ccJi8rXm.s:2604   .debug_str:0000000000000148 .LASF78
     /tmp/ccJi8rXm.s:2680   .debug_str:0000000000000365 .LASF79
     /tmp/ccJi8rXm.s:2734   .debug_str:00000000000004b3 .LASF80
     /tmp/ccJi8rXm.s:2718   .debug_str:0000000000000449 .LASF81
     /tmp/ccJi8rXm.s:2812   .debug_str:00000000000007fc .LASF82
     /tmp/ccJi8rXm.s:2740   .debug_str:00000000000004eb .LASF129
     /tmp/ccJi8rXm.s:2746   .debug_str:0000000000000511 .LASF83
     /tmp/ccJi8rXm.s:2774   .debug_str:0000000000000606 .LASF84
     /tmp/ccJi8rXm.s:2614   .debug_str:00000000000001b6 .LASF85
     /tmp/ccJi8rXm.s:2762   .debug_str:000000000000057f .LASF86
     /tmp/ccJi8rXm.s:2622   .debug_str:00000000000001f3 .LASF130
     /tmp/ccJi8rXm.s:2594   .debug_str:0000000000000117 .LASF87
     /tmp/ccJi8rXm.s:2676   .debug_str:0000000000000348 .LASF88
     /tmp/ccJi8rXm.s:2714   .debug_str:0000000000000436 .LASF89
     /tmp/ccJi8rXm.s:2708   .debug_str:000000000000040b .LASF90
     /tmp/ccJi8rXm.s:2810   .debug_str:00000000000007ef .LASF91
     /tmp/ccJi8rXm.s:2748   .debug_str:0000000000000517 .LASF92
     /tmp/ccJi8rXm.s:2824   .debug_str:000000000000086f .LASF93
     /tmp/ccJi8rXm.s:2628   .debug_str:0000000000000217 .LASF94
     /tmp/ccJi8rXm.s:2600   .debug_str:0000000000000133 .LASF95
     /tmp/ccJi8rXm.s:2818   .debug_str:000000000000084b .LASF96
     /tmp/ccJi8rXm.s:2660   .debug_str:00000000000002de .LASF97
     /tmp/ccJi8rXm.s:2696   .debug_str:00000000000003c4 .LASF98
     /tmp/ccJi8rXm.s:2784   .debug_str:0000000000000703 .LASF99
     /tmp/ccJi8rXm.s:2664   .debug_str:00000000000002fa .LASF100
     /tmp/ccJi8rXm.s:2706   .debug_str:0000000000000405 .LASF101
     /tmp/ccJi8rXm.s:2668   .debug_str:000000000000030a .LASF102
     /tmp/ccJi8rXm.s:2712   .debug_str:000000000000042c .LASF103
     /tmp/ccJi8rXm.s:2662   .debug_str:00000000000002f1 .LASF104
     /tmp/ccJi8rXm.s:2674   .debug_str:000000000000033a .LASF105
     /tmp/ccJi8rXm.s:2648   .debug_str:0000000000000280 .LASF106
     /tmp/ccJi8rXm.s:2606   .debug_str:0000000000000163 .LASF107
     /tmp/ccJi8rXm.s:2790   .debug_str:0000000000000732 .LASF109
     /tmp/ccJi8rXm.s:2704   .debug_str:00000000000003fc .LASF110
     /tmp/ccJi8rXm.s:2772   .debug_str:00000000000005ef .LASF111
     /tmp/ccJi8rXm.s:2800   .debug_str:000000000000079e .LASF112
     /tmp/ccJi8rXm.s:2678   .debug_str:000000000000035c .LASF113
     /tmp/ccJi8rXm.s:2722   .debug_str:0000000000000469 .LASF114
     /tmp/ccJi8rXm.s:2630   .debug_str:0000000000000227 .LASF115
     /tmp/ccJi8rXm.s:202    .text:00000000000000a0 .LFB42
     /tmp/ccJi8rXm.s:438    .text:0000000000000164 .LFE42
     /tmp/ccJi8rXm.s:2574   .debug_str:0000000000000044 .LASF116
GAS LISTING /tmp/ccJi8rXm.s 			page 20


     /tmp/ccJi8rXm.s:2436   .debug_loc:0000000000000000 .LLST6
     /tmp/ccJi8rXm.s:2692   .debug_str:00000000000003b4 .LASF117
     /tmp/ccJi8rXm.s:2443   .debug_loc:0000000000000023 .LLST7
     /tmp/ccJi8rXm.s:360    .text:0000000000000128 .LBB49
     /tmp/ccJi8rXm.s:434    .text:0000000000000164 .LBE49
     /tmp/ccJi8rXm.s:2710   .debug_str:0000000000000427 .LASF118
     /tmp/ccJi8rXm.s:2738   .debug_str:00000000000004e3 .LASF119
     /tmp/ccJi8rXm.s:362    .text:0000000000000128 .LBB50
     /tmp/ccJi8rXm.s:377    .text:0000000000000134 .LBE50
     /tmp/ccJi8rXm.s:382    .text:0000000000000138 .LBB52
     /tmp/ccJi8rXm.s:398    .text:0000000000000144 .LBE52
     /tmp/ccJi8rXm.s:408    .text:0000000000000158 .LBB54
     /tmp/ccJi8rXm.s:419    .text:000000000000015c .LBE54
     /tmp/ccJi8rXm.s:2458   .debug_loc:000000000000006c .LLST12
     /tmp/ccJi8rXm.s:421    .text:000000000000015c .LBB56
     /tmp/ccJi8rXm.s:433    .text:0000000000000164 .LBE56
     /tmp/ccJi8rXm.s:406    .text:0000000000000158 .LVL26
     /tmp/ccJi8rXm.s:280    .text:00000000000000f8 .LBB40
     /tmp/ccJi8rXm.s:349    .text:0000000000000124 .LBE40
     /tmp/ccJi8rXm.s:2465   .debug_loc:000000000000008f .LLST8
     /tmp/ccJi8rXm.s:2472   .debug_loc:00000000000000b2 .LLST9
     /tmp/ccJi8rXm.s:282    .text:00000000000000f8 .LBB41
     /tmp/ccJi8rXm.s:297    .text:0000000000000104 .LBE41
     /tmp/ccJi8rXm.s:302    .text:0000000000000108 .LBB43
     /tmp/ccJi8rXm.s:318    .text:0000000000000114 .LBE43
     /tmp/ccJi8rXm.s:324    .text:000000000000011c .LBB45
     /tmp/ccJi8rXm.s:335    .text:0000000000000120 .LBE45
     /tmp/ccJi8rXm.s:2479   .debug_loc:00000000000000d5 .LLST10
     /tmp/ccJi8rXm.s:337    .text:0000000000000120 .LBB47
     /tmp/ccJi8rXm.s:348    .text:0000000000000124 .LBE47
     /tmp/ccJi8rXm.s:2486   .debug_loc:00000000000000f8 .LLST11
     /tmp/ccJi8rXm.s:322    .text:000000000000011c .LVL20
     /tmp/ccJi8rXm.s:218    .text:00000000000000b8 .LBB36
     /tmp/ccJi8rXm.s:234    .text:00000000000000c4 .LBE36
     /tmp/ccJi8rXm.s:167    .text:0000000000000080 .LFB41
     /tmp/ccJi8rXm.s:196    .text:00000000000000a0 .LFE41
     /tmp/ccJi8rXm.s:10     .text:0000000000000000 .LFB40
     /tmp/ccJi8rXm.s:161    .text:0000000000000080 .LFE40
     /tmp/ccJi8rXm.s:2802   .debug_str:00000000000007af .LASF120
     /tmp/ccJi8rXm.s:2493   .debug_loc:000000000000011b .LLST0
     /tmp/ccJi8rXm.s:2636   .debug_str:0000000000000247 .LASF121
     /tmp/ccJi8rXm.s:2512   .debug_loc:0000000000000177 .LLST1
     /tmp/ccJi8rXm.s:2638   .debug_str:000000000000024c .LASF122
     /tmp/ccJi8rXm.s:2523   .debug_loc:00000000000001ad .LLST2
     /tmp/ccJi8rXm.s:2640   .debug_str:0000000000000251 .LASF123
     /tmp/ccJi8rXm.s:2530   .debug_loc:00000000000001d0 .LLST3
     /tmp/ccJi8rXm.s:71     .text:000000000000003c .LBB31
     /tmp/ccJi8rXm.s:91     .text:000000000000004c .LBE31
     /tmp/ccJi8rXm.s:2537   .debug_loc:00000000000001f3 .LLST5
     /tmp/ccJi8rXm.s:83     .text:0000000000000048 .LVL4
     /tmp/ccJi8rXm.s:96     .text:0000000000000050 .LBB28
     /tmp/ccJi8rXm.s:116    .text:0000000000000060 .LBE28
     /tmp/ccJi8rXm.s:2544   .debug_loc:0000000000000216 .LLST4
     /tmp/ccJi8rXm.s:108    .text:000000000000005c .LVL7
     /tmp/ccJi8rXm.s:121    .text:0000000000000064 .LBB27
     /tmp/ccJi8rXm.s:154    .text:000000000000007c .LBE27
     /tmp/ccJi8rXm.s:145    .text:0000000000000078 .LVL12
GAS LISTING /tmp/ccJi8rXm.s 			page 21


     /tmp/ccJi8rXm.s:237    .text:00000000000000c8 .LVL13
     /tmp/ccJi8rXm.s:251    .text:00000000000000d0 .LVL15
     /tmp/ccJi8rXm.s:245    .text:00000000000000cc .LVL14
     /tmp/ccJi8rXm.s:255    .text:00000000000000d8 .LVL16
     /tmp/ccJi8rXm.s:272    .text:00000000000000f0 .LVL17
     /tmp/ccJi8rXm.s:356    .text:0000000000000128 .LVL23
     /tmp/ccJi8rXm.s:416    .text:000000000000015c .LVL27
     /tmp/ccJi8rXm.s:300    .text:0000000000000108 .LVL18
     /tmp/ccJi8rXm.s:316    .text:0000000000000114 .LVL19
     /tmp/ccJi8rXm.s:332    .text:0000000000000120 .LVL21
     /tmp/ccJi8rXm.s:345    .text:0000000000000124 .LVL22
     /tmp/ccJi8rXm.s:32     .text:0000000000000014 .LVL0
     /tmp/ccJi8rXm.s:52     .text:000000000000002c .LVL1
     /tmp/ccJi8rXm.s:67     .text:000000000000003c .LVL2
     /tmp/ccJi8rXm.s:93     .text:0000000000000050 .LVL5
     /tmp/ccJi8rXm.s:118    .text:0000000000000064 .LVL8
     /tmp/ccJi8rXm.s:128    .text:0000000000000068 .LVL9
     /tmp/ccJi8rXm.s:78     .text:0000000000000040 .LVL3
     /tmp/ccJi8rXm.s:103    .text:0000000000000054 .LVL6
     /tmp/ccJi8rXm.s:134    .text:000000000000006c .LVL10
     /tmp/ccJi8rXm.s:140    .text:0000000000000070 .LVL11
     /tmp/ccJi8rXm.s:445    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN15MemoryAllocator10kmem_allocEm
_ZN15MemoryAllocator9kmem_freeEPv
_ZN7_thread12createThreadEPFvPvES0_
_ZN7_thread16timeSliceCounterE
_ZN7_thread8dispatchEv
