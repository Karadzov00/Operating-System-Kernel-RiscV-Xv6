GAS LISTING /tmp/ccJmm8WY.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv14syscallHandlerEv
   9              	_ZN5Riscv14syscallHandlerEv:
  10              	.LFB20:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 6/17/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** 
   8:src/Riscv.cpp **** 
   9:src/Riscv.cpp **** void Riscv::syscallHandler() {
  12              		.loc 1 9 30
  13              		.cfi_startproc
  10:src/Riscv.cpp ****     //read syscall code from register a0
  11:src/Riscv.cpp **** 
  12:src/Riscv.cpp ****     uint64 arg0;
  14              		.loc 1 12 5
  13:src/Riscv.cpp ****     uint64 arg1;
  15              		.loc 1 13 5
  14:src/Riscv.cpp **** //    uint64 arg2;
  15:src/Riscv.cpp **** //    uint64 arg3;
  16:src/Riscv.cpp **** //    uint64 arg4;
  17:src/Riscv.cpp **** //    uint64 arg5;
  18:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (arg0));    //read system call code
  16              		.loc 1 18 5
  17              		.loc 1 18 48 is_stmt 0
  18              	#APP
  19              	# 18 "src/Riscv.cpp" 1
  19              	    if(arg0== 0x01 ){
  20              		mv a4, a0
  21              	# 0 "" 2
  22              	.LVL0:
  23              		.loc 1 19 5 is_stmt 1
  24              	#NO_APP
  25              	.LBB10:
  26 0004 93071000 		li	a5,1
  27 0008 6304F700 		beq	a4,a5,.L7
  28 000c 67800000 		ret
  29              	.L7:
  30              	.LBE10:
   9:src/Riscv.cpp ****     //read syscall code from register a0
  31              		.loc 1 9 30 is_stmt 0
  32 0010 130101FF 		addi	sp,sp,-16
  33              		.cfi_def_cfa_offset 16
  34 0014 23341100 		sd	ra,8(sp)
  35 0018 23308100 		sd	s0,0(sp)
  36              		.cfi_offset 1, -8
  37              		.cfi_offset 8, -16
  38 001c 13040101 		addi	s0,sp,16
GAS LISTING /tmp/ccJmm8WY.s 			page 2


  39              		.cfi_def_cfa 8, 0
  40              	.LBB12:
  41              	.LBB11:
  20:src/Riscv.cpp ****         //mem_alloc
  21:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read size from a1 and move it to arg1 loc
  42              		.loc 1 21 9 is_stmt 1
  43              		.loc 1 21 52 is_stmt 0
  44              	#APP
  45              	# 21 "src/Riscv.cpp" 1
  22              	        uint64 ptr= (uint64)MemoryAllocator::mem_alloc(arg1);
  46              		mv a0, a1
  47              	# 0 "" 2
  48              	.LVL1:
  49              		.loc 1 22 9 is_stmt 1
  50              		.loc 1 22 55 is_stmt 0
  51              	#NO_APP
  52 0024 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
  52      E7800000 
  53              	.LVL2:
  23:src/Riscv.cpp **** 
  24:src/Riscv.cpp ****         //write return value to a0 register
  25:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ptr));
  54              		.loc 1 25 9 is_stmt 1
  55              		.loc 1 25 52 is_stmt 0
  56              	#APP
  57              	# 25 "src/Riscv.cpp" 1
  26              	    }
  58              		mv a0, a0
  59              	# 0 "" 2
  60              	#NO_APP
  61              	.LBE11:
  62              	.LBE12:
  27:src/Riscv.cpp **** 
  28:src/Riscv.cpp **** }
  63              		.loc 1 28 1
  64 0030 83308100 		ld	ra,8(sp)
  65              		.cfi_restore 1
  66 0034 03340100 		ld	s0,0(sp)
  67              		.cfi_restore 8
  68              		.cfi_def_cfa 2, 16
  69 0038 13010101 		addi	sp,sp,16
  70              		.cfi_def_cfa_offset 0
  71 003c 67800000 		jr	ra
  72              		.cfi_endproc
  73              	.LFE20:
  75              		.align	2
  76              		.globl	_ZN5Riscv10popSppSpieEv
  78              	_ZN5Riscv10popSppSpieEv:
  79              	.LFB21:
  29:src/Riscv.cpp **** 
  30:src/Riscv.cpp **** void Riscv::popSppSpie()
  31:src/Riscv.cpp **** {
  80              		.loc 1 31 1 is_stmt 1
  81              		.cfi_startproc
  82 0040 130101FF 		addi	sp,sp,-16
  83              		.cfi_def_cfa_offset 16
  84 0044 23348100 		sd	s0,8(sp)
GAS LISTING /tmp/ccJmm8WY.s 			page 3


  85              		.cfi_offset 8, -8
  86 0048 13040101 		addi	s0,sp,16
  87              		.cfi_def_cfa 8, 0
  32:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  88              		.loc 1 32 5
  89              		.loc 1 32 39 is_stmt 0
  90              	#APP
  91              	# 32 "src/Riscv.cpp" 1
  33              	    __asm__ volatile ("sret");
  92              		csrw sepc, ra
  93              	# 0 "" 2
  94              		.loc 1 33 5 is_stmt 1
  95              		.loc 1 33 30 is_stmt 0
  96              	# 33 "src/Riscv.cpp" 1
  34              	}
  97              		sret
  98              	# 0 "" 2
  99              		.loc 1 34 1
 100              	#NO_APP
 101 0054 03348100 		ld	s0,8(sp)
 102              		.cfi_restore 8
 103              		.cfi_def_cfa 2, 16
 104 0058 13010101 		addi	sp,sp,16
 105              		.cfi_def_cfa_offset 0
 106 005c 67800000 		jr	ra
 107              		.cfi_endproc
 108              	.LFE21:
 110              		.align	2
 111              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 113              	_ZN5Riscv20handleSupervisorTrapEv:
 114              	.LFB22:
  35:src/Riscv.cpp **** 
  36:src/Riscv.cpp **** void Riscv::handleSupervisorTrap(){
 115              		.loc 1 36 35 is_stmt 1
 116              		.cfi_startproc
 117 0060 130101FD 		addi	sp,sp,-48
 118              		.cfi_def_cfa_offset 48
 119 0064 23341102 		sd	ra,40(sp)
 120 0068 23308102 		sd	s0,32(sp)
 121 006c 233C9100 		sd	s1,24(sp)
 122              		.cfi_offset 1, -8
 123              		.cfi_offset 8, -16
 124              		.cfi_offset 9, -24
 125 0070 13040103 		addi	s0,sp,48
 126              		.cfi_def_cfa 8, 0
  37:src/Riscv.cpp ****     uint scause = r_scause();
 127              		.loc 1 37 5
 128              	.LBB13:
 129              	.LBB14:
 130              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccJmm8WY.s 			page 4


   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
GAS LISTING /tmp/ccJmm8WY.s 			page 5


  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
 131              		.loc 2 94 5
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 132              		.loc 2 95 5
 133              		.loc 2 95 72 is_stmt 0
 134              	#APP
 135              	# 95 "src/../h/Riscv.hpp" 1
  96              	    return scause;
 136              		csrr a5, scause
 137              	# 0 "" 2
 138              	#NO_APP
 139 0078 2338F4FC 		sd	a5,-48(s0)
 140              		.loc 2 96 5 is_stmt 1
 141              		.loc 2 96 12 is_stmt 0
 142 007c 833704FD 		ld	a5,-48(s0)
 143              	.LVL3:
 144              	.LBE14:
 145              	.LBE13:
  38:src/Riscv.cpp **** 
  39:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL || scause==0x0000000000000009UL){
 146              		.loc 1 39 5 is_stmt 1
 147              	.LBB15:
 148              		.loc 1 39 40 is_stmt 0
 149 0080 9B8787FF 		addiw	a5,a5,-8
 150              	.LVL4:
 151              		.loc 1 39 5
 152 0084 13071000 		li	a4,1
 153 0088 637CF700 		bleu	a5,a4,.L13
GAS LISTING /tmp/ccJmm8WY.s 			page 6


 154              	.L10:
 155              	.LBE15:
  40:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  41:src/Riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  42:src/Riscv.cpp **** 
  43:src/Riscv.cpp ****         //jump to syscall handler
  44:src/Riscv.cpp ****         syscallHandler();
  45:src/Riscv.cpp **** 
  46:src/Riscv.cpp ****         w_sepc(sepc);
  47:src/Riscv.cpp **** 
  48:src/Riscv.cpp ****     }
  49:src/Riscv.cpp ****     else if (scause == 0x8000000000000001UL){
  50:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  51:src/Riscv.cpp **** 
  52:src/Riscv.cpp ****     }
  53:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  54:src/Riscv.cpp ****     {
  55:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  56:src/Riscv.cpp **** 
  57:src/Riscv.cpp ****     }
  58:src/Riscv.cpp ****     else{
  59:src/Riscv.cpp ****         // unexpected trap cause
  60:src/Riscv.cpp ****         //print(scause)
  61:src/Riscv.cpp ****         //print(sepc)
  62:src/Riscv.cpp ****         //print(stval) //trap value
  63:src/Riscv.cpp **** 
  64:src/Riscv.cpp ****     }
  65:src/Riscv.cpp **** 
  66:src/Riscv.cpp **** }
 156              		.loc 1 66 1
 157 008c 83308102 		ld	ra,40(sp)
 158              		.cfi_remember_state
 159              		.cfi_restore 1
 160 0090 03340102 		ld	s0,32(sp)
 161              		.cfi_restore 8
 162              		.cfi_def_cfa 2, 48
 163 0094 83348101 		ld	s1,24(sp)
 164              		.cfi_restore 9
 165 0098 13010103 		addi	sp,sp,48
 166              		.cfi_def_cfa_offset 0
 167 009c 67800000 		jr	ra
 168              	.L13:
 169              		.cfi_restore_state
 170              	.LBB21:
 171              	.LBB16:
  41:src/Riscv.cpp **** 
 172              		.loc 1 41 9 is_stmt 1
 173              	.LBB17:
 174              	.LBB18:
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
GAS LISTING /tmp/ccJmm8WY.s 			page 7


 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 175              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 176              		.loc 2 107 5
 177              		.loc 2 107 64 is_stmt 0
 178              	#APP
 179              	# 107 "src/../h/Riscv.hpp" 1
 108              	    return sepc;
 180              		csrr a5, sepc
 181              	# 0 "" 2
 182              	#NO_APP
 183 00a4 233CF4FC 		sd	a5,-40(s0)
 184              		.loc 2 108 5 is_stmt 1
 185              		.loc 2 108 12 is_stmt 0
 186 00a8 833484FD 		ld	s1,-40(s0)
 187              	.LBE18:
 188              	.LBE17:
  41:src/Riscv.cpp **** 
 189              		.loc 1 41 34
 190 00ac 93844400 		addi	s1,s1,4
 191              	.LVL5:
  44:src/Riscv.cpp **** 
 192              		.loc 1 44 9 is_stmt 1
  44:src/Riscv.cpp **** 
 193              		.loc 1 44 23 is_stmt 0
 194 00b0 97000000 		call	_ZN5Riscv14syscallHandlerEv
 194      E7800000 
 195              	.LVL6:
  46:src/Riscv.cpp **** 
 196              		.loc 1 46 9 is_stmt 1
 197              	.LBB19:
 198              	.LBB20:
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 199              		.loc 2 113 5
 200              		.loc 2 113 65 is_stmt 0
 201              	#APP
 202              	# 113 "src/../h/Riscv.hpp" 1
 114              	}
 203              		csrw sepc, s1
 204              	# 0 "" 2
 205              	.LVL7:
 206              	#NO_APP
 207              	.LBE20:
 208              	.LBE19:
 209              	.LBE16:
  49:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 210              		.loc 1 49 10 is_stmt 1
  53:src/Riscv.cpp ****     {
 211              		.loc 1 53 10
 212              	.LBE21:
 213              		.loc 1 66 1 is_stmt 0
 214 00bc 6FF01FFD 		j	.L10
GAS LISTING /tmp/ccJmm8WY.s 			page 8


 215              		.cfi_endproc
 216              	.LFE22:
 218              	.Letext0:
 219              		.file 3 "src/../h/../lib/hw.h"
 220              		.file 4 "src/../h/MemoryAllocator.hpp"
GAS LISTING /tmp/ccJmm8WY.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccJmm8WY.s:9      .text:0000000000000000 _ZN5Riscv14syscallHandlerEv
     /tmp/ccJmm8WY.s:13     .text:0000000000000000 .L0 
     /tmp/ccJmm8WY.s:14     .text:0000000000000000 .L0 
     /tmp/ccJmm8WY.s:15     .text:0000000000000000 .L0 
     /tmp/ccJmm8WY.s:16     .text:0000000000000000 .L0 
     /tmp/ccJmm8WY.s:17     .text:0000000000000000 .L0 
       src/Riscv.cpp:18     .text:0000000000000000 .L0 
     /tmp/ccJmm8WY.s:26     .text:0000000000000004 .L0 
     /tmp/ccJmm8WY.s:32     .text:0000000000000010 .L0 
     /tmp/ccJmm8WY.s:33     .text:0000000000000014 .L0 
     /tmp/ccJmm8WY.s:36     .text:000000000000001c .L0 
     /tmp/ccJmm8WY.s:37     .text:000000000000001c .L0 
     /tmp/ccJmm8WY.s:39     .text:0000000000000020 .L0 
     /tmp/ccJmm8WY.s:43     .text:0000000000000020 .L0 
       src/Riscv.cpp:21     .text:0000000000000020 .L0 
     /tmp/ccJmm8WY.s:50     .text:0000000000000024 .L0 
     /tmp/ccJmm8WY.s:52     .text:0000000000000024 .L0 
     /tmp/ccJmm8WY.s:55     .text:000000000000002c .L0 
       src/Riscv.cpp:25     .text:000000000000002c .L0 
     /tmp/ccJmm8WY.s:64     .text:0000000000000030 .L0 
     /tmp/ccJmm8WY.s:65     .text:0000000000000034 .L0 
     /tmp/ccJmm8WY.s:67     .text:0000000000000038 .L0 
     /tmp/ccJmm8WY.s:68     .text:0000000000000038 .L0 
     /tmp/ccJmm8WY.s:70     .text:000000000000003c .L0 
     /tmp/ccJmm8WY.s:72     .text:0000000000000040 .L0 
     /tmp/ccJmm8WY.s:78     .text:0000000000000040 _ZN5Riscv10popSppSpieEv
     /tmp/ccJmm8WY.s:81     .text:0000000000000040 .L0 
     /tmp/ccJmm8WY.s:82     .text:0000000000000040 .L0 
     /tmp/ccJmm8WY.s:83     .text:0000000000000044 .L0 
     /tmp/ccJmm8WY.s:85     .text:0000000000000048 .L0 
     /tmp/ccJmm8WY.s:87     .text:000000000000004c .L0 
     /tmp/ccJmm8WY.s:89     .text:000000000000004c .L0 
       src/Riscv.cpp:32     .text:000000000000004c .L0 
     /tmp/ccJmm8WY.s:95     .text:0000000000000050 .L0 
       src/Riscv.cpp:33     .text:0000000000000050 .L0 
     /tmp/ccJmm8WY.s:101    .text:0000000000000054 .L0 
     /tmp/ccJmm8WY.s:102    .text:0000000000000058 .L0 
     /tmp/ccJmm8WY.s:103    .text:0000000000000058 .L0 
     /tmp/ccJmm8WY.s:105    .text:000000000000005c .L0 
     /tmp/ccJmm8WY.s:107    .text:0000000000000060 .L0 
     /tmp/ccJmm8WY.s:113    .text:0000000000000060 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccJmm8WY.s:116    .text:0000000000000060 .L0 
     /tmp/ccJmm8WY.s:117    .text:0000000000000060 .L0 
     /tmp/ccJmm8WY.s:118    .text:0000000000000064 .L0 
     /tmp/ccJmm8WY.s:122    .text:0000000000000070 .L0 
     /tmp/ccJmm8WY.s:123    .text:0000000000000070 .L0 
     /tmp/ccJmm8WY.s:124    .text:0000000000000070 .L0 
     /tmp/ccJmm8WY.s:126    .text:0000000000000074 .L0 
     /tmp/ccJmm8WY.s:131    .text:0000000000000074 .L0 
     /tmp/ccJmm8WY.s:132    .text:0000000000000074 .L0 
     /tmp/ccJmm8WY.s:133    .text:0000000000000074 .L0 
  src/../h/Riscv.hpp:95     .text:0000000000000074 .L0 
     /tmp/ccJmm8WY.s:141    .text:000000000000007c .L0 
     /tmp/ccJmm8WY.s:142    .text:000000000000007c .L0 
     /tmp/ccJmm8WY.s:148    .text:0000000000000080 .L0 
GAS LISTING /tmp/ccJmm8WY.s 			page 10


     /tmp/ccJmm8WY.s:149    .text:0000000000000080 .L0 
     /tmp/ccJmm8WY.s:152    .text:0000000000000084 .L0 
     /tmp/ccJmm8WY.s:157    .text:000000000000008c .L0 
     /tmp/ccJmm8WY.s:158    .text:0000000000000090 .L0 
     /tmp/ccJmm8WY.s:159    .text:0000000000000090 .L0 
     /tmp/ccJmm8WY.s:161    .text:0000000000000094 .L0 
     /tmp/ccJmm8WY.s:162    .text:0000000000000094 .L0 
     /tmp/ccJmm8WY.s:164    .text:0000000000000098 .L0 
     /tmp/ccJmm8WY.s:166    .text:000000000000009c .L0 
     /tmp/ccJmm8WY.s:169    .text:00000000000000a0 .L0 
     /tmp/ccJmm8WY.s:175    .text:00000000000000a0 .L0 
     /tmp/ccJmm8WY.s:176    .text:00000000000000a0 .L0 
     /tmp/ccJmm8WY.s:177    .text:00000000000000a0 .L0 
  src/../h/Riscv.hpp:107    .text:00000000000000a0 .L0 
     /tmp/ccJmm8WY.s:185    .text:00000000000000a8 .L0 
     /tmp/ccJmm8WY.s:186    .text:00000000000000a8 .L0 
     /tmp/ccJmm8WY.s:190    .text:00000000000000ac .L0 
     /tmp/ccJmm8WY.s:193    .text:00000000000000b0 .L0 
     /tmp/ccJmm8WY.s:194    .text:00000000000000b0 .L0 
     /tmp/ccJmm8WY.s:199    .text:00000000000000b8 .L0 
     /tmp/ccJmm8WY.s:200    .text:00000000000000b8 .L0 
  src/../h/Riscv.hpp:113    .text:00000000000000b8 .L0 
     /tmp/ccJmm8WY.s:211    .text:00000000000000bc .L0 
     /tmp/ccJmm8WY.s:213    .text:00000000000000bc .L0 
     /tmp/ccJmm8WY.s:214    .text:00000000000000bc .L0 
     /tmp/ccJmm8WY.s:215    .text:00000000000000c0 .L0 
     /tmp/ccJmm8WY.s:221    .text:00000000000000c0 .L0 
     /tmp/ccJmm8WY.s:29     .text:0000000000000010 .L7
     /tmp/ccJmm8WY.s:168    .text:00000000000000a0 .L13
     /tmp/ccJmm8WY.s:154    .text:000000000000008c .L10
     /tmp/ccJmm8WY.s:800    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccJmm8WY.s:1498   .debug_str:0000000000000251 .LASF73
     /tmp/ccJmm8WY.s:1460   .debug_str:0000000000000107 .LASF74
     /tmp/ccJmm8WY.s:1438   .debug_str:000000000000005e .LASF75
     /tmp/ccJmm8WY.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccJmm8WY.s:218    .text:00000000000000c0 .Letext0
     /tmp/ccJmm8WY.s:1426   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccJmm8WY.s:1510   .debug_str:000000000000033b .LASF3
     /tmp/ccJmm8WY.s:1516   .debug_str:0000000000000374 .LASF0
     /tmp/ccJmm8WY.s:1488   .debug_str:00000000000001f6 .LASF1
     /tmp/ccJmm8WY.s:1476   .debug_str:0000000000000197 .LASF2
     /tmp/ccJmm8WY.s:1448   .debug_str:00000000000000bd .LASF4
     /tmp/ccJmm8WY.s:1484   .debug_str:00000000000001dc .LASF5
     /tmp/ccJmm8WY.s:1436   .debug_str:0000000000000057 .LASF6
     /tmp/ccJmm8WY.s:1432   .debug_str:0000000000000034 .LASF7
     /tmp/ccJmm8WY.s:1466   .debug_str:0000000000000131 .LASF8
     /tmp/ccJmm8WY.s:1526   .debug_str:00000000000003b7 .LASF9
     /tmp/ccJmm8WY.s:1446   .debug_str:00000000000000af .LASF10
     /tmp/ccJmm8WY.s:1580   .debug_str:0000000000000586 .LASF11
     /tmp/ccJmm8WY.s:1470   .debug_str:0000000000000157 .LASF12
     /tmp/ccJmm8WY.s:1566   .debug_str:0000000000000529 .LASF13
     /tmp/ccJmm8WY.s:1536   .debug_str:0000000000000411 .LASF14
     /tmp/ccJmm8WY.s:1490   .debug_str:0000000000000209 .LASF15
     /tmp/ccJmm8WY.s:1456   .debug_str:00000000000000eb .LASF16
     /tmp/ccJmm8WY.s:1530   .debug_str:00000000000003d9 .LASF17
     /tmp/ccJmm8WY.s:1458   .debug_str:0000000000000101 .LASF58
     /tmp/ccJmm8WY.s:1496   .debug_str:0000000000000246 .LASF50
GAS LISTING /tmp/ccJmm8WY.s 			page 11


     /tmp/ccJmm8WY.s:1554   .debug_str:00000000000004e2 .LASF52
     /tmp/ccJmm8WY.s:1502   .debug_str:000000000000031a .LASF18
     /tmp/ccJmm8WY.s:1464   .debug_str:000000000000011c .LASF20
     /tmp/ccJmm8WY.s:1504   .debug_str:0000000000000323 .LASF22
     /tmp/ccJmm8WY.s:1450   .debug_str:00000000000000c4 .LASF24
     /tmp/ccJmm8WY.s:1520   .debug_str:0000000000000389 .LASF19
     /tmp/ccJmm8WY.s:1482   .debug_str:00000000000001c9 .LASF21
     /tmp/ccJmm8WY.s:1454   .debug_str:00000000000000e4 .LASF23
     /tmp/ccJmm8WY.s:1468   .debug_str:0000000000000144 .LASF25
     /tmp/ccJmm8WY.s:1518   .debug_str:0000000000000381 .LASF26
     /tmp/ccJmm8WY.s:1544   .debug_str:0000000000000462 .LASF27
     /tmp/ccJmm8WY.s:1486   .debug_str:00000000000001ee .LASF28
     /tmp/ccJmm8WY.s:1524   .debug_str:00000000000003a3 .LASF29
     /tmp/ccJmm8WY.s:1556   .debug_str:00000000000004fa .LASF30
     /tmp/ccJmm8WY.s:1442   .debug_str:0000000000000095 .LASF31
     /tmp/ccJmm8WY.s:1478   .debug_str:00000000000001a5 .LASF32
     /tmp/ccJmm8WY.s:1568   .debug_str:0000000000000539 .LASF33
     /tmp/ccJmm8WY.s:1574   .debug_str:0000000000000561 .LASF34
     /tmp/ccJmm8WY.s:1428   .debug_str:0000000000000000 .LASF35
     /tmp/ccJmm8WY.s:1440   .debug_str:000000000000008e .LASF36
     /tmp/ccJmm8WY.s:1522   .debug_str:0000000000000390 .LASF37
     /tmp/ccJmm8WY.s:1564   .debug_str:0000000000000523 .LASF38
     /tmp/ccJmm8WY.s:1528   .debug_str:00000000000003c7 .LASF39
     /tmp/ccJmm8WY.s:1444   .debug_str:00000000000000a9 .LASF40
     /tmp/ccJmm8WY.s:1562   .debug_str:0000000000000511 .LASF41
     /tmp/ccJmm8WY.s:1552   .debug_str:00000000000004d7 .LASF42
     /tmp/ccJmm8WY.s:1512   .debug_str:0000000000000340 .LASF43
     /tmp/ccJmm8WY.s:1452   .debug_str:00000000000000d9 .LASF44
     /tmp/ccJmm8WY.s:1492   .debug_str:0000000000000215 .LASF45
     /tmp/ccJmm8WY.s:1506   .debug_str:000000000000032c .LASF46
     /tmp/ccJmm8WY.s:1534   .debug_str:00000000000003fb .LASF47
     /tmp/ccJmm8WY.s:1560   .debug_str:0000000000000507 .LASF48
     /tmp/ccJmm8WY.s:1542   .debug_str:000000000000044c .LASF49
     /tmp/ccJmm8WY.s:1576   .debug_str:0000000000000568 .LASF51
     /tmp/ccJmm8WY.s:1514   .debug_str:0000000000000358 .LASF53
     /tmp/ccJmm8WY.s:1474   .debug_str:0000000000000182 .LASF54
     /tmp/ccJmm8WY.s:1540   .debug_str:000000000000042a .LASF56
     /tmp/ccJmm8WY.s:1578   .debug_str:0000000000000577 .LASF55
     /tmp/ccJmm8WY.s:1550   .debug_str:00000000000004bb .LASF57
     /tmp/ccJmm8WY.s:1434   .debug_str:0000000000000047 .LASF59
     /tmp/ccJmm8WY.s:1532   .debug_str:00000000000003ef .LASF60
     /tmp/ccJmm8WY.s:1546   .debug_str:0000000000000476 .LASF61
     /tmp/ccJmm8WY.s:1572   .debug_str:0000000000000557 .LASF62
     /tmp/ccJmm8WY.s:1430   .debug_str:0000000000000013 .LASF64
     /tmp/ccJmm8WY.s:1538   .debug_str:0000000000000421 .LASF63
     /tmp/ccJmm8WY.s:1548   .debug_str:000000000000049a .LASF65
     /tmp/ccJmm8WY.s:1480   .debug_str:00000000000001ad .LASF67
     /tmp/ccJmm8WY.s:1570   .debug_str:000000000000054d .LASF66
     /tmp/ccJmm8WY.s:1472   .debug_str:0000000000000166 .LASF68
     /tmp/ccJmm8WY.s:1494   .debug_str:000000000000022d .LASF76
     /tmp/ccJmm8WY.s:114    .text:0000000000000060 .LFB22
     /tmp/ccJmm8WY.s:216    .text:00000000000000c0 .LFE22
     /tmp/ccJmm8WY.s:1462   .debug_str:0000000000000115 .LASF69
     /tmp/ccJmm8WY.s:1385   .debug_loc:0000000000000000 .LLST2
     /tmp/ccJmm8WY.s:171    .text:00000000000000a0 .LBB16
     /tmp/ccJmm8WY.s:209    .text:00000000000000bc .LBE16
     /tmp/ccJmm8WY.s:1558   .debug_str:0000000000000502 .LASF70
GAS LISTING /tmp/ccJmm8WY.s 			page 12


     /tmp/ccJmm8WY.s:173    .text:00000000000000a0 .LBB17
     /tmp/ccJmm8WY.s:188    .text:00000000000000ac .LBE17
     /tmp/ccJmm8WY.s:197    .text:00000000000000b8 .LBB19
     /tmp/ccJmm8WY.s:208    .text:00000000000000bc .LBE19
     /tmp/ccJmm8WY.s:1392   .debug_loc:0000000000000023 .LLST3
     /tmp/ccJmm8WY.s:195    .text:00000000000000b8 .LVL6
     /tmp/ccJmm8WY.s:128    .text:0000000000000074 .LBB13
     /tmp/ccJmm8WY.s:145    .text:0000000000000080 .LBE13
     /tmp/ccJmm8WY.s:79     .text:0000000000000040 .LFB21
     /tmp/ccJmm8WY.s:108    .text:0000000000000060 .LFE21
     /tmp/ccJmm8WY.s:10     .text:0000000000000000 .LFB20
     /tmp/ccJmm8WY.s:73     .text:0000000000000040 .LFE20
     /tmp/ccJmm8WY.s:1500   .debug_str:0000000000000315 .LASF71
     /tmp/ccJmm8WY.s:1399   .debug_loc:0000000000000046 .LLST0
     /tmp/ccJmm8WY.s:1508   .debug_str:0000000000000336 .LASF72
     /tmp/ccJmm8WY.s:1406   .debug_loc:0000000000000069 .LLST1
     /tmp/ccJmm8WY.s:41     .text:0000000000000020 .LBB11
     /tmp/ccJmm8WY.s:61     .text:0000000000000030 .LBE11
     /tmp/ccJmm8WY.s:53     .text:000000000000002c .LVL2
     /tmp/ccJmm8WY.s:143    .text:0000000000000080 .LVL3
     /tmp/ccJmm8WY.s:150    .text:0000000000000084 .LVL4
     /tmp/ccJmm8WY.s:205    .text:00000000000000bc .LVL7
     /tmp/ccJmm8WY.s:22     .text:0000000000000004 .LVL0
     /tmp/ccJmm8WY.s:48     .text:0000000000000024 .LVL1
     /tmp/ccJmm8WY.s:222    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN15MemoryAllocator9mem_allocEm
