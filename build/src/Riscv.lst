GAS LISTING /tmp/ccernRxu.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 75736F20 		.string	"uso u syscallhandler"
   9      75207379 
   9      7363616C 
   9      6C68616E 
   9      646C6572 
  10              		.text
  11              		.align	2
  12              		.globl	_ZN5Riscv14syscallHandlerEv
  14              	_ZN5Riscv14syscallHandlerEv:
  15              	.LFB20:
  16              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 6/17/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** #include "../h/Print.hpp"
   8:src/Riscv.cpp **** 
   9:src/Riscv.cpp **** void Riscv::syscallHandler() {
  17              		.loc 1 9 30
  18              		.cfi_startproc
  19 0000 130101FF 		addi	sp,sp,-16
  20              		.cfi_def_cfa_offset 16
  21 0004 23341100 		sd	ra,8(sp)
  22 0008 23308100 		sd	s0,0(sp)
  23              		.cfi_offset 1, -8
  24              		.cfi_offset 8, -16
  25 000c 13040101 		addi	s0,sp,16
  26              		.cfi_def_cfa 8, 0
  10:src/Riscv.cpp ****     //read syscall code from register a0
  11:src/Riscv.cpp ****     printString("uso u syscallhandler");
  27              		.loc 1 11 5
  28              		.loc 1 11 16 is_stmt 0
  29 0010 17050000 		lla	a0,.LC0
  29      13050500 
  30 0018 97000000 		call	_Z11printStringPKc@plt
  30      E7800000 
  31              	.LVL0:
  12:src/Riscv.cpp ****     uint64 arg0;
  32              		.loc 1 12 5 is_stmt 1
  13:src/Riscv.cpp ****     uint64 arg1;
  33              		.loc 1 13 5
  14:src/Riscv.cpp **** //    uint64 arg2;
  15:src/Riscv.cpp **** //    uint64 arg3;
  16:src/Riscv.cpp **** //    uint64 arg4;
  17:src/Riscv.cpp **** //    uint64 arg5;
  18:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (arg0));    //read system call code
  34              		.loc 1 18 5
GAS LISTING /tmp/ccernRxu.s 			page 2


  35              		.loc 1 18 48 is_stmt 0
  36              	#APP
  37              	# 18 "src/Riscv.cpp" 1
  19              	    if(arg0== 0x01 ){
  38              		mv a4, a0
  39              	# 0 "" 2
  40              	.LVL1:
  41              		.loc 1 19 5 is_stmt 1
  42              	#NO_APP
  43              	.LBB14:
  44 0024 93071000 		li	a5,1
  45 0028 630AF700 		beq	a4,a5,.L4
  46              	.LVL2:
  47              	.L1:
  48              	.LBE14:
  20:src/Riscv.cpp ****         //mem_alloc
  21:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read size from a1 and move it to arg1 loc
  22:src/Riscv.cpp ****         uint64 ptr= (uint64)MemoryAllocator::mem_alloc(arg1);
  23:src/Riscv.cpp **** 
  24:src/Riscv.cpp ****         //write return value to a0 register
  25:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r" (ptr));
  26:src/Riscv.cpp ****     }
  27:src/Riscv.cpp **** 
  28:src/Riscv.cpp **** }
  49              		.loc 1 28 1 is_stmt 0
  50 002c 83308100 		ld	ra,8(sp)
  51              		.cfi_remember_state
  52              		.cfi_restore 1
  53 0030 03340100 		ld	s0,0(sp)
  54              		.cfi_restore 8
  55              		.cfi_def_cfa 2, 16
  56 0034 13010101 		addi	sp,sp,16
  57              		.cfi_def_cfa_offset 0
  58 0038 67800000 		jr	ra
  59              	.LVL3:
  60              	.L4:
  61              		.cfi_restore_state
  62              	.LBB16:
  63              	.LBB15:
  21:src/Riscv.cpp ****         uint64 ptr= (uint64)MemoryAllocator::mem_alloc(arg1);
  64              		.loc 1 21 9 is_stmt 1
  21:src/Riscv.cpp ****         uint64 ptr= (uint64)MemoryAllocator::mem_alloc(arg1);
  65              		.loc 1 21 52 is_stmt 0
  66              	#APP
  67              	# 21 "src/Riscv.cpp" 1
  68              		mv a0, a1
  69              	# 0 "" 2
  70              	.LVL4:
  22:src/Riscv.cpp **** 
  71              		.loc 1 22 9 is_stmt 1
  22:src/Riscv.cpp **** 
  72              		.loc 1 22 55 is_stmt 0
  73              	#NO_APP
  74 0040 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
  74      E7800000 
  75              	.LVL5:
  25:src/Riscv.cpp ****     }
GAS LISTING /tmp/ccernRxu.s 			page 3


  76              		.loc 1 25 9 is_stmt 1
  25:src/Riscv.cpp ****     }
  77              		.loc 1 25 47 is_stmt 0
  78              	#APP
  79              	# 25 "src/Riscv.cpp" 1
  80              		mv a5, a0
  81              	# 0 "" 2
  82              	.LVL6:
  83              	#NO_APP
  84              	.LBE15:
  85              	.LBE16:
  86              		.loc 1 28 1
  87 004c 6FF01FFE 		j	.L1
  88              		.cfi_endproc
  89              	.LFE20:
  91              		.align	2
  92              		.globl	_ZN5Riscv10popSppSpieEv
  94              	_ZN5Riscv10popSppSpieEv:
  95              	.LFB21:
  29:src/Riscv.cpp **** 
  30:src/Riscv.cpp **** void Riscv::popSppSpie()
  31:src/Riscv.cpp **** {
  96              		.loc 1 31 1 is_stmt 1
  97              		.cfi_startproc
  98 0050 130101FF 		addi	sp,sp,-16
  99              		.cfi_def_cfa_offset 16
 100 0054 23348100 		sd	s0,8(sp)
 101              		.cfi_offset 8, -8
 102 0058 13040101 		addi	s0,sp,16
 103              		.cfi_def_cfa 8, 0
  32:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
 104              		.loc 1 32 5
 105              		.loc 1 32 39 is_stmt 0
 106              	#APP
 107              	# 32 "src/Riscv.cpp" 1
  33              	    __asm__ volatile ("sret");
 108              		csrw sepc, ra
 109              	# 0 "" 2
 110              		.loc 1 33 5 is_stmt 1
 111              		.loc 1 33 30 is_stmt 0
 112              	# 33 "src/Riscv.cpp" 1
  34              	}
 113              		sret
 114              	# 0 "" 2
 115              		.loc 1 34 1
 116              	#NO_APP
 117 0064 03348100 		ld	s0,8(sp)
 118              		.cfi_restore 8
 119              		.cfi_def_cfa 2, 16
 120 0068 13010101 		addi	sp,sp,16
 121              		.cfi_def_cfa_offset 0
 122 006c 67800000 		jr	ra
 123              		.cfi_endproc
 124              	.LFE21:
 126              		.section	.rodata.str1.8
 127 0015 000000   		.align	3
 128              	.LC1:
GAS LISTING /tmp/ccernRxu.s 			page 4


 129 0018 75736F20 		.string	"uso u handleTrap"
 129      75206861 
 129      6E646C65 
 129      54726170 
 129      00
 130              		.text
 131              		.align	2
 132              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 134              	_ZN5Riscv20handleSupervisorTrapEv:
 135              	.LFB22:
  35:src/Riscv.cpp **** 
  36:src/Riscv.cpp **** void Riscv::handleSupervisorTrap(){
 136              		.loc 1 36 35 is_stmt 1
 137              		.cfi_startproc
 138 0070 130101FC 		addi	sp,sp,-64
 139              		.cfi_def_cfa_offset 64
 140 0074 233C1102 		sd	ra,56(sp)
 141 0078 23388102 		sd	s0,48(sp)
 142 007c 23349102 		sd	s1,40(sp)
 143 0080 23302103 		sd	s2,32(sp)
 144              		.cfi_offset 1, -8
 145              		.cfi_offset 8, -16
 146              		.cfi_offset 9, -24
 147              		.cfi_offset 18, -32
 148 0084 13040104 		addi	s0,sp,64
 149              		.cfi_def_cfa 8, 0
  37:src/Riscv.cpp ****     uint scause = r_scause();
 150              		.loc 1 37 5
 151              	.LBB17:
 152              	.LBB18:
 153              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccernRxu.s 			page 5


  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     //static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
GAS LISTING /tmp/ccernRxu.s 			page 6


  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
 154              		.loc 2 94 5
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 155              		.loc 2 95 5
 156              		.loc 2 95 72 is_stmt 0
 157              	#APP
 158              	# 95 "src/../h/Riscv.hpp" 1
  96              	    return scause;
 159              		csrr a5, scause
 160              	# 0 "" 2
 161              	#NO_APP
 162 008c 2334F4FC 		sd	a5,-56(s0)
 163              		.loc 2 96 5 is_stmt 1
 164              		.loc 2 96 12 is_stmt 0
 165 0090 833784FC 		ld	a5,-56(s0)
 166              	.LVL7:
 167              	.LBE18:
 168              	.LBE17:
  38:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL || scause==0x0000000000000009UL){
 169              		.loc 1 38 5 is_stmt 1
 170              	.LBB19:
 171              		.loc 1 38 40 is_stmt 0
 172 0094 9B8787FF 		addiw	a5,a5,-8
 173              	.LVL8:
 174              		.loc 1 38 5
 175 0098 13071000 		li	a4,1
 176 009c 637EF700 		bleu	a5,a4,.L10
 177              	.L7:
 178              	.LBE19:
  39:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  40:src/Riscv.cpp ****         printString("uso u handleTrap");
  41:src/Riscv.cpp ****         uint64  sepc = r_sepc() + 4;
  42:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
  43:src/Riscv.cpp **** 
  44:src/Riscv.cpp ****         //jump to syscall handler
  45:src/Riscv.cpp ****         syscallHandler();
  46:src/Riscv.cpp **** 
  47:src/Riscv.cpp ****         w_sstatus(sstatus);
  48:src/Riscv.cpp ****         w_sepc(sepc);
  49:src/Riscv.cpp ****     }
  50:src/Riscv.cpp ****     else if (scause == 0x8000000000000001UL){
  51:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  52:src/Riscv.cpp **** 
  53:src/Riscv.cpp ****     }
  54:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  55:src/Riscv.cpp ****     {
  56:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
GAS LISTING /tmp/ccernRxu.s 			page 7


  57:src/Riscv.cpp **** 
  58:src/Riscv.cpp ****     }
  59:src/Riscv.cpp ****     else{
  60:src/Riscv.cpp ****         // unexpected trap cause
  61:src/Riscv.cpp ****         //print(scause)
  62:src/Riscv.cpp ****         //print(sepc)
  63:src/Riscv.cpp ****         //print(stval) //trap value
  64:src/Riscv.cpp **** 
  65:src/Riscv.cpp ****     }
  66:src/Riscv.cpp **** 
  67:src/Riscv.cpp **** }
 179              		.loc 1 67 1
 180 00a0 83308103 		ld	ra,56(sp)
 181              		.cfi_remember_state
 182              		.cfi_restore 1
 183 00a4 03340103 		ld	s0,48(sp)
 184              		.cfi_restore 8
 185              		.cfi_def_cfa 2, 64
 186 00a8 83348102 		ld	s1,40(sp)
 187              		.cfi_restore 9
 188 00ac 03390102 		ld	s2,32(sp)
 189              		.cfi_restore 18
 190 00b0 13010104 		addi	sp,sp,64
 191              		.cfi_def_cfa_offset 0
 192 00b4 67800000 		jr	ra
 193              	.L10:
 194              		.cfi_restore_state
 195              	.LBB29:
 196              	.LBB20:
  40:src/Riscv.cpp ****         uint64  sepc = r_sepc() + 4;
 197              		.loc 1 40 9 is_stmt 1
  40:src/Riscv.cpp ****         uint64  sepc = r_sepc() + 4;
 198              		.loc 1 40 20 is_stmt 0
 199 00b8 17050000 		lla	a0,.LC1
 199      13050500 
 200 00c0 97000000 		call	_Z11printStringPKc@plt
 200      E7800000 
 201              	.LVL9:
  41:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
 202              		.loc 1 41 9 is_stmt 1
 203              	.LBB21:
 204              	.LBB22:
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 205              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 206              		.loc 2 107 5
 207              		.loc 2 107 64 is_stmt 0
 208              	#APP
GAS LISTING /tmp/ccernRxu.s 			page 8


 209              	# 107 "src/../h/Riscv.hpp" 1
 108              	    return sepc;
 210              		csrr a5, sepc
 211              	# 0 "" 2
 212              	#NO_APP
 213 00cc 233CF4FC 		sd	a5,-40(s0)
 214              		.loc 2 108 5 is_stmt 1
 215              		.loc 2 108 12 is_stmt 0
 216 00d0 833484FD 		ld	s1,-40(s0)
 217              	.LBE22:
 218              	.LBE21:
  41:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
 219              		.loc 1 41 35
 220 00d4 93844400 		addi	s1,s1,4
 221              	.LVL10:
  42:src/Riscv.cpp **** 
 222              		.loc 1 42 9 is_stmt 1
 223              	.LBB23:
 224              	.LBB24:
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/Riscv.hpp ****     return stvec;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/Riscv.hpp **** {
 125:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     uint64 volatile stval;
 131:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/Riscv.hpp ****     return stval;
 133:src/../h/Riscv.hpp **** }
 134:src/../h/Riscv.hpp **** 
 135:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/Riscv.hpp **** {
 137:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
GAS LISTING /tmp/ccernRxu.s 			page 9


 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/Riscv.hpp **** {
 152:src/../h/Riscv.hpp ****     uint64 volatile sip;
 153:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/Riscv.hpp ****     return sip;
 155:src/../h/Riscv.hpp **** }
 156:src/../h/Riscv.hpp **** 
 157:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/Riscv.hpp **** {
 159:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** //mask set
 163:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 164:src/../h/Riscv.hpp **** {
 165:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/Riscv.hpp **** }
 167:src/../h/Riscv.hpp **** 
 168:src/../h/Riscv.hpp **** //mask clear
 169:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 170:src/../h/Riscv.hpp **** {
 171:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/Riscv.hpp **** }
 173:src/../h/Riscv.hpp **** 
 174:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 175:src/../h/Riscv.hpp **** {
 176:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 225              		.loc 2 176 5
 177:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 226              		.loc 2 177 5
 227              		.loc 2 177 76 is_stmt 0
 228              	#APP
 229              	# 177 "src/../h/Riscv.hpp" 1
 178              	    return sstatus;
 230              		csrr a5, sstatus
 231              	# 0 "" 2
 232              	#NO_APP
 233 00dc 2338F4FC 		sd	a5,-48(s0)
 234              		.loc 2 178 5 is_stmt 1
 235              		.loc 2 178 12 is_stmt 0
 236 00e0 033904FD 		ld	s2,-48(s0)
 237              	.LVL11:
 238              	.LBE24:
 239              	.LBE23:
  45:src/Riscv.cpp **** 
 240              		.loc 1 45 9 is_stmt 1
  45:src/Riscv.cpp **** 
 241              		.loc 1 45 23 is_stmt 0
 242 00e4 97000000 		call	_ZN5Riscv14syscallHandlerEv
 242      E7800000 
 243              	.LVL12:
  47:src/Riscv.cpp ****         w_sepc(sepc);
 244              		.loc 1 47 9 is_stmt 1
 245              	.LBB25:
GAS LISTING /tmp/ccernRxu.s 			page 10


 246              	.LBB26:
 179:src/../h/Riscv.hpp **** }
 180:src/../h/Riscv.hpp **** 
 181:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 182:src/../h/Riscv.hpp **** {
 183:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 247              		.loc 2 183 5
 248              		.loc 2 183 77 is_stmt 0
 249              	#APP
 250              	# 183 "src/../h/Riscv.hpp" 1
 184              	}
 251              		csrw sstatus, s2
 252              	# 0 "" 2
 253              	.LVL13:
 254              	#NO_APP
 255              	.LBE26:
 256              	.LBE25:
  48:src/Riscv.cpp ****     }
 257              		.loc 1 48 9 is_stmt 1
 258              	.LBB27:
 259              	.LBB28:
 113:src/../h/Riscv.hpp **** }
 260              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 261              		.loc 2 113 65 is_stmt 0
 262              	#APP
 263              	# 113 "src/../h/Riscv.hpp" 1
 264              		csrw sepc, s1
 265              	# 0 "" 2
 266              	.LVL14:
 267              	#NO_APP
 268              	.LBE28:
 269              	.LBE27:
 270              	.LBE20:
  50:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 271              		.loc 1 50 10 is_stmt 1
  54:src/Riscv.cpp ****     {
 272              		.loc 1 54 10
 273              	.LBE29:
 274              		.loc 1 67 1 is_stmt 0
 275 00f4 6FF0DFFA 		j	.L7
 276              		.cfi_endproc
 277              	.LFE22:
 279              	.Letext0:
 280              		.file 3 "src/../h/../lib/hw.h"
 281              		.file 4 "src/../h/MemoryAllocator.hpp"
 282              		.file 5 "src/../h/Print.hpp"
GAS LISTING /tmp/ccernRxu.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccernRxu.s:14     .text:0000000000000000 _ZN5Riscv14syscallHandlerEv
     /tmp/ccernRxu.s:18     .text:0000000000000000 .L0 
     /tmp/ccernRxu.s:19     .text:0000000000000000 .L0 
     /tmp/ccernRxu.s:20     .text:0000000000000004 .L0 
     /tmp/ccernRxu.s:23     .text:000000000000000c .L0 
     /tmp/ccernRxu.s:24     .text:000000000000000c .L0 
     /tmp/ccernRxu.s:26     .text:0000000000000010 .L0 
     /tmp/ccernRxu.s:28     .text:0000000000000010 .L0 
     /tmp/ccernRxu.s:29     .text:0000000000000010 .L0 
     /tmp/ccernRxu.s:33     .text:0000000000000020 .L0 
     /tmp/ccernRxu.s:34     .text:0000000000000020 .L0 
     /tmp/ccernRxu.s:35     .text:0000000000000020 .L0 
       src/Riscv.cpp:18     .text:0000000000000020 .L0 
     /tmp/ccernRxu.s:44     .text:0000000000000024 .L0 
     /tmp/ccernRxu.s:50     .text:000000000000002c .L0 
     /tmp/ccernRxu.s:51     .text:0000000000000030 .L0 
     /tmp/ccernRxu.s:52     .text:0000000000000030 .L0 
     /tmp/ccernRxu.s:54     .text:0000000000000034 .L0 
     /tmp/ccernRxu.s:55     .text:0000000000000034 .L0 
     /tmp/ccernRxu.s:57     .text:0000000000000038 .L0 
     /tmp/ccernRxu.s:61     .text:000000000000003c .L0 
     /tmp/ccernRxu.s:65     .text:000000000000003c .L0 
       src/Riscv.cpp:21     .text:000000000000003c .L0 
     /tmp/ccernRxu.s:72     .text:0000000000000040 .L0 
     /tmp/ccernRxu.s:74     .text:0000000000000040 .L0 
     /tmp/ccernRxu.s:77     .text:0000000000000048 .L0 
       src/Riscv.cpp:25     .text:0000000000000048 .L0 
     /tmp/ccernRxu.s:87     .text:000000000000004c .L0 
     /tmp/ccernRxu.s:88     .text:0000000000000050 .L0 
     /tmp/ccernRxu.s:94     .text:0000000000000050 _ZN5Riscv10popSppSpieEv
     /tmp/ccernRxu.s:97     .text:0000000000000050 .L0 
     /tmp/ccernRxu.s:98     .text:0000000000000050 .L0 
     /tmp/ccernRxu.s:99     .text:0000000000000054 .L0 
     /tmp/ccernRxu.s:101    .text:0000000000000058 .L0 
     /tmp/ccernRxu.s:103    .text:000000000000005c .L0 
     /tmp/ccernRxu.s:105    .text:000000000000005c .L0 
       src/Riscv.cpp:32     .text:000000000000005c .L0 
     /tmp/ccernRxu.s:111    .text:0000000000000060 .L0 
       src/Riscv.cpp:33     .text:0000000000000060 .L0 
     /tmp/ccernRxu.s:117    .text:0000000000000064 .L0 
     /tmp/ccernRxu.s:118    .text:0000000000000068 .L0 
     /tmp/ccernRxu.s:119    .text:0000000000000068 .L0 
     /tmp/ccernRxu.s:121    .text:000000000000006c .L0 
     /tmp/ccernRxu.s:123    .text:0000000000000070 .L0 
     /tmp/ccernRxu.s:134    .text:0000000000000070 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccernRxu.s:137    .text:0000000000000070 .L0 
     /tmp/ccernRxu.s:138    .text:0000000000000070 .L0 
     /tmp/ccernRxu.s:139    .text:0000000000000074 .L0 
     /tmp/ccernRxu.s:144    .text:0000000000000084 .L0 
     /tmp/ccernRxu.s:145    .text:0000000000000084 .L0 
     /tmp/ccernRxu.s:146    .text:0000000000000084 .L0 
     /tmp/ccernRxu.s:147    .text:0000000000000084 .L0 
     /tmp/ccernRxu.s:149    .text:0000000000000088 .L0 
     /tmp/ccernRxu.s:154    .text:0000000000000088 .L0 
     /tmp/ccernRxu.s:155    .text:0000000000000088 .L0 
GAS LISTING /tmp/ccernRxu.s 			page 12


     /tmp/ccernRxu.s:156    .text:0000000000000088 .L0 
  src/../h/Riscv.hpp:95     .text:0000000000000088 .L0 
     /tmp/ccernRxu.s:164    .text:0000000000000090 .L0 
     /tmp/ccernRxu.s:165    .text:0000000000000090 .L0 
     /tmp/ccernRxu.s:171    .text:0000000000000094 .L0 
     /tmp/ccernRxu.s:172    .text:0000000000000094 .L0 
     /tmp/ccernRxu.s:175    .text:0000000000000098 .L0 
     /tmp/ccernRxu.s:180    .text:00000000000000a0 .L0 
     /tmp/ccernRxu.s:181    .text:00000000000000a4 .L0 
     /tmp/ccernRxu.s:182    .text:00000000000000a4 .L0 
     /tmp/ccernRxu.s:184    .text:00000000000000a8 .L0 
     /tmp/ccernRxu.s:185    .text:00000000000000a8 .L0 
     /tmp/ccernRxu.s:187    .text:00000000000000ac .L0 
     /tmp/ccernRxu.s:189    .text:00000000000000b0 .L0 
     /tmp/ccernRxu.s:191    .text:00000000000000b4 .L0 
     /tmp/ccernRxu.s:194    .text:00000000000000b8 .L0 
     /tmp/ccernRxu.s:198    .text:00000000000000b8 .L0 
     /tmp/ccernRxu.s:199    .text:00000000000000b8 .L0 
     /tmp/ccernRxu.s:205    .text:00000000000000c8 .L0 
     /tmp/ccernRxu.s:206    .text:00000000000000c8 .L0 
     /tmp/ccernRxu.s:207    .text:00000000000000c8 .L0 
  src/../h/Riscv.hpp:107    .text:00000000000000c8 .L0 
     /tmp/ccernRxu.s:215    .text:00000000000000d0 .L0 
     /tmp/ccernRxu.s:216    .text:00000000000000d0 .L0 
     /tmp/ccernRxu.s:220    .text:00000000000000d4 .L0 
     /tmp/ccernRxu.s:225    .text:00000000000000d8 .L0 
     /tmp/ccernRxu.s:226    .text:00000000000000d8 .L0 
     /tmp/ccernRxu.s:227    .text:00000000000000d8 .L0 
  src/../h/Riscv.hpp:177    .text:00000000000000d8 .L0 
     /tmp/ccernRxu.s:235    .text:00000000000000e0 .L0 
     /tmp/ccernRxu.s:236    .text:00000000000000e0 .L0 
     /tmp/ccernRxu.s:241    .text:00000000000000e4 .L0 
     /tmp/ccernRxu.s:242    .text:00000000000000e4 .L0 
     /tmp/ccernRxu.s:247    .text:00000000000000ec .L0 
     /tmp/ccernRxu.s:248    .text:00000000000000ec .L0 
  src/../h/Riscv.hpp:183    .text:00000000000000ec .L0 
     /tmp/ccernRxu.s:260    .text:00000000000000f0 .L0 
     /tmp/ccernRxu.s:261    .text:00000000000000f0 .L0 
  src/../h/Riscv.hpp:113    .text:00000000000000f0 .L0 
     /tmp/ccernRxu.s:272    .text:00000000000000f4 .L0 
     /tmp/ccernRxu.s:274    .text:00000000000000f4 .L0 
     /tmp/ccernRxu.s:275    .text:00000000000000f4 .L0 
     /tmp/ccernRxu.s:276    .text:00000000000000f8 .L0 
     /tmp/ccernRxu.s:283    .text:00000000000000f8 .L0 
     /tmp/ccernRxu.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccernRxu.s:29     .text:0000000000000010 .L0 
     /tmp/ccernRxu.s:128    .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccernRxu.s:199    .text:00000000000000b8 .L0 
     /tmp/ccernRxu.s:60     .text:000000000000003c .L4
     /tmp/ccernRxu.s:47     .text:000000000000002c .L1
     /tmp/ccernRxu.s:193    .text:00000000000000b8 .L10
     /tmp/ccernRxu.s:177    .text:00000000000000a0 .L7
     /tmp/ccernRxu.s:942    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccernRxu.s:1679   .debug_str:0000000000000270 .LASF70
     /tmp/ccernRxu.s:1639   .debug_str:000000000000011a .LASF71
     /tmp/ccernRxu.s:1615   .debug_str:000000000000005e .LASF72
     /tmp/ccernRxu.s:5      .text:0000000000000000 .Ltext0
GAS LISTING /tmp/ccernRxu.s 			page 13


     /tmp/ccernRxu.s:279    .text:00000000000000f8 .Letext0
     /tmp/ccernRxu.s:1603   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccernRxu.s:1691   .debug_str:000000000000035a .LASF3
     /tmp/ccernRxu.s:1695   .debug_str:0000000000000377 .LASF0
     /tmp/ccernRxu.s:1667   .debug_str:0000000000000209 .LASF1
     /tmp/ccernRxu.s:1655   .debug_str:00000000000001aa .LASF2
     /tmp/ccernRxu.s:1627   .debug_str:00000000000000d0 .LASF4
     /tmp/ccernRxu.s:1663   .debug_str:00000000000001ef .LASF5
     /tmp/ccernRxu.s:1613   .debug_str:0000000000000057 .LASF6
     /tmp/ccernRxu.s:1609   .debug_str:0000000000000034 .LASF7
     /tmp/ccernRxu.s:1645   .debug_str:0000000000000144 .LASF8
     /tmp/ccernRxu.s:1707   .debug_str:00000000000003c2 .LASF9
     /tmp/ccernRxu.s:1625   .debug_str:00000000000000c2 .LASF10
     /tmp/ccernRxu.s:1759   .debug_str:0000000000000582 .LASF11
     /tmp/ccernRxu.s:1649   .debug_str:000000000000016a .LASF12
     /tmp/ccernRxu.s:1747   .debug_str:0000000000000534 .LASF13
     /tmp/ccernRxu.s:1717   .debug_str:000000000000041c .LASF14
     /tmp/ccernRxu.s:1669   .debug_str:000000000000021c .LASF15
     /tmp/ccernRxu.s:1635   .debug_str:00000000000000fe .LASF16
     /tmp/ccernRxu.s:1711   .debug_str:00000000000003e4 .LASF17
     /tmp/ccernRxu.s:1637   .debug_str:0000000000000114 .LASF54
     /tmp/ccernRxu.s:1677   .debug_str:0000000000000265 .LASF73
     /tmp/ccernRxu.s:1735   .debug_str:00000000000004ed .LASF74
     /tmp/ccernRxu.s:1683   .debug_str:0000000000000339 .LASF18
     /tmp/ccernRxu.s:1643   .debug_str:000000000000012f .LASF20
     /tmp/ccernRxu.s:1685   .debug_str:0000000000000342 .LASF22
     /tmp/ccernRxu.s:1629   .debug_str:00000000000000d7 .LASF24
     /tmp/ccernRxu.s:1699   .debug_str:000000000000038c .LASF19
     /tmp/ccernRxu.s:1661   .debug_str:00000000000001dc .LASF21
     /tmp/ccernRxu.s:1633   .debug_str:00000000000000f7 .LASF23
     /tmp/ccernRxu.s:1647   .debug_str:0000000000000157 .LASF25
     /tmp/ccernRxu.s:1697   .debug_str:0000000000000384 .LASF26
     /tmp/ccernRxu.s:1725   .debug_str:000000000000046d .LASF27
     /tmp/ccernRxu.s:1665   .debug_str:0000000000000201 .LASF28
     /tmp/ccernRxu.s:1705   .debug_str:00000000000003ae .LASF29
     /tmp/ccernRxu.s:1737   .debug_str:0000000000000505 .LASF30
     /tmp/ccernRxu.s:1619   .debug_str:0000000000000095 .LASF31
     /tmp/ccernRxu.s:1657   .debug_str:00000000000001b8 .LASF32
     /tmp/ccernRxu.s:1749   .debug_str:0000000000000544 .LASF33
     /tmp/ccernRxu.s:1755   .debug_str:000000000000056c .LASF34
     /tmp/ccernRxu.s:1605   .debug_str:0000000000000000 .LASF35
     /tmp/ccernRxu.s:1617   .debug_str:000000000000008e .LASF36
     /tmp/ccernRxu.s:1703   .debug_str:000000000000039b .LASF37
     /tmp/ccernRxu.s:1745   .debug_str:000000000000052e .LASF38
     /tmp/ccernRxu.s:1709   .debug_str:00000000000003d2 .LASF39
     /tmp/ccernRxu.s:1621   .debug_str:00000000000000a9 .LASF40
     /tmp/ccernRxu.s:1743   .debug_str:000000000000051c .LASF41
     /tmp/ccernRxu.s:1733   .debug_str:00000000000004e2 .LASF42
     /tmp/ccernRxu.s:1693   .debug_str:000000000000035f .LASF43
     /tmp/ccernRxu.s:1631   .debug_str:00000000000000ec .LASF44
     /tmp/ccernRxu.s:1673   .debug_str:0000000000000234 .LASF45
     /tmp/ccernRxu.s:1687   .debug_str:000000000000034b .LASF46
     /tmp/ccernRxu.s:1715   .debug_str:0000000000000406 .LASF47
     /tmp/ccernRxu.s:1741   .debug_str:0000000000000512 .LASF48
     /tmp/ccernRxu.s:1723   .debug_str:0000000000000457 .LASF49
     /tmp/ccernRxu.s:1653   .debug_str:0000000000000195 .LASF50
     /tmp/ccernRxu.s:1721   .debug_str:0000000000000435 .LASF52
GAS LISTING /tmp/ccernRxu.s 			page 14


     /tmp/ccernRxu.s:1757   .debug_str:0000000000000573 .LASF51
     /tmp/ccernRxu.s:1731   .debug_str:00000000000004c6 .LASF53
     /tmp/ccernRxu.s:1611   .debug_str:0000000000000047 .LASF55
     /tmp/ccernRxu.s:1713   .debug_str:00000000000003fa .LASF56
     /tmp/ccernRxu.s:1727   .debug_str:0000000000000481 .LASF57
     /tmp/ccernRxu.s:1753   .debug_str:0000000000000562 .LASF58
     /tmp/ccernRxu.s:1607   .debug_str:0000000000000013 .LASF60
     /tmp/ccernRxu.s:1719   .debug_str:000000000000042c .LASF59
     /tmp/ccernRxu.s:1729   .debug_str:00000000000004a5 .LASF61
     /tmp/ccernRxu.s:1659   .debug_str:00000000000001c0 .LASF63
     /tmp/ccernRxu.s:1751   .debug_str:0000000000000558 .LASF62
     /tmp/ccernRxu.s:1651   .debug_str:0000000000000179 .LASF64
     /tmp/ccernRxu.s:1675   .debug_str:000000000000024c .LASF75
     /tmp/ccernRxu.s:135    .text:0000000000000070 .LFB22
     /tmp/ccernRxu.s:277    .text:00000000000000f8 .LFE22
     /tmp/ccernRxu.s:1641   .debug_str:0000000000000128 .LASF65
     /tmp/ccernRxu.s:1551   .debug_loc:0000000000000000 .LLST2
     /tmp/ccernRxu.s:196    .text:00000000000000b8 .LBB20
     /tmp/ccernRxu.s:270    .text:00000000000000f4 .LBE20
     /tmp/ccernRxu.s:1739   .debug_str:000000000000050d .LASF66
     /tmp/ccernRxu.s:1701   .debug_str:0000000000000393 .LASF67
     /tmp/ccernRxu.s:203    .text:00000000000000c8 .LBB21
     /tmp/ccernRxu.s:218    .text:00000000000000d4 .LBE21
     /tmp/ccernRxu.s:223    .text:00000000000000d8 .LBB23
     /tmp/ccernRxu.s:239    .text:00000000000000e4 .LBE23
     /tmp/ccernRxu.s:245    .text:00000000000000ec .LBB25
     /tmp/ccernRxu.s:256    .text:00000000000000f0 .LBE25
     /tmp/ccernRxu.s:1558   .debug_loc:0000000000000023 .LLST3
     /tmp/ccernRxu.s:258    .text:00000000000000f0 .LBB27
     /tmp/ccernRxu.s:269    .text:00000000000000f4 .LBE27
     /tmp/ccernRxu.s:1565   .debug_loc:0000000000000046 .LLST4
     /tmp/ccernRxu.s:201    .text:00000000000000c8 .LVL9
     /tmp/ccernRxu.s:243    .text:00000000000000ec .LVL12
     /tmp/ccernRxu.s:151    .text:0000000000000088 .LBB17
     /tmp/ccernRxu.s:168    .text:0000000000000094 .LBE17
     /tmp/ccernRxu.s:95     .text:0000000000000050 .LFB21
     /tmp/ccernRxu.s:124    .text:0000000000000070 .LFE21
     /tmp/ccernRxu.s:15     .text:0000000000000000 .LFB20
     /tmp/ccernRxu.s:89     .text:0000000000000050 .LFE20
     /tmp/ccernRxu.s:1681   .debug_str:0000000000000334 .LASF68
     /tmp/ccernRxu.s:1572   .debug_loc:0000000000000069 .LLST0
     /tmp/ccernRxu.s:1689   .debug_str:0000000000000355 .LASF69
     /tmp/ccernRxu.s:1583   .debug_loc:000000000000009f .LLST1
     /tmp/ccernRxu.s:63     .text:000000000000003c .LBB15
     /tmp/ccernRxu.s:84     .text:000000000000004c .LBE15
     /tmp/ccernRxu.s:75     .text:0000000000000048 .LVL5
     /tmp/ccernRxu.s:31     .text:0000000000000020 .LVL0
     /tmp/ccernRxu.s:1623   .debug_str:00000000000000af .LASF76
     /tmp/ccernRxu.s:1671   .debug_str:0000000000000228 .LASF77
     /tmp/ccernRxu.s:166    .text:0000000000000094 .LVL7
     /tmp/ccernRxu.s:173    .text:0000000000000098 .LVL8
     /tmp/ccernRxu.s:253    .text:00000000000000f0 .LVL13
     /tmp/ccernRxu.s:266    .text:00000000000000f4 .LVL14
     /tmp/ccernRxu.s:40     .text:0000000000000024 .LVL1
     /tmp/ccernRxu.s:46     .text:000000000000002c .LVL2
     /tmp/ccernRxu.s:59     .text:000000000000003c .LVL3
     /tmp/ccernRxu.s:70     .text:0000000000000040 .LVL4
GAS LISTING /tmp/ccernRxu.s 			page 15


     /tmp/ccernRxu.s:284    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z11printStringPKc
_ZN15MemoryAllocator9mem_allocEm
