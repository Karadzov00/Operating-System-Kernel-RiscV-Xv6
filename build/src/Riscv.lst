GAS LISTING /tmp/cc8jdKZI.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv14syscallHandlerEv
   9              	_ZN5Riscv14syscallHandlerEv:
  10              	.LFB21:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 6/17/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** 
   8:src/Riscv.cpp **** void Riscv::handleSupervisorTrap(){
   9:src/Riscv.cpp ****     uint scause = r_scause();
  10:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL ){
  11:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8)
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp ****         uint64  sepc = r_sepc() + 4;
  14:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
  15:src/Riscv.cpp **** 
  16:src/Riscv.cpp ****         //jump to syscall handler
  17:src/Riscv.cpp ****         syscallHandler();
  18:src/Riscv.cpp **** 
  19:src/Riscv.cpp ****         w_sstatus(sstatus);
  20:src/Riscv.cpp ****         w_sepc(sepc);
  21:src/Riscv.cpp ****     }
  22:src/Riscv.cpp ****     else if(scause == 0x0000000000000009UL){
  23:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from S-mode(9)
  24:src/Riscv.cpp ****         uint64  sepc = r_sepc() + 4;
  25:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
  26:src/Riscv.cpp **** 
  27:src/Riscv.cpp ****         w_sstatus(sstatus);
  28:src/Riscv.cpp ****         w_sepc(sepc);
  29:src/Riscv.cpp ****     }
  30:src/Riscv.cpp ****     else if (scause == 0x8000000000000001UL){
  31:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  32:src/Riscv.cpp **** 
  33:src/Riscv.cpp ****     }
  34:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  35:src/Riscv.cpp ****     {
  36:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  37:src/Riscv.cpp **** 
  38:src/Riscv.cpp ****     }
  39:src/Riscv.cpp ****     else{
  40:src/Riscv.cpp ****         // unexpected trap cause
  41:src/Riscv.cpp ****         //print(scause)
  42:src/Riscv.cpp ****         //print(sepc)
  43:src/Riscv.cpp ****         //print(stval) //trap value
  44:src/Riscv.cpp **** 
  45:src/Riscv.cpp ****     }
  46:src/Riscv.cpp **** 
  47:src/Riscv.cpp **** }
GAS LISTING /tmp/cc8jdKZI.s 			page 2


  48:src/Riscv.cpp **** 
  49:src/Riscv.cpp **** void Riscv::syscallHandler() {
  12              		.loc 1 49 30
  13              		.cfi_startproc
  50:src/Riscv.cpp ****     //read syscall code from register a0
  51:src/Riscv.cpp **** 
  52:src/Riscv.cpp ****     uint64 arg0;
  14              		.loc 1 52 5
  53:src/Riscv.cpp ****     uint64 arg1;
  15              		.loc 1 53 5
  54:src/Riscv.cpp **** //    uint64 arg2;
  55:src/Riscv.cpp **** //    uint64 arg3;
  56:src/Riscv.cpp **** //    uint64 arg4;
  57:src/Riscv.cpp **** //    uint64 arg5;
  58:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (arg0));    //read system call code
  16              		.loc 1 58 5
  17              		.loc 1 58 48 is_stmt 0
  18              	#APP
  19              	# 58 "src/Riscv.cpp" 1
  59              	    if(arg0== 0x01 ){
  20              		mv a4, a0
  21              	# 0 "" 2
  22              	.LVL0:
  23              		.loc 1 59 5 is_stmt 1
  24              	#NO_APP
  25              	.LBB24:
  26 0004 93071000 		li	a5,1
  27 0008 6304F700 		beq	a4,a5,.L7
  28 000c 67800000 		ret
  29              	.L7:
  30              	.LBE24:
  49:src/Riscv.cpp ****     //read syscall code from register a0
  31              		.loc 1 49 30 is_stmt 0
  32 0010 130101FF 		addi	sp,sp,-16
  33              		.cfi_def_cfa_offset 16
  34 0014 23341100 		sd	ra,8(sp)
  35 0018 23308100 		sd	s0,0(sp)
  36              		.cfi_offset 1, -8
  37              		.cfi_offset 8, -16
  38 001c 13040101 		addi	s0,sp,16
  39              		.cfi_def_cfa 8, 0
  40              	.LBB26:
  41              	.LBB25:
  60:src/Riscv.cpp ****         //mem_alloc
  61:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read size from a1 and move it to arg1 loc
  42              		.loc 1 61 9 is_stmt 1
  43              		.loc 1 61 52 is_stmt 0
  44              	#APP
  45              	# 61 "src/Riscv.cpp" 1
  62              	        uint64 ptr= (uint64)MemoryAllocator::mem_alloc(arg1);
  46              		mv a0, a1
  47              	# 0 "" 2
  48              	.LVL1:
  49              		.loc 1 62 9 is_stmt 1
  50              		.loc 1 62 55 is_stmt 0
  51              	#NO_APP
  52 0024 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
GAS LISTING /tmp/cc8jdKZI.s 			page 3


  52      E7800000 
  53              	.LVL2:
  63:src/Riscv.cpp **** 
  64:src/Riscv.cpp ****         //write return value to a0 register
  65:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r" (ptr));
  54              		.loc 1 65 9 is_stmt 1
  55              		.loc 1 65 47 is_stmt 0
  56              	#APP
  57              	# 65 "src/Riscv.cpp" 1
  66              	    }
  58              		mv a5, a0
  59              	# 0 "" 2
  60              	.LVL3:
  61              	#NO_APP
  62              	.LBE25:
  63              	.LBE26:
  67:src/Riscv.cpp **** 
  68:src/Riscv.cpp **** }
  64              		.loc 1 68 1
  65 0030 83308100 		ld	ra,8(sp)
  66              		.cfi_restore 1
  67 0034 03340100 		ld	s0,0(sp)
  68              		.cfi_restore 8
  69              		.cfi_def_cfa 2, 16
  70 0038 13010101 		addi	sp,sp,16
  71              		.cfi_def_cfa_offset 0
  72 003c 67800000 		jr	ra
  73              		.cfi_endproc
  74              	.LFE21:
  76              		.align	2
  77              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  79              	_ZN5Riscv20handleSupervisorTrapEv:
  80              	.LFB20:
   8:src/Riscv.cpp ****     uint scause = r_scause();
  81              		.loc 1 8 35 is_stmt 1
  82              		.cfi_startproc
  83 0040 130101FB 		addi	sp,sp,-80
  84              		.cfi_def_cfa_offset 80
  85 0044 23341104 		sd	ra,72(sp)
  86 0048 23308104 		sd	s0,64(sp)
  87 004c 233C9102 		sd	s1,56(sp)
  88 0050 23382103 		sd	s2,48(sp)
  89              		.cfi_offset 1, -8
  90              		.cfi_offset 8, -16
  91              		.cfi_offset 9, -24
  92              		.cfi_offset 18, -32
  93 0054 13040105 		addi	s0,sp,80
  94              		.cfi_def_cfa 8, 0
   9:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL ){
  95              		.loc 1 9 5
  96              	.LBB27:
  97              	.LBB28:
  98              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cc8jdKZI.s 			page 4


   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
GAS LISTING /tmp/cc8jdKZI.s 			page 5


  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     //static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
  99              		.loc 2 94 5
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 100              		.loc 2 95 5
 101              		.loc 2 95 72 is_stmt 0
 102              	#APP
 103              	# 95 "src/../h/Riscv.hpp" 1
  96              	    return scause;
 104              		csrr a5, scause
 105              	# 0 "" 2
 106              	#NO_APP
 107 005c 233CF4FA 		sd	a5,-72(s0)
 108              		.loc 2 96 5 is_stmt 1
 109              		.loc 2 96 12 is_stmt 0
 110 0060 833784FB 		ld	a5,-72(s0)
 111              	.LBE28:
 112              	.LBE27:
   9:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL ){
 113              		.loc 1 9 28
 114 0064 9B870700 		sext.w	a5,a5
 115              	.LVL4:
  10:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8)
 116              		.loc 1 10 5 is_stmt 1
 117              	.LBB29:
 118 0068 13078000 		li	a4,8
GAS LISTING /tmp/cc8jdKZI.s 			page 6


 119 006c 6382E702 		beq	a5,a4,.L12
 120              	.LBE29:
  22:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from S-mode(9)
 121              		.loc 1 22 10
 122              	.LBB50:
 123              	.LBB30:
 124 0070 13079000 		li	a4,9
 125 0074 6386E704 		beq	a5,a4,.L13
 126              	.LVL5:
 127              	.L8:
 128              	.LBE30:
 129              	.LBE50:
  47:src/Riscv.cpp **** 
 130              		.loc 1 47 1 is_stmt 0
 131 0078 83308104 		ld	ra,72(sp)
 132              		.cfi_remember_state
 133              		.cfi_restore 1
 134 007c 03340104 		ld	s0,64(sp)
 135              		.cfi_restore 8
 136              		.cfi_def_cfa 2, 80
 137 0080 83348103 		ld	s1,56(sp)
 138              		.cfi_restore 9
 139 0084 03390103 		ld	s2,48(sp)
 140              		.cfi_restore 18
 141 0088 13010105 		addi	sp,sp,80
 142              		.cfi_def_cfa_offset 0
 143 008c 67800000 		jr	ra
 144              	.LVL6:
 145              	.L12:
 146              		.cfi_restore_state
 147              	.LBB51:
 148              	.LBB40:
  13:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
 149              		.loc 1 13 9 is_stmt 1
 150              	.LBB41:
 151              	.LBB42:
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 152              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 153              		.loc 2 107 5
 154              		.loc 2 107 64 is_stmt 0
 155              	#APP
 156              	# 107 "src/../h/Riscv.hpp" 1
 108              	    return sepc;
 157              		csrr a5, sepc
 158              	# 0 "" 2
 159              	.LVL7:
 160              	#NO_APP
GAS LISTING /tmp/cc8jdKZI.s 			page 7


 161 0094 2334F4FC 		sd	a5,-56(s0)
 162              		.loc 2 108 5 is_stmt 1
 163              		.loc 2 108 12 is_stmt 0
 164 0098 833484FC 		ld	s1,-56(s0)
 165              	.LBE42:
 166              	.LBE41:
  13:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
 167              		.loc 1 13 35
 168 009c 93844400 		addi	s1,s1,4
 169              	.LVL8:
  14:src/Riscv.cpp **** 
 170              		.loc 1 14 9 is_stmt 1
 171              	.LBB43:
 172              	.LBB44:
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/Riscv.hpp ****     return stvec;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/Riscv.hpp **** {
 125:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     uint64 volatile stval;
 131:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/Riscv.hpp ****     return stval;
 133:src/../h/Riscv.hpp **** }
 134:src/../h/Riscv.hpp **** 
 135:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/Riscv.hpp **** {
 137:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/Riscv.hpp **** {
GAS LISTING /tmp/cc8jdKZI.s 			page 8


 152:src/../h/Riscv.hpp ****     uint64 volatile sip;
 153:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/Riscv.hpp ****     return sip;
 155:src/../h/Riscv.hpp **** }
 156:src/../h/Riscv.hpp **** 
 157:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/Riscv.hpp **** {
 159:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 163:src/../h/Riscv.hpp **** {
 164:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 165:src/../h/Riscv.hpp **** }
 166:src/../h/Riscv.hpp **** 
 167:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 168:src/../h/Riscv.hpp **** {
 169:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 170:src/../h/Riscv.hpp **** }
 171:src/../h/Riscv.hpp **** 
 172:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 173:src/../h/Riscv.hpp **** {
 174:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 173              		.loc 2 174 5
 175:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 174              		.loc 2 175 5
 175              		.loc 2 175 76 is_stmt 0
 176              	#APP
 177              	# 175 "src/../h/Riscv.hpp" 1
 176              	    return sstatus;
 178              		csrr a5, sstatus
 179              	# 0 "" 2
 180              	#NO_APP
 181 00a4 2330F4FC 		sd	a5,-64(s0)
 182              		.loc 2 176 5 is_stmt 1
 183              		.loc 2 176 12 is_stmt 0
 184 00a8 033904FC 		ld	s2,-64(s0)
 185              	.LVL9:
 186              	.LBE44:
 187              	.LBE43:
  17:src/Riscv.cpp **** 
 188              		.loc 1 17 9 is_stmt 1
  17:src/Riscv.cpp **** 
 189              		.loc 1 17 23 is_stmt 0
 190 00ac 97000000 		call	_ZN5Riscv14syscallHandlerEv
 190      E7800000 
 191              	.LVL10:
  19:src/Riscv.cpp ****         w_sepc(sepc);
 192              		.loc 1 19 9 is_stmt 1
 193              	.LBB45:
 194              	.LBB46:
 177:src/../h/Riscv.hpp **** }
 178:src/../h/Riscv.hpp **** 
 179:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 180:src/../h/Riscv.hpp **** {
 181:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 195              		.loc 2 181 5
GAS LISTING /tmp/cc8jdKZI.s 			page 9


 196              		.loc 2 181 77 is_stmt 0
 197              	#APP
 198              	# 181 "src/../h/Riscv.hpp" 1
 182              	}
 199              		csrw sstatus, s2
 200              	# 0 "" 2
 201              	.LVL11:
 202              	#NO_APP
 203              	.LBE46:
 204              	.LBE45:
  20:src/Riscv.cpp ****     }
 205              		.loc 1 20 9 is_stmt 1
 206              	.LBB47:
 207              	.LBB48:
 113:src/../h/Riscv.hpp **** }
 208              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 209              		.loc 2 113 65 is_stmt 0
 210              	#APP
 211              	# 113 "src/../h/Riscv.hpp" 1
 114:src/../h/Riscv.hpp **** 
 212              		csrw sepc, s1
 213              	# 0 "" 2
 214              		.loc 2 114 1
 215              	#NO_APP
 216 00bc 6FF0DFFB 		j	.L8
 217              	.LVL12:
 218              	.L13:
 219              	.LBE48:
 220              	.LBE47:
 221              	.LBE40:
 222              	.LBB49:
 223              	.LBB31:
  24:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
 224              		.loc 1 24 9 is_stmt 1
 225              	.LBB32:
 226              	.LBB33:
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 227              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     return sepc;
 228              		.loc 2 107 5
 107:src/../h/Riscv.hpp ****     return sepc;
 229              		.loc 2 107 64 is_stmt 0
 230              	#APP
 231              	# 107 "src/../h/Riscv.hpp" 1
 232              		csrr a5, sepc
 233              	# 0 "" 2
 234              	.LVL13:
 235              	#NO_APP
 236 00c4 233CF4FC 		sd	a5,-40(s0)
 108:src/../h/Riscv.hpp **** }
 237              		.loc 2 108 5 is_stmt 1
 108:src/../h/Riscv.hpp **** }
 238              		.loc 2 108 12 is_stmt 0
 239 00c8 833784FD 		ld	a5,-40(s0)
 240              	.LBE33:
 241              	.LBE32:
GAS LISTING /tmp/cc8jdKZI.s 			page 10


  24:src/Riscv.cpp ****         uint64  sstatus = r_sstatus();
 242              		.loc 1 24 35
 243 00cc 93874700 		addi	a5,a5,4
 244              	.LVL14:
  25:src/Riscv.cpp **** 
 245              		.loc 1 25 9 is_stmt 1
 246              	.LBB34:
 247              	.LBB35:
 174:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 248              		.loc 2 174 5
 175:src/../h/Riscv.hpp ****     return sstatus;
 249              		.loc 2 175 5
 175:src/../h/Riscv.hpp ****     return sstatus;
 250              		.loc 2 175 76 is_stmt 0
 251              	#APP
 252              	# 175 "src/../h/Riscv.hpp" 1
 253              		csrr a4, sstatus
 254              	# 0 "" 2
 255              	#NO_APP
 256 00d4 2338E4FC 		sd	a4,-48(s0)
 176:src/../h/Riscv.hpp **** }
 257              		.loc 2 176 5 is_stmt 1
 176:src/../h/Riscv.hpp **** }
 258              		.loc 2 176 12 is_stmt 0
 259 00d8 033704FD 		ld	a4,-48(s0)
 260              	.LVL15:
 261              	.LBE35:
 262              	.LBE34:
  27:src/Riscv.cpp ****         w_sepc(sepc);
 263              		.loc 1 27 9 is_stmt 1
 264              	.LBB36:
 265              	.LBB37:
 181:src/../h/Riscv.hpp **** }
 266              		.loc 2 181 5
 181:src/../h/Riscv.hpp **** }
 267              		.loc 2 181 77 is_stmt 0
 268              	#APP
 269              	# 181 "src/../h/Riscv.hpp" 1
 270              		csrw sstatus, a4
 271              	# 0 "" 2
 272              	.LVL16:
 273              	#NO_APP
 274              	.LBE37:
 275              	.LBE36:
  28:src/Riscv.cpp ****     }
 276              		.loc 1 28 9 is_stmt 1
 277              	.LBB38:
 278              	.LBB39:
 113:src/../h/Riscv.hpp **** }
 279              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 280              		.loc 2 113 65 is_stmt 0
 281              	#APP
 282              	# 113 "src/../h/Riscv.hpp" 1
 283              		csrw sepc, a5
 284              	# 0 "" 2
 285              	.LVL17:
GAS LISTING /tmp/cc8jdKZI.s 			page 11


 286              	#NO_APP
 287              	.LBE39:
 288              	.LBE38:
 289              	.LBE31:
  30:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 290              		.loc 1 30 10 is_stmt 1
  34:src/Riscv.cpp ****     {
 291              		.loc 1 34 10
 292              	.LBE49:
 293              	.LBE51:
  47:src/Riscv.cpp **** 
 294              		.loc 1 47 1 is_stmt 0
 295 00e4 6FF05FF9 		j	.L8
 296              		.cfi_endproc
 297              	.LFE20:
 299              		.align	2
 300              		.globl	_ZN5Riscv10popSppSpieEv
 302              	_ZN5Riscv10popSppSpieEv:
 303              	.LFB22:
  69:src/Riscv.cpp **** 
  70:src/Riscv.cpp **** void Riscv::popSppSpie()
  71:src/Riscv.cpp **** {
 304              		.loc 1 71 1 is_stmt 1
 305              		.cfi_startproc
 306 00e8 130101FF 		addi	sp,sp,-16
 307              		.cfi_def_cfa_offset 16
 308 00ec 23348100 		sd	s0,8(sp)
 309              		.cfi_offset 8, -8
 310 00f0 13040101 		addi	s0,sp,16
 311              		.cfi_def_cfa 8, 0
  72:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
 312              		.loc 1 72 5
 313              		.loc 1 72 39 is_stmt 0
 314              	#APP
 315              	# 72 "src/Riscv.cpp" 1
  73              	    __asm__ volatile ("sret");
 316              		csrw sepc, ra
 317              	# 0 "" 2
 318              		.loc 1 73 5 is_stmt 1
 319              		.loc 1 73 30 is_stmt 0
 320              	# 73 "src/Riscv.cpp" 1
  74              	}...
 321              		sret
 322              	# 0 "" 2
 323              		.loc 1 74 1
 324              	#NO_APP
 325 00fc 03348100 		ld	s0,8(sp)
 326              		.cfi_restore 8
 327              		.cfi_def_cfa 2, 16
 328 0100 13010101 		addi	sp,sp,16
 329              		.cfi_def_cfa_offset 0
 330 0104 67800000 		jr	ra
 331              		.cfi_endproc
 332              	.LFE22:
 334              	.Letext0:
 335              		.file 3 "src/../h/../lib/hw.h"
 336              		.file 4 "src/../h/MemoryAllocator.hpp"
GAS LISTING /tmp/cc8jdKZI.s 			page 12


GAS LISTING /tmp/cc8jdKZI.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/cc8jdKZI.s:9      .text:0000000000000000 _ZN5Riscv14syscallHandlerEv
     /tmp/cc8jdKZI.s:13     .text:0000000000000000 .L0 
     /tmp/cc8jdKZI.s:14     .text:0000000000000000 .L0 
     /tmp/cc8jdKZI.s:15     .text:0000000000000000 .L0 
     /tmp/cc8jdKZI.s:16     .text:0000000000000000 .L0 
     /tmp/cc8jdKZI.s:17     .text:0000000000000000 .L0 
       src/Riscv.cpp:58     .text:0000000000000000 .L0 
     /tmp/cc8jdKZI.s:26     .text:0000000000000004 .L0 
     /tmp/cc8jdKZI.s:32     .text:0000000000000010 .L0 
     /tmp/cc8jdKZI.s:33     .text:0000000000000014 .L0 
     /tmp/cc8jdKZI.s:36     .text:000000000000001c .L0 
     /tmp/cc8jdKZI.s:37     .text:000000000000001c .L0 
     /tmp/cc8jdKZI.s:39     .text:0000000000000020 .L0 
     /tmp/cc8jdKZI.s:43     .text:0000000000000020 .L0 
       src/Riscv.cpp:61     .text:0000000000000020 .L0 
     /tmp/cc8jdKZI.s:50     .text:0000000000000024 .L0 
     /tmp/cc8jdKZI.s:52     .text:0000000000000024 .L0 
     /tmp/cc8jdKZI.s:55     .text:000000000000002c .L0 
       src/Riscv.cpp:65     .text:000000000000002c .L0 
     /tmp/cc8jdKZI.s:65     .text:0000000000000030 .L0 
     /tmp/cc8jdKZI.s:66     .text:0000000000000034 .L0 
     /tmp/cc8jdKZI.s:68     .text:0000000000000038 .L0 
     /tmp/cc8jdKZI.s:69     .text:0000000000000038 .L0 
     /tmp/cc8jdKZI.s:71     .text:000000000000003c .L0 
     /tmp/cc8jdKZI.s:73     .text:0000000000000040 .L0 
     /tmp/cc8jdKZI.s:79     .text:0000000000000040 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cc8jdKZI.s:82     .text:0000000000000040 .L0 
     /tmp/cc8jdKZI.s:83     .text:0000000000000040 .L0 
     /tmp/cc8jdKZI.s:84     .text:0000000000000044 .L0 
     /tmp/cc8jdKZI.s:89     .text:0000000000000054 .L0 
     /tmp/cc8jdKZI.s:90     .text:0000000000000054 .L0 
     /tmp/cc8jdKZI.s:91     .text:0000000000000054 .L0 
     /tmp/cc8jdKZI.s:92     .text:0000000000000054 .L0 
     /tmp/cc8jdKZI.s:94     .text:0000000000000058 .L0 
     /tmp/cc8jdKZI.s:99     .text:0000000000000058 .L0 
     /tmp/cc8jdKZI.s:100    .text:0000000000000058 .L0 
     /tmp/cc8jdKZI.s:101    .text:0000000000000058 .L0 
  src/../h/Riscv.hpp:95     .text:0000000000000058 .L0 
     /tmp/cc8jdKZI.s:109    .text:0000000000000060 .L0 
     /tmp/cc8jdKZI.s:110    .text:0000000000000060 .L0 
     /tmp/cc8jdKZI.s:114    .text:0000000000000064 .L0 
     /tmp/cc8jdKZI.s:118    .text:0000000000000068 .L0 
     /tmp/cc8jdKZI.s:124    .text:0000000000000070 .L0 
     /tmp/cc8jdKZI.s:131    .text:0000000000000078 .L0 
     /tmp/cc8jdKZI.s:132    .text:000000000000007c .L0 
     /tmp/cc8jdKZI.s:133    .text:000000000000007c .L0 
     /tmp/cc8jdKZI.s:135    .text:0000000000000080 .L0 
     /tmp/cc8jdKZI.s:136    .text:0000000000000080 .L0 
     /tmp/cc8jdKZI.s:138    .text:0000000000000084 .L0 
     /tmp/cc8jdKZI.s:140    .text:0000000000000088 .L0 
     /tmp/cc8jdKZI.s:142    .text:000000000000008c .L0 
     /tmp/cc8jdKZI.s:146    .text:0000000000000090 .L0 
     /tmp/cc8jdKZI.s:152    .text:0000000000000090 .L0 
     /tmp/cc8jdKZI.s:153    .text:0000000000000090 .L0 
     /tmp/cc8jdKZI.s:154    .text:0000000000000090 .L0 
GAS LISTING /tmp/cc8jdKZI.s 			page 14


  src/../h/Riscv.hpp:107    .text:0000000000000090 .L0 
     /tmp/cc8jdKZI.s:163    .text:0000000000000098 .L0 
     /tmp/cc8jdKZI.s:164    .text:0000000000000098 .L0 
     /tmp/cc8jdKZI.s:168    .text:000000000000009c .L0 
     /tmp/cc8jdKZI.s:173    .text:00000000000000a0 .L0 
     /tmp/cc8jdKZI.s:174    .text:00000000000000a0 .L0 
     /tmp/cc8jdKZI.s:175    .text:00000000000000a0 .L0 
  src/../h/Riscv.hpp:175    .text:00000000000000a0 .L0 
     /tmp/cc8jdKZI.s:183    .text:00000000000000a8 .L0 
     /tmp/cc8jdKZI.s:184    .text:00000000000000a8 .L0 
     /tmp/cc8jdKZI.s:189    .text:00000000000000ac .L0 
     /tmp/cc8jdKZI.s:190    .text:00000000000000ac .L0 
     /tmp/cc8jdKZI.s:195    .text:00000000000000b4 .L0 
     /tmp/cc8jdKZI.s:196    .text:00000000000000b4 .L0 
  src/../h/Riscv.hpp:181    .text:00000000000000b4 .L0 
     /tmp/cc8jdKZI.s:208    .text:00000000000000b8 .L0 
     /tmp/cc8jdKZI.s:209    .text:00000000000000b8 .L0 
  src/../h/Riscv.hpp:113    .text:00000000000000b8 .L0 
     /tmp/cc8jdKZI.s:216    .text:00000000000000bc .L0 
     /tmp/cc8jdKZI.s:227    .text:00000000000000c0 .L0 
     /tmp/cc8jdKZI.s:228    .text:00000000000000c0 .L0 
     /tmp/cc8jdKZI.s:229    .text:00000000000000c0 .L0 
  src/../h/Riscv.hpp:107    .text:00000000000000c0 .L0 
     /tmp/cc8jdKZI.s:238    .text:00000000000000c8 .L0 
     /tmp/cc8jdKZI.s:239    .text:00000000000000c8 .L0 
     /tmp/cc8jdKZI.s:243    .text:00000000000000cc .L0 
     /tmp/cc8jdKZI.s:248    .text:00000000000000d0 .L0 
     /tmp/cc8jdKZI.s:249    .text:00000000000000d0 .L0 
     /tmp/cc8jdKZI.s:250    .text:00000000000000d0 .L0 
  src/../h/Riscv.hpp:175    .text:00000000000000d0 .L0 
     /tmp/cc8jdKZI.s:258    .text:00000000000000d8 .L0 
     /tmp/cc8jdKZI.s:259    .text:00000000000000d8 .L0 
     /tmp/cc8jdKZI.s:266    .text:00000000000000dc .L0 
     /tmp/cc8jdKZI.s:267    .text:00000000000000dc .L0 
  src/../h/Riscv.hpp:181    .text:00000000000000dc .L0 
     /tmp/cc8jdKZI.s:279    .text:00000000000000e0 .L0 
     /tmp/cc8jdKZI.s:280    .text:00000000000000e0 .L0 
  src/../h/Riscv.hpp:113    .text:00000000000000e0 .L0 
     /tmp/cc8jdKZI.s:291    .text:00000000000000e4 .L0 
     /tmp/cc8jdKZI.s:294    .text:00000000000000e4 .L0 
     /tmp/cc8jdKZI.s:295    .text:00000000000000e4 .L0 
     /tmp/cc8jdKZI.s:296    .text:00000000000000e8 .L0 
     /tmp/cc8jdKZI.s:302    .text:00000000000000e8 _ZN5Riscv10popSppSpieEv
     /tmp/cc8jdKZI.s:305    .text:00000000000000e8 .L0 
     /tmp/cc8jdKZI.s:306    .text:00000000000000e8 .L0 
     /tmp/cc8jdKZI.s:307    .text:00000000000000ec .L0 
     /tmp/cc8jdKZI.s:309    .text:00000000000000f0 .L0 
     /tmp/cc8jdKZI.s:311    .text:00000000000000f4 .L0 
     /tmp/cc8jdKZI.s:313    .text:00000000000000f4 .L0 
       src/Riscv.cpp:72     .text:00000000000000f4 .L0 
     /tmp/cc8jdKZI.s:319    .text:00000000000000f8 .L0 
       src/Riscv.cpp:73     .text:00000000000000f8 .L0 
     /tmp/cc8jdKZI.s:325    .text:00000000000000fc .L0 
     /tmp/cc8jdKZI.s:326    .text:0000000000000100 .L0 
     /tmp/cc8jdKZI.s:327    .text:0000000000000100 .L0 
     /tmp/cc8jdKZI.s:329    .text:0000000000000104 .L0 
     /tmp/cc8jdKZI.s:331    .text:0000000000000108 .L0 
GAS LISTING /tmp/cc8jdKZI.s 			page 15


     /tmp/cc8jdKZI.s:337    .text:0000000000000108 .L0 
     /tmp/cc8jdKZI.s:29     .text:0000000000000010 .L7
     /tmp/cc8jdKZI.s:145    .text:0000000000000090 .L12
     /tmp/cc8jdKZI.s:218    .text:00000000000000c0 .L13
     /tmp/cc8jdKZI.s:127    .text:0000000000000078 .L8
     /tmp/cc8jdKZI.s:1037   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc8jdKZI.s:1776   .debug_str:0000000000000251 .LASF70
     /tmp/cc8jdKZI.s:1738   .debug_str:0000000000000107 .LASF71
     /tmp/cc8jdKZI.s:1716   .debug_str:000000000000005e .LASF72
     /tmp/cc8jdKZI.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc8jdKZI.s:334    .text:0000000000000108 .Letext0
     /tmp/cc8jdKZI.s:1704   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc8jdKZI.s:1788   .debug_str:000000000000033b .LASF3
     /tmp/cc8jdKZI.s:1792   .debug_str:0000000000000358 .LASF0
     /tmp/cc8jdKZI.s:1766   .debug_str:00000000000001f6 .LASF1
     /tmp/cc8jdKZI.s:1754   .debug_str:0000000000000197 .LASF2
     /tmp/cc8jdKZI.s:1726   .debug_str:00000000000000bd .LASF4
     /tmp/cc8jdKZI.s:1762   .debug_str:00000000000001dc .LASF5
     /tmp/cc8jdKZI.s:1714   .debug_str:0000000000000057 .LASF6
     /tmp/cc8jdKZI.s:1710   .debug_str:0000000000000034 .LASF7
     /tmp/cc8jdKZI.s:1744   .debug_str:0000000000000131 .LASF8
     /tmp/cc8jdKZI.s:1804   .debug_str:00000000000003a3 .LASF9
     /tmp/cc8jdKZI.s:1724   .debug_str:00000000000000af .LASF10
     /tmp/cc8jdKZI.s:1856   .debug_str:0000000000000563 .LASF11
     /tmp/cc8jdKZI.s:1748   .debug_str:0000000000000157 .LASF12
     /tmp/cc8jdKZI.s:1844   .debug_str:0000000000000515 .LASF13
     /tmp/cc8jdKZI.s:1814   .debug_str:00000000000003fd .LASF14
     /tmp/cc8jdKZI.s:1768   .debug_str:0000000000000209 .LASF15
     /tmp/cc8jdKZI.s:1734   .debug_str:00000000000000eb .LASF16
     /tmp/cc8jdKZI.s:1808   .debug_str:00000000000003c5 .LASF17
     /tmp/cc8jdKZI.s:1736   .debug_str:0000000000000101 .LASF54
     /tmp/cc8jdKZI.s:1774   .debug_str:0000000000000246 .LASF73
     /tmp/cc8jdKZI.s:1832   .debug_str:00000000000004ce .LASF74
     /tmp/cc8jdKZI.s:1780   .debug_str:000000000000031a .LASF18
     /tmp/cc8jdKZI.s:1742   .debug_str:000000000000011c .LASF20
     /tmp/cc8jdKZI.s:1782   .debug_str:0000000000000323 .LASF22
     /tmp/cc8jdKZI.s:1728   .debug_str:00000000000000c4 .LASF24
     /tmp/cc8jdKZI.s:1796   .debug_str:000000000000036d .LASF19
     /tmp/cc8jdKZI.s:1760   .debug_str:00000000000001c9 .LASF21
     /tmp/cc8jdKZI.s:1732   .debug_str:00000000000000e4 .LASF23
     /tmp/cc8jdKZI.s:1746   .debug_str:0000000000000144 .LASF25
     /tmp/cc8jdKZI.s:1794   .debug_str:0000000000000365 .LASF26
     /tmp/cc8jdKZI.s:1822   .debug_str:000000000000044e .LASF27
     /tmp/cc8jdKZI.s:1764   .debug_str:00000000000001ee .LASF28
     /tmp/cc8jdKZI.s:1802   .debug_str:000000000000038f .LASF29
     /tmp/cc8jdKZI.s:1834   .debug_str:00000000000004e6 .LASF30
     /tmp/cc8jdKZI.s:1720   .debug_str:0000000000000095 .LASF31
     /tmp/cc8jdKZI.s:1756   .debug_str:00000000000001a5 .LASF32
     /tmp/cc8jdKZI.s:1846   .debug_str:0000000000000525 .LASF33
     /tmp/cc8jdKZI.s:1852   .debug_str:000000000000054d .LASF34
     /tmp/cc8jdKZI.s:1706   .debug_str:0000000000000000 .LASF35
     /tmp/cc8jdKZI.s:1718   .debug_str:000000000000008e .LASF36
     /tmp/cc8jdKZI.s:1800   .debug_str:000000000000037c .LASF37
     /tmp/cc8jdKZI.s:1842   .debug_str:000000000000050f .LASF38
     /tmp/cc8jdKZI.s:1806   .debug_str:00000000000003b3 .LASF39
     /tmp/cc8jdKZI.s:1722   .debug_str:00000000000000a9 .LASF40
     /tmp/cc8jdKZI.s:1840   .debug_str:00000000000004fd .LASF41
GAS LISTING /tmp/cc8jdKZI.s 			page 16


     /tmp/cc8jdKZI.s:1830   .debug_str:00000000000004c3 .LASF42
     /tmp/cc8jdKZI.s:1790   .debug_str:0000000000000340 .LASF43
     /tmp/cc8jdKZI.s:1730   .debug_str:00000000000000d9 .LASF44
     /tmp/cc8jdKZI.s:1770   .debug_str:0000000000000215 .LASF45
     /tmp/cc8jdKZI.s:1784   .debug_str:000000000000032c .LASF46
     /tmp/cc8jdKZI.s:1812   .debug_str:00000000000003e7 .LASF47
     /tmp/cc8jdKZI.s:1838   .debug_str:00000000000004f3 .LASF48
     /tmp/cc8jdKZI.s:1820   .debug_str:0000000000000438 .LASF49
     /tmp/cc8jdKZI.s:1752   .debug_str:0000000000000182 .LASF50
     /tmp/cc8jdKZI.s:1818   .debug_str:0000000000000416 .LASF52
     /tmp/cc8jdKZI.s:1854   .debug_str:0000000000000554 .LASF51
     /tmp/cc8jdKZI.s:1828   .debug_str:00000000000004a7 .LASF53
     /tmp/cc8jdKZI.s:1712   .debug_str:0000000000000047 .LASF55
     /tmp/cc8jdKZI.s:1810   .debug_str:00000000000003db .LASF56
     /tmp/cc8jdKZI.s:1824   .debug_str:0000000000000462 .LASF57
     /tmp/cc8jdKZI.s:1850   .debug_str:0000000000000543 .LASF58
     /tmp/cc8jdKZI.s:1708   .debug_str:0000000000000013 .LASF60
     /tmp/cc8jdKZI.s:1816   .debug_str:000000000000040d .LASF59
     /tmp/cc8jdKZI.s:1826   .debug_str:0000000000000486 .LASF61
     /tmp/cc8jdKZI.s:1758   .debug_str:00000000000001ad .LASF63
     /tmp/cc8jdKZI.s:1848   .debug_str:0000000000000539 .LASF62
     /tmp/cc8jdKZI.s:1750   .debug_str:0000000000000166 .LASF64
     /tmp/cc8jdKZI.s:1772   .debug_str:000000000000022d .LASF75
     /tmp/cc8jdKZI.s:303    .text:00000000000000e8 .LFB22
     /tmp/cc8jdKZI.s:332    .text:0000000000000108 .LFE22
     /tmp/cc8jdKZI.s:10     .text:0000000000000000 .LFB21
     /tmp/cc8jdKZI.s:74     .text:0000000000000040 .LFE21
     /tmp/cc8jdKZI.s:1778   .debug_str:0000000000000315 .LASF65
     /tmp/cc8jdKZI.s:1620   .debug_loc:0000000000000000 .LLST0
     /tmp/cc8jdKZI.s:1786   .debug_str:0000000000000336 .LASF66
     /tmp/cc8jdKZI.s:1627   .debug_loc:0000000000000023 .LLST1
     /tmp/cc8jdKZI.s:41     .text:0000000000000020 .LBB25
     /tmp/cc8jdKZI.s:62     .text:0000000000000030 .LBE25
     /tmp/cc8jdKZI.s:53     .text:000000000000002c .LVL2
     /tmp/cc8jdKZI.s:80     .text:0000000000000040 .LFB20
     /tmp/cc8jdKZI.s:297    .text:00000000000000e8 .LFE20
     /tmp/cc8jdKZI.s:1740   .debug_str:0000000000000115 .LASF67
     /tmp/cc8jdKZI.s:1634   .debug_loc:0000000000000046 .LLST2
     /tmp/cc8jdKZI.s:148    .text:0000000000000090 .LBB40
     /tmp/cc8jdKZI.s:221    .text:00000000000000c0 .LBE40
     /tmp/cc8jdKZI.s:1836   .debug_str:00000000000004ee .LASF68
     /tmp/cc8jdKZI.s:1649   .debug_loc:000000000000008f .LLST5
     /tmp/cc8jdKZI.s:1798   .debug_str:0000000000000374 .LASF69
     /tmp/cc8jdKZI.s:1656   .debug_loc:00000000000000b2 .LLST6
     /tmp/cc8jdKZI.s:150    .text:0000000000000090 .LBB41
     /tmp/cc8jdKZI.s:166    .text:000000000000009c .LBE41
     /tmp/cc8jdKZI.s:171    .text:00000000000000a0 .LBB43
     /tmp/cc8jdKZI.s:187    .text:00000000000000ac .LBE43
     /tmp/cc8jdKZI.s:193    .text:00000000000000b4 .LBB45
     /tmp/cc8jdKZI.s:204    .text:00000000000000b8 .LBE45
     /tmp/cc8jdKZI.s:1663   .debug_loc:00000000000000d5 .LLST7
     /tmp/cc8jdKZI.s:206    .text:00000000000000b8 .LBB47
     /tmp/cc8jdKZI.s:220    .text:00000000000000c0 .LBE47
     /tmp/cc8jdKZI.s:1670   .debug_loc:00000000000000f8 .LLST8
     /tmp/cc8jdKZI.s:191    .text:00000000000000b4 .LVL10
     /tmp/cc8jdKZI.s:223    .text:00000000000000c0 .LBB31
     /tmp/cc8jdKZI.s:289    .text:00000000000000e4 .LBE31
GAS LISTING /tmp/cc8jdKZI.s 			page 17


     /tmp/cc8jdKZI.s:225    .text:00000000000000c0 .LBB32
     /tmp/cc8jdKZI.s:241    .text:00000000000000cc .LBE32
     /tmp/cc8jdKZI.s:246    .text:00000000000000d0 .LBB34
     /tmp/cc8jdKZI.s:262    .text:00000000000000dc .LBE34
     /tmp/cc8jdKZI.s:264    .text:00000000000000dc .LBB36
     /tmp/cc8jdKZI.s:275    .text:00000000000000e0 .LBE36
     /tmp/cc8jdKZI.s:1677   .debug_loc:000000000000011b .LLST3
     /tmp/cc8jdKZI.s:277    .text:00000000000000e0 .LBB38
     /tmp/cc8jdKZI.s:288    .text:00000000000000e4 .LBE38
     /tmp/cc8jdKZI.s:1684   .debug_loc:000000000000013e .LLST4
     /tmp/cc8jdKZI.s:96     .text:0000000000000058 .LBB27
     /tmp/cc8jdKZI.s:112    .text:0000000000000064 .LBE27
     /tmp/cc8jdKZI.s:22     .text:0000000000000004 .LVL0
     /tmp/cc8jdKZI.s:48     .text:0000000000000024 .LVL1
     /tmp/cc8jdKZI.s:115    .text:0000000000000068 .LVL4
     /tmp/cc8jdKZI.s:126    .text:0000000000000078 .LVL5
     /tmp/cc8jdKZI.s:144    .text:0000000000000090 .LVL6
     /tmp/cc8jdKZI.s:159    .text:0000000000000094 .LVL7
     /tmp/cc8jdKZI.s:217    .text:00000000000000c0 .LVL12
     /tmp/cc8jdKZI.s:234    .text:00000000000000c4 .LVL13
     /tmp/cc8jdKZI.s:169    .text:00000000000000a0 .LVL8
     /tmp/cc8jdKZI.s:185    .text:00000000000000ac .LVL9
     /tmp/cc8jdKZI.s:201    .text:00000000000000b8 .LVL11
     /tmp/cc8jdKZI.s:260    .text:00000000000000dc .LVL15
     /tmp/cc8jdKZI.s:272    .text:00000000000000e0 .LVL16
     /tmp/cc8jdKZI.s:285    .text:00000000000000e4 .LVL17
     /tmp/cc8jdKZI.s:338    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN15MemoryAllocator9mem_allocEm
