GAS LISTING /tmp/ccZWNgLu.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv14syscallHandlerEv
   9              	_ZN5Riscv14syscallHandlerEv:
  10              	.LFB42:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 6/17/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** #include "../h/_thread.hpp"
   8:src/Riscv.cpp **** 
   9:src/Riscv.cpp **** 
  10:src/Riscv.cpp **** void Riscv::syscallHandler() {
  12              		.loc 1 10 30
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  11:src/Riscv.cpp ****     //read syscall code from register a0
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp ****     uint64 arg0;
  22              		.loc 1 13 5
  14:src/Riscv.cpp ****     uint64 arg1;
  23              		.loc 1 14 5
  15:src/Riscv.cpp **** 
  16:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (arg0));    //read system call code
  24              		.loc 1 16 5
  25              		.loc 1 16 48 is_stmt 0
  26              	#APP
  27              	# 16 "src/Riscv.cpp" 1
  17              	    if(arg0== 0x01 ){
  28              		mv a5, a0
  29              	# 0 "" 2
  30              	.LVL0:
  31              		.loc 1 17 5 is_stmt 1
  32              	#NO_APP
  33              	.LBB34:
  34 0014 13071000 		li	a4,1
  35 0018 6386E702 		beq	a5,a4,.L7
  36              	.LBE34:
  18:src/Riscv.cpp ****         //kmem_alloc
  19:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read size from a1 and move it to arg1 loc
  20:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  21:src/Riscv.cpp **** 
  22:src/Riscv.cpp ****         //write return value to a0 register
GAS LISTING /tmp/ccZWNgLu.s 			page 2


  23:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ptr));
  24:src/Riscv.cpp ****     }
  25:src/Riscv.cpp ****     else if(arg0==0x02){
  37              		.loc 1 25 10
  38              	.LBB39:
  39              	.LBB35:
  40 001c 13072000 		li	a4,2
  41 0020 638CE702 		beq	a5,a4,.L8
  26:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read pointer to free from a1 and move it 
  27:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  28:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
  29:src/Riscv.cpp ****     }
  30:src/Riscv.cpp **** 
  31:src/Riscv.cpp ****     else if(arg0==0x12){
  42              		.loc 1 31 10
  43 0024 13072001 		li	a4,18
  44 0028 6382E704 		beq	a5,a4,.L9
  32:src/Riscv.cpp ****         _thread::running->finished=true;
  33:src/Riscv.cpp ****         _thread::dispatch();
  34:src/Riscv.cpp **** 
  35:src/Riscv.cpp **** 
  36:src/Riscv.cpp ****     }
  37:src/Riscv.cpp ****     else if(arg0 == 0x13){
  45              		.loc 1 37 10
  46 002c 13073001 		li	a4,19
  47 0030 638EE704 		beq	a5,a4,.L10
  48              	.LVL1:
  49              	.L1:
  50              	.LBE35:
  51              	.LBE39:
  38:src/Riscv.cpp ****         _thread::dispatch();
  39:src/Riscv.cpp **** 
  40:src/Riscv.cpp ****     }
  41:src/Riscv.cpp **** 
  42:src/Riscv.cpp **** }
  52              		.loc 1 42 1 is_stmt 0
  53 0034 83308100 		ld	ra,8(sp)
  54              		.cfi_remember_state
  55              		.cfi_restore 1
  56 0038 03340100 		ld	s0,0(sp)
  57              		.cfi_restore 8
  58              		.cfi_def_cfa 2, 16
  59 003c 13010101 		addi	sp,sp,16
  60              		.cfi_def_cfa_offset 0
  61 0040 67800000 		jr	ra
  62              	.LVL2:
  63              	.L7:
  64              		.cfi_restore_state
  65              	.LBB40:
  66              	.LBB37:
  19:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  67              		.loc 1 19 9 is_stmt 1
  19:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  68              		.loc 1 19 52 is_stmt 0
  69              	#APP
  70              	# 19 "src/Riscv.cpp" 1
  71              		mv a0, a1
GAS LISTING /tmp/ccZWNgLu.s 			page 3


  72              	# 0 "" 2
  73              	.LVL3:
  20:src/Riscv.cpp **** 
  74              		.loc 1 20 9 is_stmt 1
  20:src/Riscv.cpp **** 
  75              		.loc 1 20 57 is_stmt 0
  76              	#NO_APP
  77 0048 97000000 		call	_ZN15MemoryAllocator10kmem_allocEm@plt
  77      E7800000 
  78              	.LVL4:
  23:src/Riscv.cpp ****     }
  79              		.loc 1 23 9 is_stmt 1
  23:src/Riscv.cpp ****     }
  80              		.loc 1 23 52 is_stmt 0
  81              	#APP
  82              	# 23 "src/Riscv.cpp" 1
  83              		mv a0, a0
  84              	# 0 "" 2
  85              	#NO_APP
  86              	.LBE37:
  87 0054 6FF01FFE 		j	.L1
  88              	.LVL5:
  89              	.L8:
  90              	.LBB38:
  91              	.LBB36:
  26:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  92              		.loc 1 26 9 is_stmt 1
  26:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  93              		.loc 1 26 52 is_stmt 0
  94              	#APP
  95              	# 26 "src/Riscv.cpp" 1
  96              		mv a0, a1
  97              	# 0 "" 2
  98              	.LVL6:
  27:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
  99              		.loc 1 27 9 is_stmt 1
  27:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
 100              		.loc 1 27 45 is_stmt 0
 101              	#NO_APP
 102 005c 97000000 		call	_ZN15MemoryAllocator9kmem_freeEPv@plt
 102      E7800000 
 103              	.LVL7:
  28:src/Riscv.cpp ****     }
 104              		.loc 1 28 9 is_stmt 1
  28:src/Riscv.cpp ****     }
 105              		.loc 1 28 52 is_stmt 0
 106              	#APP
 107              	# 28 "src/Riscv.cpp" 1
 108              		mv a0, a0
 109              	# 0 "" 2
 110              	#NO_APP
 111              	.LBE36:
 112 0068 6FF0DFFC 		j	.L1
 113              	.LVL8:
 114              	.L9:
  32:src/Riscv.cpp ****         _thread::dispatch();
 115              		.loc 1 32 9 is_stmt 1
GAS LISTING /tmp/ccZWNgLu.s 			page 4


  32:src/Riscv.cpp ****         _thread::dispatch();
 116              		.loc 1 32 27 is_stmt 0
 117 006c 97070000 		la	a5,_ZN7_thread7runningE
 117      83B70700 
 118              	.LVL9:
 119 0074 83B70700 		ld	a5,0(a5)
  32:src/Riscv.cpp ****         _thread::dispatch();
 120              		.loc 1 32 35
 121 0078 13071000 		li	a4,1
 122 007c 2384E702 		sb	a4,40(a5)
  33:src/Riscv.cpp **** 
 123              		.loc 1 33 9 is_stmt 1
  33:src/Riscv.cpp **** 
 124              		.loc 1 33 26 is_stmt 0
 125 0080 97000000 		call	_ZN7_thread8dispatchEv@plt
 125      E7800000 
 126              	.LVL10:
 127 0088 6FF0DFFA 		j	.L1
 128              	.LVL11:
 129              	.L10:
  38:src/Riscv.cpp **** 
 130              		.loc 1 38 9 is_stmt 1
  38:src/Riscv.cpp **** 
 131              		.loc 1 38 26 is_stmt 0
 132 008c 97000000 		call	_ZN7_thread8dispatchEv@plt
 132      E7800000 
 133              	.LVL12:
 134              	.LBE38:
 135              	.LBE40:
 136              		.loc 1 42 1
 137 0094 6FF01FFA 		j	.L1
 138              		.cfi_endproc
 139              	.LFE42:
 141              		.align	2
 142              		.globl	_ZN5Riscv10popSppSpieEv
 144              	_ZN5Riscv10popSppSpieEv:
 145              	.LFB43:
  43:src/Riscv.cpp **** 
  44:src/Riscv.cpp **** void Riscv::popSppSpie()    //pop supervisor previous privilege, supervisor previous interrupt enab
  45:src/Riscv.cpp **** {
 146              		.loc 1 45 1 is_stmt 1
 147              		.cfi_startproc
 148 0098 130101FF 		addi	sp,sp,-16
 149              		.cfi_def_cfa_offset 16
 150 009c 23348100 		sd	s0,8(sp)
 151              		.cfi_offset 8, -8
 152 00a0 13040101 		addi	s0,sp,16
 153              		.cfi_def_cfa 8, 0
  46:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
 154              		.loc 1 46 5
 155              		.loc 1 46 39 is_stmt 0
 156              	#APP
 157              	# 46 "src/Riscv.cpp" 1
  47              	    __asm__ volatile ("sret");  //exit privileged regime
 158              		csrw sepc, ra
 159              	# 0 "" 2
 160              		.loc 1 47 5 is_stmt 1
GAS LISTING /tmp/ccZWNgLu.s 			page 5


 161              		.loc 1 47 30 is_stmt 0
 162              	# 47 "src/Riscv.cpp" 1
  48              	}
 163              		sret
 164              	# 0 "" 2
 165              		.loc 1 48 1
 166              	#NO_APP
 167 00ac 03348100 		ld	s0,8(sp)
 168              		.cfi_restore 8
 169              		.cfi_def_cfa 2, 16
 170 00b0 13010101 		addi	sp,sp,16
 171              		.cfi_def_cfa_offset 0
 172 00b4 67800000 		jr	ra
 173              		.cfi_endproc
 174              	.LFE43:
 176              		.align	2
 177              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 179              	_ZN5Riscv20handleSupervisorTrapEv:
 180              	.LFB44:
  49:src/Riscv.cpp **** 
  50:src/Riscv.cpp **** void Riscv::handleSupervisorTrap(){
 181              		.loc 1 50 35 is_stmt 1
 182              		.cfi_startproc
 183 00b8 130101F9 		addi	sp,sp,-112
 184              		.cfi_def_cfa_offset 112
 185 00bc 23341106 		sd	ra,104(sp)
 186 00c0 23308106 		sd	s0,96(sp)
 187 00c4 233C9104 		sd	s1,88(sp)
 188 00c8 23382105 		sd	s2,80(sp)
 189 00cc 23343105 		sd	s3,72(sp)
 190              		.cfi_offset 1, -8
 191              		.cfi_offset 8, -16
 192              		.cfi_offset 9, -24
 193              		.cfi_offset 18, -32
 194              		.cfi_offset 19, -40
 195 00d0 13040107 		addi	s0,sp,112
 196              		.cfi_def_cfa 8, 0
  51:src/Riscv.cpp ****     uint scause = r_scause();
 197              		.loc 1 51 5
 198              	.LBB41:
 199              	.LBB42:
 200              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
GAS LISTING /tmp/ccZWNgLu.s 			page 6


  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
GAS LISTING /tmp/ccZWNgLu.s 			page 7


  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
 201              		.loc 2 94 5
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 202              		.loc 2 95 5
 203              		.loc 2 95 72 is_stmt 0
 204              	#APP
 205              	# 95 "src/../h/Riscv.hpp" 1
  96              	    return scause;
 206              		csrr a5, scause
 207              	# 0 "" 2
 208              	#NO_APP
 209 00d8 233CF4F8 		sd	a5,-104(s0)
 210              		.loc 2 96 5 is_stmt 1
 211              		.loc 2 96 12 is_stmt 0
 212 00dc 833784F9 		ld	a5,-104(s0)
 213              	.LBE42:
 214              	.LBE41:
 215              		.loc 1 51 28
 216 00e0 9B870700 		sext.w	a5,a5
 217              	.LVL13:
  52:src/Riscv.cpp ****     uint64 a0reg;
 218              		.loc 1 52 5 is_stmt 1
  53:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (a0reg));
 219              		.loc 1 53 5
 220              		.loc 1 53 49 is_stmt 0
 221              	#APP
 222              	# 53 "src/Riscv.cpp" 1
  54              	
 223              		mv a3, a0
 224              	# 0 "" 2
 225              	.LVL14:
  55:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL || scause==0x0000000000000009UL){
 226              		.loc 1 55 5 is_stmt 1
 227              	#NO_APP
 228              	.LBB43:
 229              		.loc 1 55 40 is_stmt 0
GAS LISTING /tmp/ccZWNgLu.s 			page 8


 230 00e8 9B8787FF 		addiw	a5,a5,-8
 231              	.LVL15:
 232              		.loc 1 55 5
 233 00ec 13071000 		li	a4,1
 234 00f0 6370F702 		bleu	a5,a4,.L20
 235              	.LVL16:
 236              	.L13:
 237              	.LBE43:
  56:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  57:src/Riscv.cpp **** 
  58:src/Riscv.cpp ****         //call from yield
  59:src/Riscv.cpp ****         if(a0reg==0x04){
  60:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
  61:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
  62:src/Riscv.cpp **** 
  63:src/Riscv.cpp ****             _thread::timeSliceCounter = 0;
  64:src/Riscv.cpp ****             _thread::dispatch();
  65:src/Riscv.cpp **** 
  66:src/Riscv.cpp ****             w_sstatus(sstatus);
  67:src/Riscv.cpp ****             w_sepc(sepc);
  68:src/Riscv.cpp ****         }
  69:src/Riscv.cpp ****         else if(a0reg==0x11){
  70:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
  71:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
  72:src/Riscv.cpp **** 
  73:src/Riscv.cpp **** 
  74:src/Riscv.cpp ****             _thread::thread_t *arg1;
  75:src/Riscv.cpp ****             _thread::Body arg2;
  76:src/Riscv.cpp ****             uint64 arg3;
  77:src/Riscv.cpp ****             uint64 *arg4;
  78:src/Riscv.cpp **** 
  79:src/Riscv.cpp ****             __asm__ volatile("ld a1, 11*8(fp)"); //a1
  80:src/Riscv.cpp ****             __asm__ volatile("ld a2, 12*8(fp)"); //a2
  81:src/Riscv.cpp ****             __asm__ volatile("ld a3, 13*8(fp)"); //a3
  82:src/Riscv.cpp ****             __asm__ volatile("ld a4, 14*8(fp)"); //a4
  83:src/Riscv.cpp **** 
  84:src/Riscv.cpp **** 
  85:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (arg1));    //handle (thread_t*)
  86:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (arg2));    //start routine
  87:src/Riscv.cpp ****             __asm__ volatile("mv %0, a3" : "=r" (arg3));    //argument of start routine
  88:src/Riscv.cpp ****             __asm__ volatile("mv %0, a4" : "=r" (arg4));    //stack
  89:src/Riscv.cpp **** 
  90:src/Riscv.cpp ****             //make new thread object using overloaded new operator for that function
  91:src/Riscv.cpp ****             _thread* t = _thread::createThread(arg2,  (void*)arg3);    //t je thread_t
  92:src/Riscv.cpp ****             *arg1=t;
  93:src/Riscv.cpp **** 
  94:src/Riscv.cpp ****             uint64 ret;
  95:src/Riscv.cpp ****             if(t!= nullptr)ret=0;
  96:src/Riscv.cpp ****             else ret =-1;
  97:src/Riscv.cpp **** 
  98:src/Riscv.cpp **** 
  99:src/Riscv.cpp ****             //return _thread* adress through a0
 100:src/Riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (ret));
 101:src/Riscv.cpp **** 
 102:src/Riscv.cpp ****             w_sstatus(sstatus);
 103:src/Riscv.cpp ****             w_sepc(sepc);
 104:src/Riscv.cpp ****         }
GAS LISTING /tmp/ccZWNgLu.s 			page 9


 105:src/Riscv.cpp ****         else {
 106:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 107:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 108:src/Riscv.cpp **** 
 109:src/Riscv.cpp ****             //jump to syscall handler
 110:src/Riscv.cpp ****             syscallHandler();
 111:src/Riscv.cpp **** 
 112:src/Riscv.cpp ****             w_sstatus(sstatus);
 113:src/Riscv.cpp ****             w_sepc(sepc);
 114:src/Riscv.cpp ****         }
 115:src/Riscv.cpp **** 
 116:src/Riscv.cpp **** 
 117:src/Riscv.cpp **** 
 118:src/Riscv.cpp ****     }
 119:src/Riscv.cpp ****     else if (scause == 0x8000000000000001UL){
 120:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 121:src/Riscv.cpp **** 
 122:src/Riscv.cpp ****     }
 123:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 124:src/Riscv.cpp ****     {
 125:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 126:src/Riscv.cpp **** 
 127:src/Riscv.cpp ****     }
 128:src/Riscv.cpp ****     else{
 129:src/Riscv.cpp ****         // unexpected trap cause
 130:src/Riscv.cpp ****         //print(scause)
 131:src/Riscv.cpp ****         //print(sepc)
 132:src/Riscv.cpp ****         //print(stval) //trap value
 133:src/Riscv.cpp **** 
 134:src/Riscv.cpp ****     }
 135:src/Riscv.cpp **** 
 136:src/Riscv.cpp **** }
 238              		.loc 1 136 1
 239 00f4 83308106 		ld	ra,104(sp)
 240              		.cfi_remember_state
 241              		.cfi_restore 1
 242 00f8 03340106 		ld	s0,96(sp)
 243              		.cfi_restore 8
 244              		.cfi_def_cfa 2, 112
 245 00fc 83348105 		ld	s1,88(sp)
 246              		.cfi_restore 9
 247 0100 03390105 		ld	s2,80(sp)
 248              		.cfi_restore 18
 249 0104 83398104 		ld	s3,72(sp)
 250              		.cfi_restore 19
 251 0108 13010107 		addi	sp,sp,112
 252              		.cfi_def_cfa_offset 0
 253 010c 67800000 		jr	ra
 254              	.LVL17:
 255              	.L20:
 256              		.cfi_restore_state
  59:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 257              		.loc 1 59 9 is_stmt 1
 258              	.LBB76:
 259              	.LBB44:
 260 0110 93074000 		li	a5,4
 261 0114 638EF602 		beq	a3,a5,.L21
GAS LISTING /tmp/ccZWNgLu.s 			page 10


 262              	.LBE44:
 263              	.LBE76:
  69:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 264              		.loc 1 69 14
 265              	.LBB77:
 266              	.LBB74:
 267              	.LBB45:
 268 0118 93071001 		li	a5,17
 269 011c 6388F606 		beq	a3,a5,.L22
 270              	.LBB46:
 106:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 271              		.loc 1 106 13
 272              	.LBB47:
 273              	.LBB48:
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 274              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 275              		.loc 2 107 5
 276              		.loc 2 107 64 is_stmt 0
 277              	#APP
 278              	# 107 "src/../h/Riscv.hpp" 1
 108              	    return sepc;
 279              		csrr a5, sepc
 280              	# 0 "" 2
 281              	#NO_APP
 282 0124 2334F4FC 		sd	a5,-56(s0)
 283              		.loc 2 108 5 is_stmt 1
 284              		.loc 2 108 12 is_stmt 0
 285 0128 833484FC 		ld	s1,-56(s0)
 286              	.LBE48:
 287              	.LBE47:
 106:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 288              		.loc 1 106 38
 289 012c 93844400 		addi	s1,s1,4
 290              	.LVL18:
 107:src/Riscv.cpp **** 
 291              		.loc 1 107 13 is_stmt 1
 292              	.LBB49:
 293              	.LBB50:
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/Riscv.hpp **** {
GAS LISTING /tmp/ccZWNgLu.s 			page 11


 118:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/Riscv.hpp ****     return stvec;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/Riscv.hpp **** {
 125:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     uint64 volatile stval;
 131:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/Riscv.hpp ****     return stval;
 133:src/../h/Riscv.hpp **** }
 134:src/../h/Riscv.hpp **** 
 135:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/Riscv.hpp **** {
 137:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/Riscv.hpp **** {
 152:src/../h/Riscv.hpp ****     uint64 volatile sip;
 153:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/Riscv.hpp ****     return sip;
 155:src/../h/Riscv.hpp **** }
 156:src/../h/Riscv.hpp **** 
 157:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/Riscv.hpp **** {
 159:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** //mask set
 163:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 164:src/../h/Riscv.hpp **** {
 165:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/Riscv.hpp **** }
 167:src/../h/Riscv.hpp **** 
 168:src/../h/Riscv.hpp **** //mask clear
 169:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 170:src/../h/Riscv.hpp **** {
 171:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/Riscv.hpp **** }
 173:src/../h/Riscv.hpp **** 
 174:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
GAS LISTING /tmp/ccZWNgLu.s 			page 12


 175:src/../h/Riscv.hpp **** {
 176:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 294              		.loc 2 176 5
 177:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 295              		.loc 2 177 5
 296              		.loc 2 177 76 is_stmt 0
 297              	#APP
 298              	# 177 "src/../h/Riscv.hpp" 1
 178              	    return sstatus;
 299              		csrr a5, sstatus
 300              	# 0 "" 2
 301              	#NO_APP
 302 0134 2330F4FC 		sd	a5,-64(s0)
 303              		.loc 2 178 5 is_stmt 1
 304              		.loc 2 178 12 is_stmt 0
 305 0138 033904FC 		ld	s2,-64(s0)
 306              	.LVL19:
 307              	.LBE50:
 308              	.LBE49:
 110:src/Riscv.cpp **** 
 309              		.loc 1 110 13 is_stmt 1
 110:src/Riscv.cpp **** 
 310              		.loc 1 110 27 is_stmt 0
 311 013c 97000000 		call	_ZN5Riscv14syscallHandlerEv
 311      E7800000 
 312              	.LVL20:
 112:src/Riscv.cpp ****             w_sepc(sepc);
 313              		.loc 1 112 13 is_stmt 1
 314              	.LBB51:
 315              	.LBB52:
 179:src/../h/Riscv.hpp **** }
 180:src/../h/Riscv.hpp **** 
 181:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 182:src/../h/Riscv.hpp **** {
 183:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 316              		.loc 2 183 5
 317              		.loc 2 183 77 is_stmt 0
 318              	#APP
 319              	# 183 "src/../h/Riscv.hpp" 1
 184              	}
 320              		csrw sstatus, s2
 321              	# 0 "" 2
 322              	.LVL21:
 323              	#NO_APP
 324              	.LBE52:
 325              	.LBE51:
 113:src/Riscv.cpp ****         }
 326              		.loc 1 113 13 is_stmt 1
 327              	.LBB53:
 328              	.LBB54:
 113:src/../h/Riscv.hpp **** }
 329              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 330              		.loc 2 113 65 is_stmt 0
 331              	#APP
 332              	# 113 "src/../h/Riscv.hpp" 1
 333              		csrw sepc, s1
GAS LISTING /tmp/ccZWNgLu.s 			page 13


 334              	# 0 "" 2
 335              	.LVL22:
 336              	#NO_APP
 337              	.LBE54:
 338              	.LBE53:
 339              	.LBE46:
 340              	.LBE45:
 341              	.LBE74:
 119:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 342              		.loc 1 119 10 is_stmt 1
 123:src/Riscv.cpp ****     {
 343              		.loc 1 123 10
 344              	.LBE77:
 345              		.loc 1 136 1 is_stmt 0
 346 014c 6FF09FFA 		j	.L13
 347              	.LVL23:
 348              	.L21:
 349              	.LBB78:
 350              	.LBB75:
 351              	.LBB64:
  60:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 352              		.loc 1 60 13 is_stmt 1
 353              	.LBB65:
 354              	.LBB66:
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 355              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     return sepc;
 356              		.loc 2 107 5
 107:src/../h/Riscv.hpp ****     return sepc;
 357              		.loc 2 107 64 is_stmt 0
 358              	#APP
 359              	# 107 "src/../h/Riscv.hpp" 1
 360              		csrr a5, sepc
 361              	# 0 "" 2
 362              	#NO_APP
 363 0154 2334F4FA 		sd	a5,-88(s0)
 108:src/../h/Riscv.hpp **** }
 364              		.loc 2 108 5 is_stmt 1
 108:src/../h/Riscv.hpp **** }
 365              		.loc 2 108 12 is_stmt 0
 366 0158 833484FA 		ld	s1,-88(s0)
 367              	.LBE66:
 368              	.LBE65:
  60:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 369              		.loc 1 60 38
 370 015c 93844400 		addi	s1,s1,4
 371              	.LVL24:
  61:src/Riscv.cpp **** 
 372              		.loc 1 61 13 is_stmt 1
 373              	.LBB67:
 374              	.LBB68:
 176:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 375              		.loc 2 176 5
 177:src/../h/Riscv.hpp ****     return sstatus;
 376              		.loc 2 177 5
 177:src/../h/Riscv.hpp ****     return sstatus;
 377              		.loc 2 177 76 is_stmt 0
GAS LISTING /tmp/ccZWNgLu.s 			page 14


 378              	#APP
 379              	# 177 "src/../h/Riscv.hpp" 1
 380              		csrr a5, sstatus
 381              	# 0 "" 2
 382              	#NO_APP
 383 0164 2330F4FA 		sd	a5,-96(s0)
 178:src/../h/Riscv.hpp **** }
 384              		.loc 2 178 5 is_stmt 1
 178:src/../h/Riscv.hpp **** }
 385              		.loc 2 178 12 is_stmt 0
 386 0168 033904FA 		ld	s2,-96(s0)
 387              	.LVL25:
 388              	.LBE68:
 389              	.LBE67:
  63:src/Riscv.cpp ****             _thread::dispatch();
 390              		.loc 1 63 13 is_stmt 1
  63:src/Riscv.cpp ****             _thread::dispatch();
 391              		.loc 1 63 39 is_stmt 0
 392 016c 97070000 		la	a5,_ZN7_thread16timeSliceCounterE
 392      83B70700 
 393 0174 23B00700 		sd	zero,0(a5)
  64:src/Riscv.cpp **** 
 394              		.loc 1 64 13 is_stmt 1
  64:src/Riscv.cpp **** 
 395              		.loc 1 64 30 is_stmt 0
 396 0178 97000000 		call	_ZN7_thread8dispatchEv@plt
 396      E7800000 
 397              	.LVL26:
  66:src/Riscv.cpp ****             w_sepc(sepc);
 398              		.loc 1 66 13 is_stmt 1
 399              	.LBB69:
 400              	.LBB70:
 183:src/../h/Riscv.hpp **** }
 401              		.loc 2 183 5
 183:src/../h/Riscv.hpp **** }
 402              		.loc 2 183 77 is_stmt 0
 403              	#APP
 404              	# 183 "src/../h/Riscv.hpp" 1
 405              		csrw sstatus, s2
 406              	# 0 "" 2
 407              	.LVL27:
 408              	#NO_APP
 409              	.LBE70:
 410              	.LBE69:
  67:src/Riscv.cpp ****         }
 411              		.loc 1 67 13 is_stmt 1
 412              	.LBB71:
 413              	.LBB72:
 113:src/../h/Riscv.hpp **** }
 414              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 415              		.loc 2 113 65 is_stmt 0
 416              	#APP
 417              	# 113 "src/../h/Riscv.hpp" 1
 114:src/../h/Riscv.hpp **** 
 418              		csrw sepc, s1
 419              	# 0 "" 2
GAS LISTING /tmp/ccZWNgLu.s 			page 15


 420              		.loc 2 114 1
 421              	#NO_APP
 422 0188 6FF0DFF6 		j	.L13
 423              	.LVL28:
 424              	.L22:
 425              	.LBE72:
 426              	.LBE71:
 427              	.LBE64:
 428              	.LBB73:
 429              	.LBB55:
  70:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 430              		.loc 1 70 13 is_stmt 1
 431              	.LBB56:
 432              	.LBB57:
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 433              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     return sepc;
 434              		.loc 2 107 5
 107:src/../h/Riscv.hpp ****     return sepc;
 435              		.loc 2 107 64 is_stmt 0
 436              	#APP
 437              	# 107 "src/../h/Riscv.hpp" 1
 438              		csrr a5, sepc
 439              	# 0 "" 2
 440              	#NO_APP
 441 0190 233CF4FA 		sd	a5,-72(s0)
 108:src/../h/Riscv.hpp **** }
 442              		.loc 2 108 5 is_stmt 1
 108:src/../h/Riscv.hpp **** }
 443              		.loc 2 108 12 is_stmt 0
 444 0194 833484FB 		ld	s1,-72(s0)
 445              	.LBE57:
 446              	.LBE56:
  70:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 447              		.loc 1 70 38
 448 0198 93844400 		addi	s1,s1,4
 449              	.LVL29:
  71:src/Riscv.cpp **** 
 450              		.loc 1 71 13 is_stmt 1
 451              	.LBB58:
 452              	.LBB59:
 176:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 453              		.loc 2 176 5
 177:src/../h/Riscv.hpp ****     return sstatus;
 454              		.loc 2 177 5
 177:src/../h/Riscv.hpp ****     return sstatus;
 455              		.loc 2 177 76 is_stmt 0
 456              	#APP
 457              	# 177 "src/../h/Riscv.hpp" 1
 458              		csrr a5, sstatus
 459              	# 0 "" 2
 460              	#NO_APP
 461 01a0 2338F4FA 		sd	a5,-80(s0)
 178:src/../h/Riscv.hpp **** }
 462              		.loc 2 178 5 is_stmt 1
 178:src/../h/Riscv.hpp **** }
 463              		.loc 2 178 12 is_stmt 0
GAS LISTING /tmp/ccZWNgLu.s 			page 16


 464 01a4 033904FB 		ld	s2,-80(s0)
 465              	.LVL30:
 466              	.LBE59:
 467              	.LBE58:
  74:src/Riscv.cpp ****             _thread::Body arg2;
 468              		.loc 1 74 13 is_stmt 1
  75:src/Riscv.cpp ****             uint64 arg3;
 469              		.loc 1 75 13
  76:src/Riscv.cpp ****             uint64 *arg4;
 470              		.loc 1 76 13
  77:src/Riscv.cpp **** 
 471              		.loc 1 77 13
  79:src/Riscv.cpp ****             __asm__ volatile("ld a2, 12*8(fp)"); //a2
 472              		.loc 1 79 13
  79:src/Riscv.cpp ****             __asm__ volatile("ld a2, 12*8(fp)"); //a2
 473              		.loc 1 79 48 is_stmt 0
 474              	#APP
 475              	# 79 "src/Riscv.cpp" 1
  80:src/Riscv.cpp ****             __asm__ volatile("ld a3, 13*8(fp)"); //a3
 476              		ld a1, 11*8(fp)
 477              	# 0 "" 2
 478              		.loc 1 80 13 is_stmt 1
  80:src/Riscv.cpp ****             __asm__ volatile("ld a3, 13*8(fp)"); //a3
 479              		.loc 1 80 48 is_stmt 0
 480              	# 80 "src/Riscv.cpp" 1
  81:src/Riscv.cpp ****             __asm__ volatile("ld a4, 14*8(fp)"); //a4
 481              		ld a2, 12*8(fp)
 482              	# 0 "" 2
 483              		.loc 1 81 13 is_stmt 1
  81:src/Riscv.cpp ****             __asm__ volatile("ld a4, 14*8(fp)"); //a4
 484              		.loc 1 81 48 is_stmt 0
 485              	# 81 "src/Riscv.cpp" 1
  82:src/Riscv.cpp **** 
 486              		ld a3, 13*8(fp)
 487              	# 0 "" 2
 488              		.loc 1 82 13 is_stmt 1
  82:src/Riscv.cpp **** 
 489              		.loc 1 82 48 is_stmt 0
 490              	# 82 "src/Riscv.cpp" 1
  85:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (arg2));    //start routine
 491              		ld a4, 14*8(fp)
 492              	# 0 "" 2
 493              		.loc 1 85 13 is_stmt 1
  85:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (arg2));    //start routine
 494              		.loc 1 85 56 is_stmt 0
 495              	# 85 "src/Riscv.cpp" 1
 496              		mv s3, a1
 497              	# 0 "" 2
 498              	.LVL31:
  86:src/Riscv.cpp ****             __asm__ volatile("mv %0, a3" : "=r" (arg3));    //argument of start routine
 499              		.loc 1 86 13 is_stmt 1
  86:src/Riscv.cpp ****             __asm__ volatile("mv %0, a3" : "=r" (arg3));    //argument of start routine
 500              		.loc 1 86 56 is_stmt 0
 501              	# 86 "src/Riscv.cpp" 1
 502              		mv a0, a2
 503              	# 0 "" 2
 504              	.LVL32:
GAS LISTING /tmp/ccZWNgLu.s 			page 17


  87:src/Riscv.cpp ****             __asm__ volatile("mv %0, a4" : "=r" (arg4));    //stack
 505              		.loc 1 87 13 is_stmt 1
  87:src/Riscv.cpp ****             __asm__ volatile("mv %0, a4" : "=r" (arg4));    //stack
 506              		.loc 1 87 56 is_stmt 0
 507              	# 87 "src/Riscv.cpp" 1
 508              		mv a1, a3
 509              	# 0 "" 2
 510              	.LVL33:
  88:src/Riscv.cpp **** 
 511              		.loc 1 88 13 is_stmt 1
  88:src/Riscv.cpp **** 
 512              		.loc 1 88 56 is_stmt 0
 513              	# 88 "src/Riscv.cpp" 1
 514              		mv a5, a4
 515              	# 0 "" 2
 516              	.LVL34:
  91:src/Riscv.cpp ****             *arg1=t;
 517              		.loc 1 91 13 is_stmt 1
  91:src/Riscv.cpp ****             *arg1=t;
 518              		.loc 1 91 47 is_stmt 0
 519              	#NO_APP
 520 01c8 97000000 		call	_ZN7_thread12createThreadEPFvPvES0_@plt
 520      E7800000 
 521              	.LVL35:
  92:src/Riscv.cpp **** 
 522              		.loc 1 92 13 is_stmt 1
  92:src/Riscv.cpp **** 
 523              		.loc 1 92 18 is_stmt 0
 524 01d0 23B0A900 		sd	a0,0(s3)
  94:src/Riscv.cpp ****             if(t!= nullptr)ret=0;
 525              		.loc 1 94 13 is_stmt 1
  95:src/Riscv.cpp ****             else ret =-1;
 526              		.loc 1 95 13
 527 01d4 630C0500 		beqz	a0,.L18
  95:src/Riscv.cpp ****             else ret =-1;
 528              		.loc 1 95 31 is_stmt 0
 529 01d8 93070000 		li	a5,0
 530              	.L17:
 531              	.LVL36:
 100:src/Riscv.cpp **** 
 532              		.loc 1 100 13 is_stmt 1
 100:src/Riscv.cpp **** 
 533              		.loc 1 100 56 is_stmt 0
 534              	#APP
 535              	# 100 "src/Riscv.cpp" 1
 102:src/Riscv.cpp ****             w_sepc(sepc);
 536              		mv a0, a5
 537              	# 0 "" 2
 538              		.loc 1 102 13 is_stmt 1
 539              	.LVL37:
 540              	#NO_APP
 541              	.LBB60:
 542              	.LBB61:
 183:src/../h/Riscv.hpp **** }
 543              		.loc 2 183 5
 183:src/../h/Riscv.hpp **** }
 544              		.loc 2 183 77 is_stmt 0
GAS LISTING /tmp/ccZWNgLu.s 			page 18


 545              	#APP
 546              	# 183 "src/../h/Riscv.hpp" 1
 547              		csrw sstatus, s2
 548              	# 0 "" 2
 549              	.LVL38:
 550              	#NO_APP
 551              	.LBE61:
 552              	.LBE60:
 103:src/Riscv.cpp ****         }
 553              		.loc 1 103 13 is_stmt 1
 554              	.LBB62:
 555              	.LBB63:
 113:src/../h/Riscv.hpp **** }
 556              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 557              		.loc 2 113 65 is_stmt 0
 558              	#APP
 559              	# 113 "src/../h/Riscv.hpp" 1
 114:src/../h/Riscv.hpp **** 
 560              		csrw sepc, s1
 561              	# 0 "" 2
 562              		.loc 2 114 1
 563              	#NO_APP
 564 01e8 6FF0DFF0 		j	.L13
 565              	.LVL39:
 566              	.L18:
 567              	.LBE63:
 568              	.LBE62:
  96:src/Riscv.cpp **** 
 569              		.loc 1 96 22
 570 01ec 9307F0FF 		li	a5,-1
 571 01f0 6FF0DFFE 		j	.L17
 572              	.LBE55:
 573              	.LBE73:
 574              	.LBE75:
 575              	.LBE78:
 576              		.cfi_endproc
 577              	.LFE44:
 579              	.Letext0:
 580              		.file 3 "src/../h/../lib/hw.h"
 581              		.file 4 "src/../h/MemoryAllocator.hpp"
 582              		.file 5 "src/../h/_thread.hpp"
GAS LISTING /tmp/ccZWNgLu.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccZWNgLu.s:9      .text:0000000000000000 _ZN5Riscv14syscallHandlerEv
     /tmp/ccZWNgLu.s:13     .text:0000000000000000 .L0 
     /tmp/ccZWNgLu.s:14     .text:0000000000000000 .L0 
     /tmp/ccZWNgLu.s:15     .text:0000000000000004 .L0 
     /tmp/ccZWNgLu.s:18     .text:000000000000000c .L0 
     /tmp/ccZWNgLu.s:19     .text:000000000000000c .L0 
     /tmp/ccZWNgLu.s:21     .text:0000000000000010 .L0 
     /tmp/ccZWNgLu.s:23     .text:0000000000000010 .L0 
     /tmp/ccZWNgLu.s:24     .text:0000000000000010 .L0 
     /tmp/ccZWNgLu.s:25     .text:0000000000000010 .L0 
       src/Riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccZWNgLu.s:34     .text:0000000000000014 .L0 
     /tmp/ccZWNgLu.s:40     .text:000000000000001c .L0 
     /tmp/ccZWNgLu.s:43     .text:0000000000000024 .L0 
     /tmp/ccZWNgLu.s:46     .text:000000000000002c .L0 
     /tmp/ccZWNgLu.s:53     .text:0000000000000034 .L0 
     /tmp/ccZWNgLu.s:54     .text:0000000000000038 .L0 
     /tmp/ccZWNgLu.s:55     .text:0000000000000038 .L0 
     /tmp/ccZWNgLu.s:57     .text:000000000000003c .L0 
     /tmp/ccZWNgLu.s:58     .text:000000000000003c .L0 
     /tmp/ccZWNgLu.s:60     .text:0000000000000040 .L0 
     /tmp/ccZWNgLu.s:64     .text:0000000000000044 .L0 
     /tmp/ccZWNgLu.s:68     .text:0000000000000044 .L0 
       src/Riscv.cpp:19     .text:0000000000000044 .L0 
     /tmp/ccZWNgLu.s:75     .text:0000000000000048 .L0 
     /tmp/ccZWNgLu.s:77     .text:0000000000000048 .L0 
     /tmp/ccZWNgLu.s:80     .text:0000000000000050 .L0 
       src/Riscv.cpp:23     .text:0000000000000050 .L0 
     /tmp/ccZWNgLu.s:93     .text:0000000000000058 .L0 
       src/Riscv.cpp:26     .text:0000000000000058 .L0 
     /tmp/ccZWNgLu.s:100    .text:000000000000005c .L0 
     /tmp/ccZWNgLu.s:102    .text:000000000000005c .L0 
     /tmp/ccZWNgLu.s:105    .text:0000000000000064 .L0 
       src/Riscv.cpp:28     .text:0000000000000064 .L0 
     /tmp/ccZWNgLu.s:116    .text:000000000000006c .L0 
     /tmp/ccZWNgLu.s:117    .text:000000000000006c .L0 
     /tmp/ccZWNgLu.s:121    .text:0000000000000078 .L0 
     /tmp/ccZWNgLu.s:124    .text:0000000000000080 .L0 
     /tmp/ccZWNgLu.s:125    .text:0000000000000080 .L0 
     /tmp/ccZWNgLu.s:131    .text:000000000000008c .L0 
     /tmp/ccZWNgLu.s:132    .text:000000000000008c .L0 
     /tmp/ccZWNgLu.s:137    .text:0000000000000094 .L0 
     /tmp/ccZWNgLu.s:138    .text:0000000000000098 .L0 
     /tmp/ccZWNgLu.s:144    .text:0000000000000098 _ZN5Riscv10popSppSpieEv
     /tmp/ccZWNgLu.s:147    .text:0000000000000098 .L0 
     /tmp/ccZWNgLu.s:148    .text:0000000000000098 .L0 
     /tmp/ccZWNgLu.s:149    .text:000000000000009c .L0 
     /tmp/ccZWNgLu.s:151    .text:00000000000000a0 .L0 
     /tmp/ccZWNgLu.s:153    .text:00000000000000a4 .L0 
     /tmp/ccZWNgLu.s:155    .text:00000000000000a4 .L0 
       src/Riscv.cpp:46     .text:00000000000000a4 .L0 
     /tmp/ccZWNgLu.s:161    .text:00000000000000a8 .L0 
       src/Riscv.cpp:47     .text:00000000000000a8 .L0 
     /tmp/ccZWNgLu.s:167    .text:00000000000000ac .L0 
     /tmp/ccZWNgLu.s:168    .text:00000000000000b0 .L0 
GAS LISTING /tmp/ccZWNgLu.s 			page 20


     /tmp/ccZWNgLu.s:169    .text:00000000000000b0 .L0 
     /tmp/ccZWNgLu.s:171    .text:00000000000000b4 .L0 
     /tmp/ccZWNgLu.s:173    .text:00000000000000b8 .L0 
     /tmp/ccZWNgLu.s:179    .text:00000000000000b8 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccZWNgLu.s:182    .text:00000000000000b8 .L0 
     /tmp/ccZWNgLu.s:183    .text:00000000000000b8 .L0 
     /tmp/ccZWNgLu.s:184    .text:00000000000000bc .L0 
     /tmp/ccZWNgLu.s:190    .text:00000000000000d0 .L0 
     /tmp/ccZWNgLu.s:191    .text:00000000000000d0 .L0 
     /tmp/ccZWNgLu.s:192    .text:00000000000000d0 .L0 
     /tmp/ccZWNgLu.s:193    .text:00000000000000d0 .L0 
     /tmp/ccZWNgLu.s:194    .text:00000000000000d0 .L0 
     /tmp/ccZWNgLu.s:196    .text:00000000000000d4 .L0 
     /tmp/ccZWNgLu.s:201    .text:00000000000000d4 .L0 
     /tmp/ccZWNgLu.s:202    .text:00000000000000d4 .L0 
     /tmp/ccZWNgLu.s:203    .text:00000000000000d4 .L0 
  src/../h/Riscv.hpp:95     .text:00000000000000d4 .L0 
     /tmp/ccZWNgLu.s:211    .text:00000000000000dc .L0 
     /tmp/ccZWNgLu.s:212    .text:00000000000000dc .L0 
     /tmp/ccZWNgLu.s:216    .text:00000000000000e0 .L0 
     /tmp/ccZWNgLu.s:219    .text:00000000000000e4 .L0 
     /tmp/ccZWNgLu.s:220    .text:00000000000000e4 .L0 
       src/Riscv.cpp:53     .text:00000000000000e4 .L0 
     /tmp/ccZWNgLu.s:229    .text:00000000000000e8 .L0 
     /tmp/ccZWNgLu.s:230    .text:00000000000000e8 .L0 
     /tmp/ccZWNgLu.s:233    .text:00000000000000ec .L0 
     /tmp/ccZWNgLu.s:239    .text:00000000000000f4 .L0 
     /tmp/ccZWNgLu.s:240    .text:00000000000000f8 .L0 
     /tmp/ccZWNgLu.s:241    .text:00000000000000f8 .L0 
     /tmp/ccZWNgLu.s:243    .text:00000000000000fc .L0 
     /tmp/ccZWNgLu.s:244    .text:00000000000000fc .L0 
     /tmp/ccZWNgLu.s:246    .text:0000000000000100 .L0 
     /tmp/ccZWNgLu.s:248    .text:0000000000000104 .L0 
     /tmp/ccZWNgLu.s:250    .text:0000000000000108 .L0 
     /tmp/ccZWNgLu.s:252    .text:000000000000010c .L0 
     /tmp/ccZWNgLu.s:256    .text:0000000000000110 .L0 
     /tmp/ccZWNgLu.s:260    .text:0000000000000110 .L0 
     /tmp/ccZWNgLu.s:268    .text:0000000000000118 .L0 
     /tmp/ccZWNgLu.s:274    .text:0000000000000120 .L0 
     /tmp/ccZWNgLu.s:275    .text:0000000000000120 .L0 
     /tmp/ccZWNgLu.s:276    .text:0000000000000120 .L0 
  src/../h/Riscv.hpp:107    .text:0000000000000120 .L0 
     /tmp/ccZWNgLu.s:284    .text:0000000000000128 .L0 
     /tmp/ccZWNgLu.s:285    .text:0000000000000128 .L0 
     /tmp/ccZWNgLu.s:289    .text:000000000000012c .L0 
     /tmp/ccZWNgLu.s:294    .text:0000000000000130 .L0 
     /tmp/ccZWNgLu.s:295    .text:0000000000000130 .L0 
     /tmp/ccZWNgLu.s:296    .text:0000000000000130 .L0 
  src/../h/Riscv.hpp:177    .text:0000000000000130 .L0 
     /tmp/ccZWNgLu.s:304    .text:0000000000000138 .L0 
     /tmp/ccZWNgLu.s:305    .text:0000000000000138 .L0 
     /tmp/ccZWNgLu.s:310    .text:000000000000013c .L0 
     /tmp/ccZWNgLu.s:311    .text:000000000000013c .L0 
     /tmp/ccZWNgLu.s:316    .text:0000000000000144 .L0 
     /tmp/ccZWNgLu.s:317    .text:0000000000000144 .L0 
  src/../h/Riscv.hpp:183    .text:0000000000000144 .L0 
     /tmp/ccZWNgLu.s:329    .text:0000000000000148 .L0 
GAS LISTING /tmp/ccZWNgLu.s 			page 21


     /tmp/ccZWNgLu.s:330    .text:0000000000000148 .L0 
  src/../h/Riscv.hpp:113    .text:0000000000000148 .L0 
     /tmp/ccZWNgLu.s:343    .text:000000000000014c .L0 
     /tmp/ccZWNgLu.s:345    .text:000000000000014c .L0 
     /tmp/ccZWNgLu.s:346    .text:000000000000014c .L0 
     /tmp/ccZWNgLu.s:355    .text:0000000000000150 .L0 
     /tmp/ccZWNgLu.s:356    .text:0000000000000150 .L0 
     /tmp/ccZWNgLu.s:357    .text:0000000000000150 .L0 
  src/../h/Riscv.hpp:107    .text:0000000000000150 .L0 
     /tmp/ccZWNgLu.s:365    .text:0000000000000158 .L0 
     /tmp/ccZWNgLu.s:366    .text:0000000000000158 .L0 
     /tmp/ccZWNgLu.s:370    .text:000000000000015c .L0 
     /tmp/ccZWNgLu.s:375    .text:0000000000000160 .L0 
     /tmp/ccZWNgLu.s:376    .text:0000000000000160 .L0 
     /tmp/ccZWNgLu.s:377    .text:0000000000000160 .L0 
  src/../h/Riscv.hpp:177    .text:0000000000000160 .L0 
     /tmp/ccZWNgLu.s:385    .text:0000000000000168 .L0 
     /tmp/ccZWNgLu.s:386    .text:0000000000000168 .L0 
     /tmp/ccZWNgLu.s:391    .text:000000000000016c .L0 
     /tmp/ccZWNgLu.s:392    .text:000000000000016c .L0 
     /tmp/ccZWNgLu.s:395    .text:0000000000000178 .L0 
     /tmp/ccZWNgLu.s:396    .text:0000000000000178 .L0 
     /tmp/ccZWNgLu.s:401    .text:0000000000000180 .L0 
     /tmp/ccZWNgLu.s:402    .text:0000000000000180 .L0 
  src/../h/Riscv.hpp:183    .text:0000000000000180 .L0 
     /tmp/ccZWNgLu.s:414    .text:0000000000000184 .L0 
     /tmp/ccZWNgLu.s:415    .text:0000000000000184 .L0 
  src/../h/Riscv.hpp:113    .text:0000000000000184 .L0 
     /tmp/ccZWNgLu.s:422    .text:0000000000000188 .L0 
     /tmp/ccZWNgLu.s:433    .text:000000000000018c .L0 
     /tmp/ccZWNgLu.s:434    .text:000000000000018c .L0 
     /tmp/ccZWNgLu.s:435    .text:000000000000018c .L0 
  src/../h/Riscv.hpp:107    .text:000000000000018c .L0 
     /tmp/ccZWNgLu.s:443    .text:0000000000000194 .L0 
     /tmp/ccZWNgLu.s:444    .text:0000000000000194 .L0 
     /tmp/ccZWNgLu.s:448    .text:0000000000000198 .L0 
     /tmp/ccZWNgLu.s:453    .text:000000000000019c .L0 
     /tmp/ccZWNgLu.s:454    .text:000000000000019c .L0 
     /tmp/ccZWNgLu.s:455    .text:000000000000019c .L0 
  src/../h/Riscv.hpp:177    .text:000000000000019c .L0 
     /tmp/ccZWNgLu.s:463    .text:00000000000001a4 .L0 
     /tmp/ccZWNgLu.s:464    .text:00000000000001a4 .L0 
     /tmp/ccZWNgLu.s:469    .text:00000000000001a8 .L0 
     /tmp/ccZWNgLu.s:470    .text:00000000000001a8 .L0 
     /tmp/ccZWNgLu.s:471    .text:00000000000001a8 .L0 
     /tmp/ccZWNgLu.s:472    .text:00000000000001a8 .L0 
     /tmp/ccZWNgLu.s:473    .text:00000000000001a8 .L0 
       src/Riscv.cpp:79     .text:00000000000001a8 .L0 
     /tmp/ccZWNgLu.s:479    .text:00000000000001ac .L0 
       src/Riscv.cpp:80     .text:00000000000001ac .L0 
     /tmp/ccZWNgLu.s:484    .text:00000000000001b0 .L0 
       src/Riscv.cpp:81     .text:00000000000001b0 .L0 
     /tmp/ccZWNgLu.s:489    .text:00000000000001b4 .L0 
       src/Riscv.cpp:82     .text:00000000000001b4 .L0 
     /tmp/ccZWNgLu.s:494    .text:00000000000001b8 .L0 
       src/Riscv.cpp:85     .text:00000000000001b8 .L0 
     /tmp/ccZWNgLu.s:500    .text:00000000000001bc .L0 
GAS LISTING /tmp/ccZWNgLu.s 			page 22


       src/Riscv.cpp:86     .text:00000000000001bc .L0 
     /tmp/ccZWNgLu.s:506    .text:00000000000001c0 .L0 
       src/Riscv.cpp:87     .text:00000000000001c0 .L0 
     /tmp/ccZWNgLu.s:512    .text:00000000000001c4 .L0 
       src/Riscv.cpp:88     .text:00000000000001c4 .L0 
     /tmp/ccZWNgLu.s:518    .text:00000000000001c8 .L0 
     /tmp/ccZWNgLu.s:520    .text:00000000000001c8 .L0 
     /tmp/ccZWNgLu.s:523    .text:00000000000001d0 .L0 
     /tmp/ccZWNgLu.s:524    .text:00000000000001d0 .L0 
     /tmp/ccZWNgLu.s:526    .text:00000000000001d4 .L0 
     /tmp/ccZWNgLu.s:527    .text:00000000000001d4 .L0 
     /tmp/ccZWNgLu.s:529    .text:00000000000001d8 .L0 
     /tmp/ccZWNgLu.s:533    .text:00000000000001dc .L0 
       src/Riscv.cpp:100    .text:00000000000001dc .L0 
     /tmp/ccZWNgLu.s:543    .text:00000000000001e0 .L0 
     /tmp/ccZWNgLu.s:544    .text:00000000000001e0 .L0 
  src/../h/Riscv.hpp:183    .text:00000000000001e0 .L0 
     /tmp/ccZWNgLu.s:556    .text:00000000000001e4 .L0 
     /tmp/ccZWNgLu.s:557    .text:00000000000001e4 .L0 
  src/../h/Riscv.hpp:113    .text:00000000000001e4 .L0 
     /tmp/ccZWNgLu.s:564    .text:00000000000001e8 .L0 
     /tmp/ccZWNgLu.s:570    .text:00000000000001ec .L0 
     /tmp/ccZWNgLu.s:576    .text:00000000000001f4 .L0 
     /tmp/ccZWNgLu.s:583    .text:00000000000001f4 .L0 
     /tmp/ccZWNgLu.s:117    .text:000000000000006c .L0 
     /tmp/ccZWNgLu.s:392    .text:000000000000016c .L0 
     /tmp/ccZWNgLu.s:63     .text:0000000000000044 .L7
     /tmp/ccZWNgLu.s:89     .text:0000000000000058 .L8
     /tmp/ccZWNgLu.s:114    .text:000000000000006c .L9
     /tmp/ccZWNgLu.s:129    .text:000000000000008c .L10
     /tmp/ccZWNgLu.s:49     .text:0000000000000034 .L1
     /tmp/ccZWNgLu.s:255    .text:0000000000000110 .L20
     /tmp/ccZWNgLu.s:348    .text:0000000000000150 .L21
     /tmp/ccZWNgLu.s:424    .text:000000000000018c .L22
     /tmp/ccZWNgLu.s:236    .text:00000000000000f4 .L13
     /tmp/ccZWNgLu.s:566    .text:00000000000001ec .L18
     /tmp/ccZWNgLu.s:530    .text:00000000000001dc .L17
     /tmp/ccZWNgLu.s:1807   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccZWNgLu.s:3048   .debug_str:000000000000063c .LASF127
     /tmp/ccZWNgLu.s:2952   .debug_str:000000000000038b .LASF128
     /tmp/ccZWNgLu.s:2848   .debug_str:000000000000007e .LASF129
     /tmp/ccZWNgLu.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccZWNgLu.s:579    .text:00000000000001f4 .Letext0
     /tmp/ccZWNgLu.s:2830   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccZWNgLu.s:2870   .debug_str:000000000000014c .LASF3
     /tmp/ccZWNgLu.s:2968   .debug_str:00000000000003f1 .LASF0
     /tmp/ccZWNgLu.s:2988   .debug_str:000000000000045f .LASF1
     /tmp/ccZWNgLu.s:2954   .debug_str:0000000000000399 .LASF2
     /tmp/ccZWNgLu.s:2924   .debug_str:00000000000002d8 .LASF4
     /tmp/ccZWNgLu.s:3020   .debug_str:0000000000000548 .LASF5
     /tmp/ccZWNgLu.s:2854   .debug_str:00000000000000d9 .LASF6
     /tmp/ccZWNgLu.s:2992   .debug_str:0000000000000479 .LASF7
     /tmp/ccZWNgLu.s:2966   .debug_str:00000000000003de .LASF8
     /tmp/ccZWNgLu.s:3066   .debug_str:0000000000000797 .LASF9
     /tmp/ccZWNgLu.s:2912   .debug_str:0000000000000265 .LASF10
     /tmp/ccZWNgLu.s:3000   .debug_str:00000000000004ad .LASF11
     /tmp/ccZWNgLu.s:3054   .debug_str:0000000000000725 .LASF12
GAS LISTING /tmp/ccZWNgLu.s 			page 23


     /tmp/ccZWNgLu.s:2856   .debug_str:00000000000000e0 .LASF13
     /tmp/ccZWNgLu.s:2838   .debug_str:0000000000000034 .LASF14
     /tmp/ccZWNgLu.s:2866   .debug_str:0000000000000130 .LASF15
     /tmp/ccZWNgLu.s:3012   .debug_str:0000000000000504 .LASF16
     /tmp/ccZWNgLu.s:2876   .debug_str:000000000000017a .LASF17
     /tmp/ccZWNgLu.s:2984   .debug_str:000000000000044c .LASF58
     /tmp/ccZWNgLu.s:3010   .debug_str:00000000000004f9 .LASF50
     /tmp/ccZWNgLu.s:3086   .debug_str:0000000000000841 .LASF52
     /tmp/ccZWNgLu.s:2840   .debug_str:0000000000000044 .LASF18
     /tmp/ccZWNgLu.s:3032   .debug_str:000000000000059c .LASF20
     /tmp/ccZWNgLu.s:2888   .debug_str:00000000000001f3 .LASF22
     /tmp/ccZWNgLu.s:2886   .debug_str:00000000000001de .LASF24
     /tmp/ccZWNgLu.s:3024   .debug_str:0000000000000569 .LASF19
     /tmp/ccZWNgLu.s:3004   .debug_str:00000000000004d9 .LASF21
     /tmp/ccZWNgLu.s:3046   .debug_str:0000000000000635 .LASF23
     /tmp/ccZWNgLu.s:3036   .debug_str:00000000000005c9 .LASF25
     /tmp/ccZWNgLu.s:2902   .debug_str:0000000000000248 .LASF26
     /tmp/ccZWNgLu.s:2878   .debug_str:0000000000000190 .LASF27
     /tmp/ccZWNgLu.s:2834   .debug_str:0000000000000009 .LASF28
     /tmp/ccZWNgLu.s:2918   .debug_str:00000000000002a6 .LASF29
     /tmp/ccZWNgLu.s:2892   .debug_str:0000000000000204 .LASF30
     /tmp/ccZWNgLu.s:2858   .debug_str:00000000000000f0 .LASF31
     /tmp/ccZWNgLu.s:3092   .debug_str:0000000000000875 .LASF32
     /tmp/ccZWNgLu.s:2894   .debug_str:000000000000020c .LASF33
     /tmp/ccZWNgLu.s:2970   .debug_str:00000000000003fe .LASF34
     /tmp/ccZWNgLu.s:3084   .debug_str:000000000000082e .LASF35
     /tmp/ccZWNgLu.s:2850   .debug_str:00000000000000ae .LASF36
     /tmp/ccZWNgLu.s:2900   .debug_str:0000000000000235 .LASF37
     /tmp/ccZWNgLu.s:2910   .debug_str:000000000000025f .LASF38
     /tmp/ccZWNgLu.s:3044   .debug_str:0000000000000623 .LASF39
     /tmp/ccZWNgLu.s:2940   .debug_str:000000000000033d .LASF40
     /tmp/ccZWNgLu.s:3096   .debug_str:000000000000088d .LASF41
     /tmp/ccZWNgLu.s:3090   .debug_str:000000000000086a .LASF42
     /tmp/ccZWNgLu.s:3018   .debug_str:0000000000000530 .LASF43
     /tmp/ccZWNgLu.s:2934   .debug_str:0000000000000308 .LASF44
     /tmp/ccZWNgLu.s:3034   .debug_str:00000000000005b1 .LASF45
     /tmp/ccZWNgLu.s:2864   .debug_str:0000000000000126 .LASF46
     /tmp/ccZWNgLu.s:2920   .debug_str:00000000000002ba .LASF47
     /tmp/ccZWNgLu.s:2958   .debug_str:00000000000003b3 .LASF48
     /tmp/ccZWNgLu.s:2914   .debug_str:0000000000000273 .LASF49
     /tmp/ccZWNgLu.s:3026   .debug_str:0000000000000570 .LASF51
     /tmp/ccZWNgLu.s:2860   .debug_str:0000000000000104 .LASF53
     /tmp/ccZWNgLu.s:3074   .debug_str:00000000000007c7 .LASF54
     /tmp/ccZWNgLu.s:2938   .debug_str:000000000000031b .LASF56
     /tmp/ccZWNgLu.s:3022   .debug_str:000000000000055a .LASF55
     /tmp/ccZWNgLu.s:3038   .debug_str:00000000000005dc .LASF57
     /tmp/ccZWNgLu.s:2950   .debug_str:000000000000037b .LASF59
     /tmp/ccZWNgLu.s:3050   .debug_str:0000000000000700 .LASF60
     /tmp/ccZWNgLu.s:2852   .debug_str:00000000000000b5 .LASF61
     /tmp/ccZWNgLu.s:3062   .debug_str:0000000000000770 .LASF62
     /tmp/ccZWNgLu.s:2836   .debug_str:0000000000000011 .LASF64
     /tmp/ccZWNgLu.s:3072   .debug_str:00000000000007bd .LASF63
     /tmp/ccZWNgLu.s:2846   .debug_str:000000000000005c .LASF65
     /tmp/ccZWNgLu.s:3064   .debug_str:000000000000077b .LASF67
     /tmp/ccZWNgLu.s:2962   .debug_str:00000000000003c3 .LASF66
     /tmp/ccZWNgLu.s:3076   .debug_str:00000000000007dc .LASF68
     /tmp/ccZWNgLu.s:2884   .debug_str:00000000000001c5 .LASF108
GAS LISTING /tmp/ccZWNgLu.s 			page 24


     /tmp/ccZWNgLu.s:2922   .debug_str:00000000000002d0 .LASF69
     /tmp/ccZWNgLu.s:3056   .debug_str:0000000000000734 .LASF130
     /tmp/ccZWNgLu.s:2998   .debug_str:00000000000004a7 .LASF70
     /tmp/ccZWNgLu.s:3028   .debug_str:000000000000057f .LASF71
     /tmp/ccZWNgLu.s:2926   .debug_str:00000000000002df .LASF72
     /tmp/ccZWNgLu.s:2844   .debug_str:0000000000000054 .LASF131
     /tmp/ccZWNgLu.s:3060   .debug_str:0000000000000767 .LASF73
     /tmp/ccZWNgLu.s:2996   .debug_str:0000000000000497 .LASF74
     /tmp/ccZWNgLu.s:2994   .debug_str:000000000000048c .LASF75
     /tmp/ccZWNgLu.s:2880   .debug_str:00000000000001a4 .LASF76
     /tmp/ccZWNgLu.s:2956   .debug_str:00000000000003a7 .LASF77
     /tmp/ccZWNgLu.s:2872   .debug_str:0000000000000151 .LASF78
     /tmp/ccZWNgLu.s:2948   .debug_str:000000000000036e .LASF79
     /tmp/ccZWNgLu.s:3002   .debug_str:00000000000004bc .LASF80
     /tmp/ccZWNgLu.s:2986   .debug_str:0000000000000452 .LASF81
     /tmp/ccZWNgLu.s:3082   .debug_str:000000000000080a .LASF82
     /tmp/ccZWNgLu.s:3008   .debug_str:00000000000004f4 .LASF115
     /tmp/ccZWNgLu.s:3014   .debug_str:000000000000051a .LASF83
     /tmp/ccZWNgLu.s:3042   .debug_str:000000000000060f .LASF84
     /tmp/ccZWNgLu.s:2882   .debug_str:00000000000001bf .LASF85
     /tmp/ccZWNgLu.s:3030   .debug_str:0000000000000588 .LASF86
     /tmp/ccZWNgLu.s:2890   .debug_str:00000000000001fc .LASF132
     /tmp/ccZWNgLu.s:2862   .debug_str:0000000000000120 .LASF87
     /tmp/ccZWNgLu.s:2944   .debug_str:0000000000000351 .LASF88
     /tmp/ccZWNgLu.s:2982   .debug_str:000000000000043f .LASF89
     /tmp/ccZWNgLu.s:2976   .debug_str:0000000000000414 .LASF90
     /tmp/ccZWNgLu.s:3080   .debug_str:00000000000007fd .LASF91
     /tmp/ccZWNgLu.s:3016   .debug_str:0000000000000520 .LASF92
     /tmp/ccZWNgLu.s:3094   .debug_str:000000000000087d .LASF93
     /tmp/ccZWNgLu.s:2896   .debug_str:0000000000000220 .LASF94
     /tmp/ccZWNgLu.s:2868   .debug_str:000000000000013c .LASF95
     /tmp/ccZWNgLu.s:3088   .debug_str:0000000000000859 .LASF96
     /tmp/ccZWNgLu.s:2928   .debug_str:00000000000002e7 .LASF97
     /tmp/ccZWNgLu.s:2964   .debug_str:00000000000003cd .LASF98
     /tmp/ccZWNgLu.s:3052   .debug_str:000000000000070c .LASF99
     /tmp/ccZWNgLu.s:2932   .debug_str:0000000000000303 .LASF100
     /tmp/ccZWNgLu.s:2974   .debug_str:000000000000040e .LASF101
     /tmp/ccZWNgLu.s:2936   .debug_str:0000000000000313 .LASF102
     /tmp/ccZWNgLu.s:2980   .debug_str:0000000000000435 .LASF103
     /tmp/ccZWNgLu.s:2930   .debug_str:00000000000002fa .LASF104
     /tmp/ccZWNgLu.s:2942   .debug_str:0000000000000343 .LASF105
     /tmp/ccZWNgLu.s:2916   .debug_str:0000000000000289 .LASF106
     /tmp/ccZWNgLu.s:2874   .debug_str:000000000000016c .LASF107
     /tmp/ccZWNgLu.s:3058   .debug_str:000000000000073b .LASF109
     /tmp/ccZWNgLu.s:2972   .debug_str:0000000000000405 .LASF110
     /tmp/ccZWNgLu.s:3040   .debug_str:00000000000005f8 .LASF111
     /tmp/ccZWNgLu.s:3068   .debug_str:00000000000007a7 .LASF112
     /tmp/ccZWNgLu.s:2946   .debug_str:0000000000000365 .LASF113
     /tmp/ccZWNgLu.s:2990   .debug_str:0000000000000472 .LASF114
     /tmp/ccZWNgLu.s:2832   .debug_str:0000000000000000 .LASF116
     /tmp/ccZWNgLu.s:2898   .debug_str:0000000000000230 .LASF117
     /tmp/ccZWNgLu.s:180    .text:00000000000000b8 .LFB44
     /tmp/ccZWNgLu.s:577    .text:00000000000001f4 .LFE44
     /tmp/ccZWNgLu.s:2842   .debug_str:000000000000004d .LASF118
     /tmp/ccZWNgLu.s:2652   .debug_loc:0000000000000000 .LLST4
     /tmp/ccZWNgLu.s:2960   .debug_str:00000000000003bd .LASF119
     /tmp/ccZWNgLu.s:2659   .debug_loc:0000000000000023 .LLST5
GAS LISTING /tmp/ccZWNgLu.s 			page 25


     /tmp/ccZWNgLu.s:351    .text:0000000000000150 .LBB64
     /tmp/ccZWNgLu.s:427    .text:000000000000018c .LBE64
     /tmp/ccZWNgLu.s:2978   .debug_str:0000000000000430 .LASF120
     /tmp/ccZWNgLu.s:2678   .debug_loc:000000000000007f .LLST15
     /tmp/ccZWNgLu.s:3006   .debug_str:00000000000004ec .LASF121
     /tmp/ccZWNgLu.s:2685   .debug_loc:00000000000000a2 .LLST16
     /tmp/ccZWNgLu.s:353    .text:0000000000000150 .LBB65
     /tmp/ccZWNgLu.s:368    .text:000000000000015c .LBE65
     /tmp/ccZWNgLu.s:373    .text:0000000000000160 .LBB67
     /tmp/ccZWNgLu.s:389    .text:000000000000016c .LBE67
     /tmp/ccZWNgLu.s:399    .text:0000000000000180 .LBB69
     /tmp/ccZWNgLu.s:410    .text:0000000000000184 .LBE69
     /tmp/ccZWNgLu.s:2692   .debug_loc:00000000000000c5 .LLST17
     /tmp/ccZWNgLu.s:412    .text:0000000000000184 .LBB71
     /tmp/ccZWNgLu.s:426    .text:000000000000018c .LBE71
     /tmp/ccZWNgLu.s:2699   .debug_loc:00000000000000e8 .LLST18
     /tmp/ccZWNgLu.s:397    .text:0000000000000180 .LVL26
     /tmp/ccZWNgLu.s:429    .text:000000000000018c .LBB55
     /tmp/ccZWNgLu.s:572    .text:00000000000001f4 .LBE55
     /tmp/ccZWNgLu.s:2904   .debug_str:0000000000000250 .LASF122
     /tmp/ccZWNgLu.s:2906   .debug_str:0000000000000255 .LASF123
     /tmp/ccZWNgLu.s:2706   .debug_loc:000000000000010b .LLST10
     /tmp/ccZWNgLu.s:2908   .debug_str:000000000000025a .LASF124
     /tmp/ccZWNgLu.s:2713   .debug_loc:000000000000012e .LLST11
     /tmp/ccZWNgLu.s:3078   .debug_str:00000000000007f8 .LASF126
     /tmp/ccZWNgLu.s:2720   .debug_loc:0000000000000151 .LLST12
     /tmp/ccZWNgLu.s:431    .text:000000000000018c .LBB56
     /tmp/ccZWNgLu.s:446    .text:0000000000000198 .LBE56
     /tmp/ccZWNgLu.s:451    .text:000000000000019c .LBB58
     /tmp/ccZWNgLu.s:467    .text:00000000000001a8 .LBE58
     /tmp/ccZWNgLu.s:541    .text:00000000000001e0 .LBB60
     /tmp/ccZWNgLu.s:552    .text:00000000000001e4 .LBE60
     /tmp/ccZWNgLu.s:2727   .debug_loc:0000000000000174 .LLST13
     /tmp/ccZWNgLu.s:554    .text:00000000000001e4 .LBB62
     /tmp/ccZWNgLu.s:568    .text:00000000000001ec .LBE62
     /tmp/ccZWNgLu.s:2734   .debug_loc:0000000000000197 .LLST14
     /tmp/ccZWNgLu.s:521    .text:00000000000001d0 .LVL35
     /tmp/ccZWNgLu.s:270    .text:0000000000000120 .LBB46
     /tmp/ccZWNgLu.s:339    .text:000000000000014c .LBE46
     /tmp/ccZWNgLu.s:2741   .debug_loc:00000000000001ba .LLST6
     /tmp/ccZWNgLu.s:2748   .debug_loc:00000000000001dd .LLST7
     /tmp/ccZWNgLu.s:272    .text:0000000000000120 .LBB47
     /tmp/ccZWNgLu.s:287    .text:000000000000012c .LBE47
     /tmp/ccZWNgLu.s:292    .text:0000000000000130 .LBB49
     /tmp/ccZWNgLu.s:308    .text:000000000000013c .LBE49
     /tmp/ccZWNgLu.s:314    .text:0000000000000144 .LBB51
     /tmp/ccZWNgLu.s:325    .text:0000000000000148 .LBE51
     /tmp/ccZWNgLu.s:2755   .debug_loc:0000000000000200 .LLST8
     /tmp/ccZWNgLu.s:327    .text:0000000000000148 .LBB53
     /tmp/ccZWNgLu.s:338    .text:000000000000014c .LBE53
     /tmp/ccZWNgLu.s:2762   .debug_loc:0000000000000223 .LLST9
     /tmp/ccZWNgLu.s:312    .text:0000000000000144 .LVL20
     /tmp/ccZWNgLu.s:198    .text:00000000000000d4 .LBB41
     /tmp/ccZWNgLu.s:214    .text:00000000000000e0 .LBE41
     /tmp/ccZWNgLu.s:145    .text:0000000000000098 .LFB43
     /tmp/ccZWNgLu.s:174    .text:00000000000000b8 .LFE43
     /tmp/ccZWNgLu.s:10     .text:0000000000000000 .LFB42
GAS LISTING /tmp/ccZWNgLu.s 			page 26


     /tmp/ccZWNgLu.s:139    .text:0000000000000098 .LFE42
     /tmp/ccZWNgLu.s:3070   .debug_str:00000000000007b8 .LASF125
     /tmp/ccZWNgLu.s:2769   .debug_loc:0000000000000246 .LLST0
     /tmp/ccZWNgLu.s:2792   .debug_loc:00000000000002b5 .LLST1
     /tmp/ccZWNgLu.s:66     .text:0000000000000044 .LBB37
     /tmp/ccZWNgLu.s:86     .text:0000000000000054 .LBE37
     /tmp/ccZWNgLu.s:2803   .debug_loc:00000000000002eb .LLST3
     /tmp/ccZWNgLu.s:78     .text:0000000000000050 .LVL4
     /tmp/ccZWNgLu.s:91     .text:0000000000000058 .LBB36
     /tmp/ccZWNgLu.s:111    .text:0000000000000068 .LBE36
     /tmp/ccZWNgLu.s:2810   .debug_loc:000000000000030e .LLST2
     /tmp/ccZWNgLu.s:103    .text:0000000000000064 .LVL7
     /tmp/ccZWNgLu.s:126    .text:0000000000000088 .LVL10
     /tmp/ccZWNgLu.s:133    .text:0000000000000094 .LVL12
     /tmp/ccZWNgLu.s:217    .text:00000000000000e4 .LVL13
     /tmp/ccZWNgLu.s:231    .text:00000000000000ec .LVL15
     /tmp/ccZWNgLu.s:225    .text:00000000000000e8 .LVL14
     /tmp/ccZWNgLu.s:235    .text:00000000000000f4 .LVL16
     /tmp/ccZWNgLu.s:254    .text:0000000000000110 .LVL17
     /tmp/ccZWNgLu.s:347    .text:0000000000000150 .LVL23
     /tmp/ccZWNgLu.s:423    .text:000000000000018c .LVL28
     /tmp/ccZWNgLu.s:371    .text:0000000000000160 .LVL24
     /tmp/ccZWNgLu.s:387    .text:000000000000016c .LVL25
     /tmp/ccZWNgLu.s:407    .text:0000000000000184 .LVL27
     /tmp/ccZWNgLu.s:504    .text:00000000000001c0 .LVL32
     /tmp/ccZWNgLu.s:510    .text:00000000000001c4 .LVL33
     /tmp/ccZWNgLu.s:531    .text:00000000000001dc .LVL36
     /tmp/ccZWNgLu.s:565    .text:00000000000001ec .LVL39
     /tmp/ccZWNgLu.s:539    .text:00000000000001e0 .LVL37
     /tmp/ccZWNgLu.s:549    .text:00000000000001e4 .LVL38
     /tmp/ccZWNgLu.s:290    .text:0000000000000130 .LVL18
     /tmp/ccZWNgLu.s:306    .text:000000000000013c .LVL19
     /tmp/ccZWNgLu.s:322    .text:0000000000000148 .LVL21
     /tmp/ccZWNgLu.s:335    .text:000000000000014c .LVL22
     /tmp/ccZWNgLu.s:30     .text:0000000000000014 .LVL0
     /tmp/ccZWNgLu.s:48     .text:0000000000000034 .LVL1
     /tmp/ccZWNgLu.s:62     .text:0000000000000044 .LVL2
     /tmp/ccZWNgLu.s:88     .text:0000000000000058 .LVL5
     /tmp/ccZWNgLu.s:113    .text:000000000000006c .LVL8
     /tmp/ccZWNgLu.s:118    .text:0000000000000074 .LVL9
     /tmp/ccZWNgLu.s:128    .text:000000000000008c .LVL11
     /tmp/ccZWNgLu.s:73     .text:0000000000000048 .LVL3
     /tmp/ccZWNgLu.s:98     .text:000000000000005c .LVL6
     /tmp/ccZWNgLu.s:584    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN15MemoryAllocator10kmem_allocEm
_ZN15MemoryAllocator9kmem_freeEPv
_ZN7_thread7runningE
_ZN7_thread8dispatchEv
_ZN7_thread16timeSliceCounterE
_ZN7_thread12createThreadEPFvPvES0_
