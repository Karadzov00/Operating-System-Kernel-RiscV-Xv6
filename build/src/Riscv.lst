GAS LISTING /tmp/ccYXE29x.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv14syscallHandlerEv
   9              	_ZN5Riscv14syscallHandlerEv:
  10              	.LFB40:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 6/17/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** #include "../h/_thread.hpp"
   8:src/Riscv.cpp **** 
   9:src/Riscv.cpp **** 
  10:src/Riscv.cpp **** void Riscv::syscallHandler() {
  12              		.loc 1 10 30
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  11:src/Riscv.cpp ****     //read syscall code from register a0
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp ****     uint64 arg0;
  22              		.loc 1 13 5
  14:src/Riscv.cpp ****     uint64 arg1;
  23              		.loc 1 14 5
  15:src/Riscv.cpp ****     uint64 arg2;
  24              		.loc 1 15 5
  16:src/Riscv.cpp ****     uint64 arg3;
  25              		.loc 1 16 5
  17:src/Riscv.cpp **** //    uint64 arg4;
  18:src/Riscv.cpp **** //    uint64 arg5;
  19:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (arg0));    //read system call code
  26              		.loc 1 19 5
  27              		.loc 1 19 48 is_stmt 0
  28              	#APP
  29              	# 19 "src/Riscv.cpp" 1
  20              	    if(arg0== 0x01 ){
  30              		mv a5, a0
  31              	# 0 "" 2
  32              	.LVL0:
  33              		.loc 1 20 5 is_stmt 1
  34              	#NO_APP
  35              	.LBB14:
  36 0014 13071000 		li	a4,1
  37 0018 6382E702 		beq	a5,a4,.L6
  38              	.LBE14:
GAS LISTING /tmp/ccYXE29x.s 			page 2


  21:src/Riscv.cpp ****         //kmem_alloc
  22:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read size from a1 and move it to arg1 loc
  23:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  24:src/Riscv.cpp **** 
  25:src/Riscv.cpp ****         //write return value to a0 register
  26:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ptr));
  27:src/Riscv.cpp ****     }
  28:src/Riscv.cpp ****     else if(arg0==0x02){
  39              		.loc 1 28 10
  40              	.LBB19:
  41              	.LBB15:
  42 001c 13072000 		li	a4,2
  43 0020 6388E702 		beq	a5,a4,.L7
  29:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //read pointer to free from a1 and move it 
  30:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  31:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
  32:src/Riscv.cpp ****     }
  33:src/Riscv.cpp ****     else if(arg0==0x11){
  44              		.loc 1 33 10
  45 0024 13071001 		li	a4,17
  46 0028 638EE702 		beq	a5,a4,.L8
  47              	.LVL1:
  48              	.L1:
  49              	.LBE15:
  50              	.LBE19:
  34:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));    //handle
  35:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg2));    //start routine
  36:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg3));    //argument of start routine
  37:src/Riscv.cpp **** 
  38:src/Riscv.cpp ****         //make new thread object using overloaded new operator for that function
  39:src/Riscv.cpp **** //        _thread* t = new _thread((void (*)())arg2, DEFAULT_TIME_SLICE);
  40:src/Riscv.cpp **** //        _thread** handle = &t;
  41:src/Riscv.cpp **** 
  42:src/Riscv.cpp **** 
  43:src/Riscv.cpp **** 
  44:src/Riscv.cpp ****     }
  45:src/Riscv.cpp **** 
  46:src/Riscv.cpp **** }
  51              		.loc 1 46 1 is_stmt 0
  52 002c 83308100 		ld	ra,8(sp)
  53              		.cfi_remember_state
  54              		.cfi_restore 1
  55 0030 03340100 		ld	s0,0(sp)
  56              		.cfi_restore 8
  57              		.cfi_def_cfa 2, 16
  58 0034 13010101 		addi	sp,sp,16
  59              		.cfi_def_cfa_offset 0
  60 0038 67800000 		jr	ra
  61              	.LVL2:
  62              	.L6:
  63              		.cfi_restore_state
  64              	.LBB20:
  65              	.LBB17:
  22:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  66              		.loc 1 22 9 is_stmt 1
  22:src/Riscv.cpp ****         uint64 ptr= (uint64) MemoryAllocator::kmem_alloc(arg1);
  67              		.loc 1 22 52 is_stmt 0
GAS LISTING /tmp/ccYXE29x.s 			page 3


  68              	#APP
  69              	# 22 "src/Riscv.cpp" 1
  70              		mv a0, a1
  71              	# 0 "" 2
  72              	.LVL3:
  23:src/Riscv.cpp **** 
  73              		.loc 1 23 9 is_stmt 1
  23:src/Riscv.cpp **** 
  74              		.loc 1 23 57 is_stmt 0
  75              	#NO_APP
  76 0040 97000000 		call	_ZN15MemoryAllocator10kmem_allocEm@plt
  76      E7800000 
  77              	.LVL4:
  26:src/Riscv.cpp ****     }
  78              		.loc 1 26 9 is_stmt 1
  26:src/Riscv.cpp ****     }
  79              		.loc 1 26 52 is_stmt 0
  80              	#APP
  81              	# 26 "src/Riscv.cpp" 1
  82              		mv a0, a0
  83              	# 0 "" 2
  84              	#NO_APP
  85              	.LBE17:
  86 004c 6FF01FFE 		j	.L1
  87              	.LVL5:
  88              	.L7:
  89              	.LBB18:
  90              	.LBB16:
  29:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  91              		.loc 1 29 9 is_stmt 1
  29:src/Riscv.cpp ****         int ret = MemoryAllocator::kmem_free((void *) arg1);
  92              		.loc 1 29 52 is_stmt 0
  93              	#APP
  94              	# 29 "src/Riscv.cpp" 1
  95              		mv a0, a1
  96              	# 0 "" 2
  97              	.LVL6:
  30:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
  98              		.loc 1 30 9 is_stmt 1
  30:src/Riscv.cpp ****         __asm__ volatile("mv a0, %0" : : "r" (ret));
  99              		.loc 1 30 45 is_stmt 0
 100              	#NO_APP
 101 0054 97000000 		call	_ZN15MemoryAllocator9kmem_freeEPv@plt
 101      E7800000 
 102              	.LVL7:
  31:src/Riscv.cpp ****     }
 103              		.loc 1 31 9 is_stmt 1
  31:src/Riscv.cpp ****     }
 104              		.loc 1 31 52 is_stmt 0
 105              	#APP
 106              	# 31 "src/Riscv.cpp" 1
 107              		mv a0, a0
 108              	# 0 "" 2
 109              	#NO_APP
 110              	.LBE16:
 111 0060 6FF0DFFC 		j	.L1
 112              	.LVL8:
GAS LISTING /tmp/ccYXE29x.s 			page 4


 113              	.L8:
  34:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg2));    //start routine
 114              		.loc 1 34 9 is_stmt 1
  34:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg2));    //start routine
 115              		.loc 1 34 52 is_stmt 0
 116              	#APP
 117              	# 34 "src/Riscv.cpp" 1
 118              		mv a5, a1
 119              	# 0 "" 2
 120              	.LVL9:
  35:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg3));    //argument of start routine
 121              		.loc 1 35 9 is_stmt 1
  35:src/Riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg3));    //argument of start routine
 122              		.loc 1 35 52 is_stmt 0
 123              	# 35 "src/Riscv.cpp" 1
 124              		mv a5, a1
 125              	# 0 "" 2
 126              	.LVL10:
  36:src/Riscv.cpp **** 
 127              		.loc 1 36 9 is_stmt 1
  36:src/Riscv.cpp **** 
 128              		.loc 1 36 52 is_stmt 0
 129              	# 36 "src/Riscv.cpp" 1
 130              		mv a5, a1
 131              	# 0 "" 2
 132              	.LVL11:
 133              	#NO_APP
 134              	.LBE18:
 135              	.LBE20:
 136              		.loc 1 46 1
 137 0070 6FF0DFFB 		j	.L1
 138              		.cfi_endproc
 139              	.LFE40:
 141              		.align	2
 142              		.globl	_ZN5Riscv10popSppSpieEv
 144              	_ZN5Riscv10popSppSpieEv:
 145              	.LFB41:
  47:src/Riscv.cpp **** 
  48:src/Riscv.cpp **** void Riscv::popSppSpie()    //pop supervisor previous privilege, supervisor previous interrupt enab
  49:src/Riscv.cpp **** {
 146              		.loc 1 49 1 is_stmt 1
 147              		.cfi_startproc
 148 0074 130101FF 		addi	sp,sp,-16
 149              		.cfi_def_cfa_offset 16
 150 0078 23348100 		sd	s0,8(sp)
 151              		.cfi_offset 8, -8
 152 007c 13040101 		addi	s0,sp,16
 153              		.cfi_def_cfa 8, 0
  50:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
 154              		.loc 1 50 5
 155              		.loc 1 50 39 is_stmt 0
 156              	#APP
 157              	# 50 "src/Riscv.cpp" 1
  51              	    __asm__ volatile ("sret");  //exit privileged regime
 158              		csrw sepc, ra
 159              	# 0 "" 2
 160              		.loc 1 51 5 is_stmt 1
GAS LISTING /tmp/ccYXE29x.s 			page 5


 161              		.loc 1 51 30 is_stmt 0
 162              	# 51 "src/Riscv.cpp" 1
  52              	}
 163              		sret
 164              	# 0 "" 2
 165              		.loc 1 52 1
 166              	#NO_APP
 167 0088 03348100 		ld	s0,8(sp)
 168              		.cfi_restore 8
 169              		.cfi_def_cfa 2, 16
 170 008c 13010101 		addi	sp,sp,16
 171              		.cfi_def_cfa_offset 0
 172 0090 67800000 		jr	ra
 173              		.cfi_endproc
 174              	.LFE41:
 176              		.align	2
 177              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 179              	_ZN5Riscv20handleSupervisorTrapEv:
 180              	.LFB42:
  53:src/Riscv.cpp **** 
  54:src/Riscv.cpp **** void Riscv::handleSupervisorTrap(){
 181              		.loc 1 54 35 is_stmt 1
 182              		.cfi_startproc
 183 0094 130101FC 		addi	sp,sp,-64
 184              		.cfi_def_cfa_offset 64
 185 0098 233C1102 		sd	ra,56(sp)
 186 009c 23388102 		sd	s0,48(sp)
 187 00a0 23349102 		sd	s1,40(sp)
 188 00a4 23302103 		sd	s2,32(sp)
 189              		.cfi_offset 1, -8
 190              		.cfi_offset 8, -16
 191              		.cfi_offset 9, -24
 192              		.cfi_offset 18, -32
 193 00a8 13040104 		addi	s0,sp,64
 194              		.cfi_def_cfa 8, 0
  55:src/Riscv.cpp ****     uint scause = r_scause();
 195              		.loc 1 55 5
 196              	.LBB21:
 197              	.LBB22:
 198              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccYXE29x.s 			page 6


  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
GAS LISTING /tmp/ccYXE29x.s 			page 7


  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
 199              		.loc 2 94 5
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 200              		.loc 2 95 5
 201              		.loc 2 95 72 is_stmt 0
 202              	#APP
 203              	# 95 "src/../h/Riscv.hpp" 1
  96              	    return scause;
 204              		csrr a5, scause
 205              	# 0 "" 2
 206              	#NO_APP
 207 00b0 2334F4FC 		sd	a5,-56(s0)
 208              		.loc 2 96 5 is_stmt 1
 209              		.loc 2 96 12 is_stmt 0
 210 00b4 833784FC 		ld	a5,-56(s0)
 211              	.LBE22:
 212              	.LBE21:
 213              		.loc 1 55 28
 214 00b8 9B870700 		sext.w	a5,a5
 215              	.LVL12:
  56:src/Riscv.cpp ****     uint64 a0reg;
 216              		.loc 1 56 5 is_stmt 1
  57:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r" (a0reg));
 217              		.loc 1 57 5
 218              		.loc 1 57 49 is_stmt 0
 219              	#APP
 220              	# 57 "src/Riscv.cpp" 1
  58              	
 221              		mv a3, a0
 222              	# 0 "" 2
 223              	.LVL13:
  59:src/Riscv.cpp ****     if (scause == 0x0000000000000008UL || scause==0x0000000000000009UL){
 224              		.loc 1 59 5 is_stmt 1
 225              	#NO_APP
 226              	.LBB23:
 227              		.loc 1 59 40 is_stmt 0
 228 00c0 9B8787FF 		addiw	a5,a5,-8
 229              	.LVL14:
GAS LISTING /tmp/ccYXE29x.s 			page 8


 230              		.loc 1 59 5
 231 00c4 13071000 		li	a4,1
 232 00c8 637EF700 		bleu	a5,a4,.L16
 233              	.LVL15:
 234              	.L11:
 235              	.LBE23:
  60:src/Riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  61:src/Riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  62:src/Riscv.cpp ****         uint64 sstatus = r_sstatus();
  63:src/Riscv.cpp **** 
  64:src/Riscv.cpp ****         if(a0reg==0x04){
  65:src/Riscv.cpp ****             _thread::timeSliceCounter = 0;
  66:src/Riscv.cpp ****             _thread::dispatch();
  67:src/Riscv.cpp ****         }
  68:src/Riscv.cpp ****         else {
  69:src/Riscv.cpp ****             //jump to syscall handler
  70:src/Riscv.cpp ****             syscallHandler();
  71:src/Riscv.cpp ****         }
  72:src/Riscv.cpp **** 
  73:src/Riscv.cpp ****         w_sstatus(sstatus);
  74:src/Riscv.cpp ****         w_sepc(sepc);
  75:src/Riscv.cpp **** 
  76:src/Riscv.cpp ****     }
  77:src/Riscv.cpp ****     else if (scause == 0x8000000000000001UL){
  78:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  79:src/Riscv.cpp **** 
  80:src/Riscv.cpp ****     }
  81:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  82:src/Riscv.cpp ****     {
  83:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  84:src/Riscv.cpp **** 
  85:src/Riscv.cpp ****     }
  86:src/Riscv.cpp ****     else{
  87:src/Riscv.cpp ****         // unexpected trap cause
  88:src/Riscv.cpp ****         //print(scause)
  89:src/Riscv.cpp ****         //print(sepc)
  90:src/Riscv.cpp ****         //print(stval) //trap value
  91:src/Riscv.cpp **** 
  92:src/Riscv.cpp ****     }
  93:src/Riscv.cpp **** 
  94:src/Riscv.cpp **** }
 236              		.loc 1 94 1
 237 00cc 83308103 		ld	ra,56(sp)
 238              		.cfi_remember_state
 239              		.cfi_restore 1
 240 00d0 03340103 		ld	s0,48(sp)
 241              		.cfi_restore 8
 242              		.cfi_def_cfa 2, 64
 243 00d4 83348102 		ld	s1,40(sp)
 244              		.cfi_restore 9
 245 00d8 03390102 		ld	s2,32(sp)
 246              		.cfi_restore 18
 247 00dc 13010104 		addi	sp,sp,64
 248              		.cfi_def_cfa_offset 0
 249 00e0 67800000 		jr	ra
 250              	.LVL16:
 251              	.L16:
GAS LISTING /tmp/ccYXE29x.s 			page 9


 252              		.cfi_restore_state
 253              	.LBB34:
 254              	.LBB24:
  61:src/Riscv.cpp ****         uint64 sstatus = r_sstatus();
 255              		.loc 1 61 9 is_stmt 1
 256              	.LBB25:
 257              	.LBB26:
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 258              		.loc 2 106 5
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 259              		.loc 2 107 5
 260              		.loc 2 107 64 is_stmt 0
 261              	#APP
 262              	# 107 "src/../h/Riscv.hpp" 1
 108              	    return sepc;
 263              		csrr a5, sepc
 264              	# 0 "" 2
 265              	#NO_APP
 266 00e8 233CF4FC 		sd	a5,-40(s0)
 267              		.loc 2 108 5 is_stmt 1
 268              		.loc 2 108 12 is_stmt 0
 269 00ec 833484FD 		ld	s1,-40(s0)
 270              	.LBE26:
 271              	.LBE25:
  61:src/Riscv.cpp ****         uint64 sstatus = r_sstatus();
 272              		.loc 1 61 34
 273 00f0 93844400 		addi	s1,s1,4
 274              	.LVL17:
  62:src/Riscv.cpp **** 
 275              		.loc 1 62 9 is_stmt 1
 276              	.LBB27:
 277              	.LBB28:
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/Riscv.hpp ****     return stvec;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/Riscv.hpp **** {
GAS LISTING /tmp/ccYXE29x.s 			page 10


 125:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     uint64 volatile stval;
 131:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 132:src/../h/Riscv.hpp ****     return stval;
 133:src/../h/Riscv.hpp **** }
 134:src/../h/Riscv.hpp **** 
 135:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 136:src/../h/Riscv.hpp **** {
 137:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 151:src/../h/Riscv.hpp **** {
 152:src/../h/Riscv.hpp ****     uint64 volatile sip;
 153:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 154:src/../h/Riscv.hpp ****     return sip;
 155:src/../h/Riscv.hpp **** }
 156:src/../h/Riscv.hpp **** 
 157:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 158:src/../h/Riscv.hpp **** {
 159:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** //mask set
 163:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 164:src/../h/Riscv.hpp **** {
 165:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/Riscv.hpp **** }
 167:src/../h/Riscv.hpp **** 
 168:src/../h/Riscv.hpp **** //mask clear
 169:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 170:src/../h/Riscv.hpp **** {
 171:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 172:src/../h/Riscv.hpp **** }
 173:src/../h/Riscv.hpp **** 
 174:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 175:src/../h/Riscv.hpp **** {
 176:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 278              		.loc 2 176 5
 177:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 279              		.loc 2 177 5
 280              		.loc 2 177 76 is_stmt 0
 281              	#APP
GAS LISTING /tmp/ccYXE29x.s 			page 11


 282              	# 177 "src/../h/Riscv.hpp" 1
 178              	    return sstatus;
 283              		csrr a5, sstatus
 284              	# 0 "" 2
 285              	#NO_APP
 286 00f8 2338F4FC 		sd	a5,-48(s0)
 287              		.loc 2 178 5 is_stmt 1
 288              		.loc 2 178 12 is_stmt 0
 289 00fc 033904FD 		ld	s2,-48(s0)
 290              	.LVL18:
 291              	.LBE28:
 292              	.LBE27:
  64:src/Riscv.cpp ****             _thread::timeSliceCounter = 0;
 293              		.loc 1 64 9 is_stmt 1
 294 0100 93074000 		li	a5,4
 295 0104 638CF600 		beq	a3,a5,.L17
  70:src/Riscv.cpp ****         }
 296              		.loc 1 70 13
  70:src/Riscv.cpp ****         }
 297              		.loc 1 70 27 is_stmt 0
 298 0108 97000000 		call	_ZN5Riscv14syscallHandlerEv
 298      E7800000 
 299              	.LVL19:
 300              	.L14:
  73:src/Riscv.cpp ****         w_sepc(sepc);
 301              		.loc 1 73 9 is_stmt 1
 302              	.LBB29:
 303              	.LBB30:
 179:src/../h/Riscv.hpp **** }
 180:src/../h/Riscv.hpp **** 
 181:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 182:src/../h/Riscv.hpp **** {
 183:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 304              		.loc 2 183 5
 305              		.loc 2 183 77 is_stmt 0
 306              	#APP
 307              	# 183 "src/../h/Riscv.hpp" 1
 184              	}
 308              		csrw sstatus, s2
 309              	# 0 "" 2
 310              	.LVL20:
 311              	#NO_APP
 312              	.LBE30:
 313              	.LBE29:
  74:src/Riscv.cpp **** 
 314              		.loc 1 74 9 is_stmt 1
 315              	.LBB31:
 316              	.LBB32:
 113:src/../h/Riscv.hpp **** }
 317              		.loc 2 113 5
 113:src/../h/Riscv.hpp **** }
 318              		.loc 2 113 65 is_stmt 0
 319              	#APP
 320              	# 113 "src/../h/Riscv.hpp" 1
 321              		csrw sepc, s1
 322              	# 0 "" 2
 323              	.LVL21:
GAS LISTING /tmp/ccYXE29x.s 			page 12


 324              	#NO_APP
 325              	.LBE32:
 326              	.LBE31:
 327              	.LBE24:
  77:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 328              		.loc 1 77 10 is_stmt 1
  81:src/Riscv.cpp ****     {
 329              		.loc 1 81 10
 330              	.LBE34:
 331              		.loc 1 94 1 is_stmt 0
 332 0118 6FF05FFB 		j	.L11
 333              	.LVL22:
 334              	.L17:
 335              	.LBB35:
 336              	.LBB33:
  65:src/Riscv.cpp ****             _thread::dispatch();
 337              		.loc 1 65 13 is_stmt 1
  65:src/Riscv.cpp ****             _thread::dispatch();
 338              		.loc 1 65 39 is_stmt 0
 339 011c 97070000 		la	a5,_ZN7_thread16timeSliceCounterE
 339      83B70700 
 340 0124 23B00700 		sd	zero,0(a5)
  66:src/Riscv.cpp ****         }
 341              		.loc 1 66 13 is_stmt 1
  66:src/Riscv.cpp ****         }
 342              		.loc 1 66 30 is_stmt 0
 343 0128 97000000 		call	_ZN7_thread8dispatchEv@plt
 343      E7800000 
 344              	.LVL23:
 345 0130 6FF01FFE 		j	.L14
 346              	.LBE33:
 347              	.LBE35:
 348              		.cfi_endproc
 349              	.LFE42:
 351              	.Letext0:
 352              		.file 3 "src/../h/../lib/hw.h"
 353              		.file 4 "src/../h/MemoryAllocator.hpp"
 354              		.file 5 "src/../h/_thread.hpp"
GAS LISTING /tmp/ccYXE29x.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccYXE29x.s:9      .text:0000000000000000 _ZN5Riscv14syscallHandlerEv
     /tmp/ccYXE29x.s:13     .text:0000000000000000 .L0 
     /tmp/ccYXE29x.s:14     .text:0000000000000000 .L0 
     /tmp/ccYXE29x.s:15     .text:0000000000000004 .L0 
     /tmp/ccYXE29x.s:18     .text:000000000000000c .L0 
     /tmp/ccYXE29x.s:19     .text:000000000000000c .L0 
     /tmp/ccYXE29x.s:21     .text:0000000000000010 .L0 
     /tmp/ccYXE29x.s:23     .text:0000000000000010 .L0 
     /tmp/ccYXE29x.s:24     .text:0000000000000010 .L0 
     /tmp/ccYXE29x.s:25     .text:0000000000000010 .L0 
     /tmp/ccYXE29x.s:26     .text:0000000000000010 .L0 
     /tmp/ccYXE29x.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:19     .text:0000000000000010 .L0 
     /tmp/ccYXE29x.s:36     .text:0000000000000014 .L0 
     /tmp/ccYXE29x.s:42     .text:000000000000001c .L0 
     /tmp/ccYXE29x.s:45     .text:0000000000000024 .L0 
     /tmp/ccYXE29x.s:52     .text:000000000000002c .L0 
     /tmp/ccYXE29x.s:53     .text:0000000000000030 .L0 
     /tmp/ccYXE29x.s:54     .text:0000000000000030 .L0 
     /tmp/ccYXE29x.s:56     .text:0000000000000034 .L0 
     /tmp/ccYXE29x.s:57     .text:0000000000000034 .L0 
     /tmp/ccYXE29x.s:59     .text:0000000000000038 .L0 
     /tmp/ccYXE29x.s:63     .text:000000000000003c .L0 
     /tmp/ccYXE29x.s:67     .text:000000000000003c .L0 
       src/Riscv.cpp:22     .text:000000000000003c .L0 
     /tmp/ccYXE29x.s:74     .text:0000000000000040 .L0 
     /tmp/ccYXE29x.s:76     .text:0000000000000040 .L0 
     /tmp/ccYXE29x.s:79     .text:0000000000000048 .L0 
       src/Riscv.cpp:26     .text:0000000000000048 .L0 
     /tmp/ccYXE29x.s:92     .text:0000000000000050 .L0 
       src/Riscv.cpp:29     .text:0000000000000050 .L0 
     /tmp/ccYXE29x.s:99     .text:0000000000000054 .L0 
     /tmp/ccYXE29x.s:101    .text:0000000000000054 .L0 
     /tmp/ccYXE29x.s:104    .text:000000000000005c .L0 
       src/Riscv.cpp:31     .text:000000000000005c .L0 
     /tmp/ccYXE29x.s:115    .text:0000000000000064 .L0 
       src/Riscv.cpp:34     .text:0000000000000064 .L0 
     /tmp/ccYXE29x.s:122    .text:0000000000000068 .L0 
       src/Riscv.cpp:35     .text:0000000000000068 .L0 
     /tmp/ccYXE29x.s:128    .text:000000000000006c .L0 
       src/Riscv.cpp:36     .text:000000000000006c .L0 
     /tmp/ccYXE29x.s:137    .text:0000000000000070 .L0 
     /tmp/ccYXE29x.s:138    .text:0000000000000074 .L0 
     /tmp/ccYXE29x.s:144    .text:0000000000000074 _ZN5Riscv10popSppSpieEv
     /tmp/ccYXE29x.s:147    .text:0000000000000074 .L0 
     /tmp/ccYXE29x.s:148    .text:0000000000000074 .L0 
     /tmp/ccYXE29x.s:149    .text:0000000000000078 .L0 
     /tmp/ccYXE29x.s:151    .text:000000000000007c .L0 
     /tmp/ccYXE29x.s:153    .text:0000000000000080 .L0 
     /tmp/ccYXE29x.s:155    .text:0000000000000080 .L0 
       src/Riscv.cpp:50     .text:0000000000000080 .L0 
     /tmp/ccYXE29x.s:161    .text:0000000000000084 .L0 
       src/Riscv.cpp:51     .text:0000000000000084 .L0 
     /tmp/ccYXE29x.s:167    .text:0000000000000088 .L0 
     /tmp/ccYXE29x.s:168    .text:000000000000008c .L0 
GAS LISTING /tmp/ccYXE29x.s 			page 14


     /tmp/ccYXE29x.s:169    .text:000000000000008c .L0 
     /tmp/ccYXE29x.s:171    .text:0000000000000090 .L0 
     /tmp/ccYXE29x.s:173    .text:0000000000000094 .L0 
     /tmp/ccYXE29x.s:179    .text:0000000000000094 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccYXE29x.s:182    .text:0000000000000094 .L0 
     /tmp/ccYXE29x.s:183    .text:0000000000000094 .L0 
     /tmp/ccYXE29x.s:184    .text:0000000000000098 .L0 
     /tmp/ccYXE29x.s:189    .text:00000000000000a8 .L0 
     /tmp/ccYXE29x.s:190    .text:00000000000000a8 .L0 
     /tmp/ccYXE29x.s:191    .text:00000000000000a8 .L0 
     /tmp/ccYXE29x.s:192    .text:00000000000000a8 .L0 
     /tmp/ccYXE29x.s:194    .text:00000000000000ac .L0 
     /tmp/ccYXE29x.s:199    .text:00000000000000ac .L0 
     /tmp/ccYXE29x.s:200    .text:00000000000000ac .L0 
     /tmp/ccYXE29x.s:201    .text:00000000000000ac .L0 
  src/../h/Riscv.hpp:95     .text:00000000000000ac .L0 
     /tmp/ccYXE29x.s:209    .text:00000000000000b4 .L0 
     /tmp/ccYXE29x.s:210    .text:00000000000000b4 .L0 
     /tmp/ccYXE29x.s:214    .text:00000000000000b8 .L0 
     /tmp/ccYXE29x.s:217    .text:00000000000000bc .L0 
     /tmp/ccYXE29x.s:218    .text:00000000000000bc .L0 
       src/Riscv.cpp:57     .text:00000000000000bc .L0 
     /tmp/ccYXE29x.s:227    .text:00000000000000c0 .L0 
     /tmp/ccYXE29x.s:228    .text:00000000000000c0 .L0 
     /tmp/ccYXE29x.s:231    .text:00000000000000c4 .L0 
     /tmp/ccYXE29x.s:237    .text:00000000000000cc .L0 
     /tmp/ccYXE29x.s:238    .text:00000000000000d0 .L0 
     /tmp/ccYXE29x.s:239    .text:00000000000000d0 .L0 
     /tmp/ccYXE29x.s:241    .text:00000000000000d4 .L0 
     /tmp/ccYXE29x.s:242    .text:00000000000000d4 .L0 
     /tmp/ccYXE29x.s:244    .text:00000000000000d8 .L0 
     /tmp/ccYXE29x.s:246    .text:00000000000000dc .L0 
     /tmp/ccYXE29x.s:248    .text:00000000000000e0 .L0 
     /tmp/ccYXE29x.s:252    .text:00000000000000e4 .L0 
     /tmp/ccYXE29x.s:258    .text:00000000000000e4 .L0 
     /tmp/ccYXE29x.s:259    .text:00000000000000e4 .L0 
     /tmp/ccYXE29x.s:260    .text:00000000000000e4 .L0 
  src/../h/Riscv.hpp:107    .text:00000000000000e4 .L0 
     /tmp/ccYXE29x.s:268    .text:00000000000000ec .L0 
     /tmp/ccYXE29x.s:269    .text:00000000000000ec .L0 
     /tmp/ccYXE29x.s:273    .text:00000000000000f0 .L0 
     /tmp/ccYXE29x.s:278    .text:00000000000000f4 .L0 
     /tmp/ccYXE29x.s:279    .text:00000000000000f4 .L0 
     /tmp/ccYXE29x.s:280    .text:00000000000000f4 .L0 
  src/../h/Riscv.hpp:177    .text:00000000000000f4 .L0 
     /tmp/ccYXE29x.s:288    .text:00000000000000fc .L0 
     /tmp/ccYXE29x.s:289    .text:00000000000000fc .L0 
     /tmp/ccYXE29x.s:294    .text:0000000000000100 .L0 
     /tmp/ccYXE29x.s:297    .text:0000000000000108 .L0 
     /tmp/ccYXE29x.s:298    .text:0000000000000108 .L0 
     /tmp/ccYXE29x.s:304    .text:0000000000000110 .L0 
     /tmp/ccYXE29x.s:305    .text:0000000000000110 .L0 
  src/../h/Riscv.hpp:183    .text:0000000000000110 .L0 
     /tmp/ccYXE29x.s:317    .text:0000000000000114 .L0 
     /tmp/ccYXE29x.s:318    .text:0000000000000114 .L0 
  src/../h/Riscv.hpp:113    .text:0000000000000114 .L0 
     /tmp/ccYXE29x.s:329    .text:0000000000000118 .L0 
GAS LISTING /tmp/ccYXE29x.s 			page 15


     /tmp/ccYXE29x.s:331    .text:0000000000000118 .L0 
     /tmp/ccYXE29x.s:332    .text:0000000000000118 .L0 
     /tmp/ccYXE29x.s:338    .text:000000000000011c .L0 
     /tmp/ccYXE29x.s:339    .text:000000000000011c .L0 
     /tmp/ccYXE29x.s:342    .text:0000000000000128 .L0 
     /tmp/ccYXE29x.s:343    .text:0000000000000128 .L0 
     /tmp/ccYXE29x.s:348    .text:0000000000000134 .L0 
     /tmp/ccYXE29x.s:355    .text:0000000000000134 .L0 
     /tmp/ccYXE29x.s:339    .text:000000000000011c .L0 
     /tmp/ccYXE29x.s:62     .text:000000000000003c .L6
     /tmp/ccYXE29x.s:88     .text:0000000000000050 .L7
     /tmp/ccYXE29x.s:113    .text:0000000000000064 .L8
     /tmp/ccYXE29x.s:48     .text:000000000000002c .L1
     /tmp/ccYXE29x.s:251    .text:00000000000000e4 .L16
     /tmp/ccYXE29x.s:334    .text:000000000000011c .L17
     /tmp/ccYXE29x.s:234    .text:00000000000000cc .L11
     /tmp/ccYXE29x.s:300    .text:0000000000000110 .L14
     /tmp/ccYXE29x.s:1380   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccYXE29x.s:2545   .debug_str:000000000000066c .LASF124
     /tmp/ccYXE29x.s:2447   .debug_str:0000000000000399 .LASF125
     /tmp/ccYXE29x.s:2341   .debug_str:0000000000000075 .LASF126
     /tmp/ccYXE29x.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccYXE29x.s:351    .text:0000000000000134 .Letext0
     /tmp/ccYXE29x.s:2325   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccYXE29x.s:2363   .debug_str:0000000000000143 .LASF3
     /tmp/ccYXE29x.s:2465   .debug_str:0000000000000405 .LASF0
     /tmp/ccYXE29x.s:2485   .debug_str:0000000000000473 .LASF1
     /tmp/ccYXE29x.s:2449   .debug_str:00000000000003a7 .LASF2
     /tmp/ccYXE29x.s:2417   .debug_str:00000000000002cf .LASF4
     /tmp/ccYXE29x.s:2517   .debug_str:0000000000000578 .LASF5
     /tmp/ccYXE29x.s:2347   .debug_str:00000000000000d0 .LASF6
     /tmp/ccYXE29x.s:2489   .debug_str:000000000000048d .LASF7
     /tmp/ccYXE29x.s:2463   .debug_str:00000000000003f2 .LASF8
     /tmp/ccYXE29x.s:2561   .debug_str:00000000000007ae .LASF9
     /tmp/ccYXE29x.s:2405   .debug_str:000000000000025c .LASF10
     /tmp/ccYXE29x.s:2497   .debug_str:00000000000004c1 .LASF11
     /tmp/ccYXE29x.s:2549   .debug_str:000000000000073c .LASF12
     /tmp/ccYXE29x.s:2349   .debug_str:00000000000000d7 .LASF13
     /tmp/ccYXE29x.s:2331   .debug_str:000000000000002b .LASF14
     /tmp/ccYXE29x.s:2359   .debug_str:0000000000000127 .LASF15
     /tmp/ccYXE29x.s:2509   .debug_str:0000000000000518 .LASF16
     /tmp/ccYXE29x.s:2369   .debug_str:0000000000000171 .LASF17
     /tmp/ccYXE29x.s:2481   .debug_str:0000000000000460 .LASF58
     /tmp/ccYXE29x.s:2507   .debug_str:000000000000050d .LASF50
     /tmp/ccYXE29x.s:2577   .debug_str:000000000000082f .LASF52
     /tmp/ccYXE29x.s:2333   .debug_str:000000000000003b .LASF18
     /tmp/ccYXE29x.s:2529   .debug_str:00000000000005cc .LASF20
     /tmp/ccYXE29x.s:2381   .debug_str:00000000000001ea .LASF22
     /tmp/ccYXE29x.s:2379   .debug_str:00000000000001d5 .LASF24
     /tmp/ccYXE29x.s:2521   .debug_str:0000000000000599 .LASF19
     /tmp/ccYXE29x.s:2501   .debug_str:00000000000004ed .LASF21
     /tmp/ccYXE29x.s:2543   .debug_str:0000000000000665 .LASF23
     /tmp/ccYXE29x.s:2533   .debug_str:00000000000005f9 .LASF25
     /tmp/ccYXE29x.s:2395   .debug_str:000000000000023f .LASF26
     /tmp/ccYXE29x.s:2371   .debug_str:0000000000000187 .LASF27
     /tmp/ccYXE29x.s:2327   .debug_str:0000000000000000 .LASF28
     /tmp/ccYXE29x.s:2411   .debug_str:000000000000029d .LASF29
GAS LISTING /tmp/ccYXE29x.s 			page 16


     /tmp/ccYXE29x.s:2385   .debug_str:00000000000001fb .LASF30
     /tmp/ccYXE29x.s:2351   .debug_str:00000000000000e7 .LASF31
     /tmp/ccYXE29x.s:2583   .debug_str:0000000000000863 .LASF32
     /tmp/ccYXE29x.s:2387   .debug_str:0000000000000203 .LASF33
     /tmp/ccYXE29x.s:2467   .debug_str:0000000000000412 .LASF34
     /tmp/ccYXE29x.s:2575   .debug_str:000000000000081c .LASF35
     /tmp/ccYXE29x.s:2343   .debug_str:00000000000000a5 .LASF36
     /tmp/ccYXE29x.s:2393   .debug_str:000000000000022c .LASF37
     /tmp/ccYXE29x.s:2403   .debug_str:0000000000000256 .LASF38
     /tmp/ccYXE29x.s:2541   .debug_str:0000000000000653 .LASF39
     /tmp/ccYXE29x.s:2433   .debug_str:0000000000000334 .LASF40
     /tmp/ccYXE29x.s:2587   .debug_str:000000000000087b .LASF41
     /tmp/ccYXE29x.s:2581   .debug_str:0000000000000858 .LASF42
     /tmp/ccYXE29x.s:2515   .debug_str:0000000000000560 .LASF43
     /tmp/ccYXE29x.s:2427   .debug_str:00000000000002ff .LASF44
     /tmp/ccYXE29x.s:2531   .debug_str:00000000000005e1 .LASF45
     /tmp/ccYXE29x.s:2357   .debug_str:000000000000011d .LASF46
     /tmp/ccYXE29x.s:2413   .debug_str:00000000000002b1 .LASF47
     /tmp/ccYXE29x.s:2455   .debug_str:00000000000003c7 .LASF48
     /tmp/ccYXE29x.s:2407   .debug_str:000000000000026a .LASF49
     /tmp/ccYXE29x.s:2523   .debug_str:00000000000005a0 .LASF51
     /tmp/ccYXE29x.s:2353   .debug_str:00000000000000fb .LASF53
     /tmp/ccYXE29x.s:2569   .debug_str:00000000000007de .LASF54
     /tmp/ccYXE29x.s:2431   .debug_str:0000000000000312 .LASF56
     /tmp/ccYXE29x.s:2519   .debug_str:000000000000058a .LASF55
     /tmp/ccYXE29x.s:2535   .debug_str:000000000000060c .LASF57
     /tmp/ccYXE29x.s:2445   .debug_str:0000000000000389 .LASF59
     /tmp/ccYXE29x.s:2547   .debug_str:0000000000000730 .LASF60
     /tmp/ccYXE29x.s:2345   .debug_str:00000000000000ac .LASF61
     /tmp/ccYXE29x.s:2557   .debug_str:0000000000000787 .LASF62
     /tmp/ccYXE29x.s:2329   .debug_str:0000000000000008 .LASF64
     /tmp/ccYXE29x.s:2567   .debug_str:00000000000007d4 .LASF63
     /tmp/ccYXE29x.s:2339   .debug_str:0000000000000053 .LASF65
     /tmp/ccYXE29x.s:2559   .debug_str:0000000000000792 .LASF67
     /tmp/ccYXE29x.s:2459   .debug_str:00000000000003d7 .LASF66
     /tmp/ccYXE29x.s:2571   .debug_str:00000000000007f3 .LASF68
     /tmp/ccYXE29x.s:2377   .debug_str:00000000000001bc .LASF106
     /tmp/ccYXE29x.s:2415   .debug_str:00000000000002c7 .LASF69
     /tmp/ccYXE29x.s:2551   .debug_str:000000000000074b .LASF127
     /tmp/ccYXE29x.s:2495   .debug_str:00000000000004bb .LASF70
     /tmp/ccYXE29x.s:2525   .debug_str:00000000000005af .LASF71
     /tmp/ccYXE29x.s:2419   .debug_str:00000000000002d6 .LASF72
     /tmp/ccYXE29x.s:2337   .debug_str:000000000000004b .LASF128
     /tmp/ccYXE29x.s:2555   .debug_str:000000000000077e .LASF73
     /tmp/ccYXE29x.s:2493   .debug_str:00000000000004ab .LASF74
     /tmp/ccYXE29x.s:2491   .debug_str:00000000000004a0 .LASF75
     /tmp/ccYXE29x.s:2373   .debug_str:000000000000019b .LASF76
     /tmp/ccYXE29x.s:2451   .debug_str:00000000000003b5 .LASF77
     /tmp/ccYXE29x.s:2365   .debug_str:0000000000000148 .LASF78
     /tmp/ccYXE29x.s:2443   .debug_str:000000000000037c .LASF79
     /tmp/ccYXE29x.s:2499   .debug_str:00000000000004d0 .LASF80
     /tmp/ccYXE29x.s:2483   .debug_str:0000000000000466 .LASF81
     /tmp/ccYXE29x.s:2511   .debug_str:000000000000052e .LASF82
     /tmp/ccYXE29x.s:2505   .debug_str:0000000000000508 .LASF129
     /tmp/ccYXE29x.s:2453   .debug_str:00000000000003c1 .LASF83
     /tmp/ccYXE29x.s:2539   .debug_str:000000000000063f .LASF84
     /tmp/ccYXE29x.s:2383   .debug_str:00000000000001f3 .LASF130
GAS LISTING /tmp/ccYXE29x.s 			page 17


     /tmp/ccYXE29x.s:2355   .debug_str:0000000000000117 .LASF85
     /tmp/ccYXE29x.s:2437   .debug_str:0000000000000348 .LASF86
     /tmp/ccYXE29x.s:2479   .debug_str:0000000000000453 .LASF87
     /tmp/ccYXE29x.s:2473   .debug_str:0000000000000428 .LASF88
     /tmp/ccYXE29x.s:2573   .debug_str:000000000000080f .LASF89
     /tmp/ccYXE29x.s:2513   .debug_str:0000000000000550 .LASF90
     /tmp/ccYXE29x.s:2585   .debug_str:000000000000086b .LASF91
     /tmp/ccYXE29x.s:2389   .debug_str:0000000000000217 .LASF92
     /tmp/ccYXE29x.s:2361   .debug_str:0000000000000133 .LASF93
     /tmp/ccYXE29x.s:2579   .debug_str:0000000000000847 .LASF94
     /tmp/ccYXE29x.s:2421   .debug_str:00000000000002de .LASF95
     /tmp/ccYXE29x.s:2461   .debug_str:00000000000003e1 .LASF96
     /tmp/ccYXE29x.s:2439   .debug_str:000000000000035c .LASF97
     /tmp/ccYXE29x.s:2425   .debug_str:00000000000002fa .LASF98
     /tmp/ccYXE29x.s:2471   .debug_str:0000000000000422 .LASF99
     /tmp/ccYXE29x.s:2429   .debug_str:000000000000030a .LASF100
     /tmp/ccYXE29x.s:2477   .debug_str:0000000000000449 .LASF101
     /tmp/ccYXE29x.s:2423   .debug_str:00000000000002f1 .LASF102
     /tmp/ccYXE29x.s:2435   .debug_str:000000000000033a .LASF103
     /tmp/ccYXE29x.s:2409   .debug_str:0000000000000280 .LASF104
     /tmp/ccYXE29x.s:2367   .debug_str:0000000000000163 .LASF105
     /tmp/ccYXE29x.s:2553   .debug_str:0000000000000752 .LASF107
     /tmp/ccYXE29x.s:2469   .debug_str:0000000000000419 .LASF108
     /tmp/ccYXE29x.s:2537   .debug_str:0000000000000628 .LASF109
     /tmp/ccYXE29x.s:2375   .debug_str:00000000000001b6 .LASF110
     /tmp/ccYXE29x.s:2527   .debug_str:00000000000005b8 .LASF111
     /tmp/ccYXE29x.s:2563   .debug_str:00000000000007be .LASF112
     /tmp/ccYXE29x.s:2441   .debug_str:0000000000000373 .LASF113
     /tmp/ccYXE29x.s:2487   .debug_str:0000000000000486 .LASF114
     /tmp/ccYXE29x.s:2391   .debug_str:0000000000000227 .LASF115
     /tmp/ccYXE29x.s:180    .text:0000000000000094 .LFB42
     /tmp/ccYXE29x.s:349    .text:0000000000000134 .LFE42
     /tmp/ccYXE29x.s:2335   .debug_str:0000000000000044 .LASF116
     /tmp/ccYXE29x.s:2224   .debug_loc:0000000000000000 .LLST4
     /tmp/ccYXE29x.s:2457   .debug_str:00000000000003d1 .LASF117
     /tmp/ccYXE29x.s:2231   .debug_loc:0000000000000023 .LLST5
     /tmp/ccYXE29x.s:2317   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccYXE29x.s:2475   .debug_str:0000000000000444 .LASF118
     /tmp/ccYXE29x.s:2503   .debug_str:0000000000000500 .LASF119
     /tmp/ccYXE29x.s:256    .text:00000000000000e4 .LBB25
     /tmp/ccYXE29x.s:271    .text:00000000000000f0 .LBE25
     /tmp/ccYXE29x.s:276    .text:00000000000000f4 .LBB27
     /tmp/ccYXE29x.s:292    .text:0000000000000100 .LBE27
     /tmp/ccYXE29x.s:302    .text:0000000000000110 .LBB29
     /tmp/ccYXE29x.s:313    .text:0000000000000114 .LBE29
     /tmp/ccYXE29x.s:2246   .debug_loc:000000000000006c .LLST6
     /tmp/ccYXE29x.s:315    .text:0000000000000114 .LBB31
     /tmp/ccYXE29x.s:326    .text:0000000000000118 .LBE31
     /tmp/ccYXE29x.s:2253   .debug_loc:000000000000008f .LLST7
     /tmp/ccYXE29x.s:299    .text:0000000000000110 .LVL19
     /tmp/ccYXE29x.s:344    .text:0000000000000130 .LVL23
     /tmp/ccYXE29x.s:196    .text:00000000000000ac .LBB21
     /tmp/ccYXE29x.s:212    .text:00000000000000b8 .LBE21
     /tmp/ccYXE29x.s:145    .text:0000000000000074 .LFB41
     /tmp/ccYXE29x.s:174    .text:0000000000000094 .LFE41
     /tmp/ccYXE29x.s:10     .text:0000000000000000 .LFB40
     /tmp/ccYXE29x.s:139    .text:0000000000000074 .LFE40
GAS LISTING /tmp/ccYXE29x.s 			page 18


     /tmp/ccYXE29x.s:2565   .debug_str:00000000000007cf .LASF120
     /tmp/ccYXE29x.s:2260   .debug_loc:00000000000000b2 .LLST0
     /tmp/ccYXE29x.s:2397   .debug_str:0000000000000247 .LASF121
     /tmp/ccYXE29x.s:2279   .debug_loc:000000000000010e .LLST1
     /tmp/ccYXE29x.s:2399   .debug_str:000000000000024c .LASF122
     /tmp/ccYXE29x.s:2401   .debug_str:0000000000000251 .LASF123
     /tmp/ccYXE29x.s:65     .text:000000000000003c .LBB17
     /tmp/ccYXE29x.s:85     .text:000000000000004c .LBE17
     /tmp/ccYXE29x.s:2290   .debug_loc:0000000000000144 .LLST3
     /tmp/ccYXE29x.s:77     .text:0000000000000048 .LVL4
     /tmp/ccYXE29x.s:90     .text:0000000000000050 .LBB16
     /tmp/ccYXE29x.s:110    .text:0000000000000060 .LBE16
     /tmp/ccYXE29x.s:2297   .debug_loc:0000000000000167 .LLST2
     /tmp/ccYXE29x.s:102    .text:000000000000005c .LVL7
     /tmp/ccYXE29x.s:215    .text:00000000000000bc .LVL12
     /tmp/ccYXE29x.s:229    .text:00000000000000c4 .LVL14
     /tmp/ccYXE29x.s:223    .text:00000000000000c0 .LVL13
     /tmp/ccYXE29x.s:233    .text:00000000000000cc .LVL15
     /tmp/ccYXE29x.s:250    .text:00000000000000e4 .LVL16
     /tmp/ccYXE29x.s:333    .text:000000000000011c .LVL22
     /tmp/ccYXE29x.s:310    .text:0000000000000114 .LVL20
     /tmp/ccYXE29x.s:323    .text:0000000000000118 .LVL21
     /tmp/ccYXE29x.s:32     .text:0000000000000014 .LVL0
     /tmp/ccYXE29x.s:47     .text:000000000000002c .LVL1
     /tmp/ccYXE29x.s:61     .text:000000000000003c .LVL2
     /tmp/ccYXE29x.s:87     .text:0000000000000050 .LVL5
     /tmp/ccYXE29x.s:112    .text:0000000000000064 .LVL8
     /tmp/ccYXE29x.s:120    .text:0000000000000068 .LVL9
     /tmp/ccYXE29x.s:72     .text:0000000000000040 .LVL3
     /tmp/ccYXE29x.s:97     .text:0000000000000054 .LVL6
     /tmp/ccYXE29x.s:356    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccYXE29x.s:254    .text:00000000000000e4 .LBB24
     /tmp/ccYXE29x.s:327    .text:0000000000000118 .LBE24
     /tmp/ccYXE29x.s:336    .text:000000000000011c .LBB33
     /tmp/ccYXE29x.s:346    .text:0000000000000134 .LBE33

UNDEFINED SYMBOLS
_ZN15MemoryAllocator10kmem_allocEm
_ZN15MemoryAllocator9kmem_freeEPv
_ZN7_thread16timeSliceCounterE
_ZN7_thread8dispatchEv
