GAS LISTING /tmp/ccPUgfOH.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator10kmem_allocEm
   9              	_ZN15MemoryAllocator10kmem_allocEm:
  10              	.LFB3:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** //
   2:src/MemoryAllocator.cpp **** // Created by os on 6/20/22.
   3:src/MemoryAllocator.cpp **** //
   4:src/MemoryAllocator.cpp **** 
   5:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.hpp"
   6:src/MemoryAllocator.cpp **** 
   7:src/MemoryAllocator.cpp **** 
   8:src/MemoryAllocator.cpp **** 
   9:src/MemoryAllocator.cpp **** 
  10:src/MemoryAllocator.cpp **** MemoryAllocator* MemoryAllocator::instance= nullptr;
  11:src/MemoryAllocator.cpp **** 
  12:src/MemoryAllocator.cpp **** 
  13:src/MemoryAllocator.cpp **** void* MemoryAllocator::kmem_alloc(size_t size){
  12              		.loc 1 13 47
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
  21 000c 93070500 		mv	a5,a0
  14:src/MemoryAllocator.cpp ****     MemoryAllocator* ma = getInstance();
  22              		.loc 1 14 5
  23              	.LBB13:
  24              	.LBB14:
  25              		.file 2 "src/../h/MemoryAllocator.hpp"
   1:src/../h/MemoryAllocator.hpp **** //
   2:src/../h/MemoryAllocator.hpp **** // Created by os on 6/20/22.
   3:src/../h/MemoryAllocator.hpp **** //
   4:src/../h/MemoryAllocator.hpp **** 
   5:src/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   6:src/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   7:src/../h/MemoryAllocator.hpp **** 
   8:src/../h/MemoryAllocator.hpp **** #include "../lib/mem.h"
   9:src/../h/MemoryAllocator.hpp **** #include "DoublyLinkedList.hpp"
  10:src/../h/MemoryAllocator.hpp **** #include "../lib/hw.h"
  11:src/../h/MemoryAllocator.hpp **** 
  12:src/../h/MemoryAllocator.hpp **** 
  13:src/../h/MemoryAllocator.hpp **** class MemoryAllocator {
  14:src/../h/MemoryAllocator.hpp **** public:
  15:src/../h/MemoryAllocator.hpp ****     typedef DoublyLinkedList<size_t>::Node FreeMem;
  16:src/../h/MemoryAllocator.hpp **** 
  17:src/../h/MemoryAllocator.hpp ****     static MemoryAllocator* getInstance(){
  18:src/../h/MemoryAllocator.hpp ****         if(instance == nullptr){
  26              		.loc 2 18 9
GAS LISTING /tmp/ccPUgfOH.s 			page 2


  27              		.loc 2 18 21 is_stmt 0
  28 0010 17070000 		ld	a4,.LANCHOR0
  28      03370700 
  29              		.loc 2 18 9
  30 0018 630C0706 		beqz	a4,.L18
  31              	.L2:
  19:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
  20:src/../h/MemoryAllocator.hpp **** 
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head=(FreeMem*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator));
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
  25:src/../h/MemoryAllocator.hpp **** 
  26:src/../h/MemoryAllocator.hpp ****             instance->pcbList.head= nullptr;
  27:src/../h/MemoryAllocator.hpp ****         }
  28:src/../h/MemoryAllocator.hpp ****         return instance;
  32              		.loc 2 28 9 is_stmt 1
  33              		.loc 2 28 16 is_stmt 0
  34 001c 97060000 		ld	a3,.LANCHOR0
  34      83B60600 
  35              	.LVL1:
  36              	.LBE14:
  37              	.LBE13:
  15:src/MemoryAllocator.cpp ****     for(FreeMem* cur = ma->freeList.head; cur!=nullptr; cur=cur->next){
  38              		.loc 1 15 5 is_stmt 1
  39              	.LBB16:
  40              		.loc 1 15 18 is_stmt 0
  41 0024 03B50600 		ld	a0,0(a3)
  42              	.LVL2:
  43              	.L5:
  44              		.loc 1 15 46 is_stmt 1 discriminator 1
  45 0028 630E0504 		beqz	a0,.L1
  46              	.LBB17:
  16:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
  47              		.loc 1 16 9
  48              		.loc 1 16 17 is_stmt 0
  49 002c 03370500 		ld	a4,0(a0)
  50              		.loc 1 16 9
  51 0030 6360F70C 		bltu	a4,a5,.L19
  17:src/MemoryAllocator.cpp ****         //Found
  18:src/MemoryAllocator.cpp **** 
  19:src/MemoryAllocator.cpp ****         if(cur->size-size<=sizeof(FreeMem)){
  52              		.loc 1 19 9 is_stmt 1
  53              	.LBB18:
  54              		.loc 1 19 21 is_stmt 0
  55 0034 3307F740 		sub	a4,a4,a5
  56              		.loc 1 19 9
  57 0038 13068001 		li	a2,24
  58 003c 6368E60C 		bgtu	a4,a2,.L6
  59              	.LBB19:
  20:src/MemoryAllocator.cpp ****             //No remaining fragment
  21:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = cur->next;
  60              		.loc 1 21 13 is_stmt 1
  61              		.loc 1 21 21 is_stmt 0
  62 0040 03370501 		ld	a4,16(a0)
  63              		.loc 1 21 13
  64 0044 630A070A 		beqz	a4,.L7
GAS LISTING /tmp/ccPUgfOH.s 			page 3


  65              		.loc 1 21 26 is_stmt 1 discriminator 1
  66              		.loc 1 21 49 is_stmt 0 discriminator 1
  67 0048 03368500 		ld	a2,8(a0)
  68              		.loc 1 21 42 discriminator 1
  69 004c 2334C700 		sd	a2,8(a4)
  70              	.L8:
  22:src/MemoryAllocator.cpp ****             else ma->freeList.head = cur->next;
  23:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
  71              		.loc 1 23 13 is_stmt 1
  72              		.loc 1 23 21 is_stmt 0
  73 0050 03378500 		ld	a4,8(a0)
  74              		.loc 1 23 13
  75 0054 63060700 		beqz	a4,.L9
  76              		.loc 1 23 26 is_stmt 1 discriminator 1
  77              		.loc 1 23 49 is_stmt 0 discriminator 1
  78 0058 03360501 		ld	a2,16(a0)
  79              		.loc 1 23 42 discriminator 1
  80 005c 2338C700 		sd	a2,16(a4)
  81              	.L9:
  24:src/MemoryAllocator.cpp **** 
  25:src/MemoryAllocator.cpp ****             //add process to the end of pcb list
  26:src/MemoryAllocator.cpp ****             FreeMem* proc = cur;
  82              		.loc 1 26 13 is_stmt 1
  83              	.LVL3:
  27:src/MemoryAllocator.cpp ****             proc->size=size;
  84              		.loc 1 27 13
  85              		.loc 1 27 23 is_stmt 0
  86 0060 2330F500 		sd	a5,0(a0)
  28:src/MemoryAllocator.cpp ****             proc->next= nullptr;
  87              		.loc 1 28 13 is_stmt 1
  88              		.loc 1 28 23 is_stmt 0
  89 0064 23340500 		sd	zero,8(a0)
  29:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
  90              		.loc 1 29 13 is_stmt 1
  91              	.LBB20:
  92              		.loc 1 29 29 is_stmt 0
  93 0068 83B70601 		ld	a5,16(a3)
  94              	.LVL4:
  95              		.loc 1 29 13
  96 006c 638C0708 		beqz	a5,.L20
  97              	.L10:
  98              	.LVL5:
  99              	.LBB21:
  30:src/MemoryAllocator.cpp ****             {
  31:src/MemoryAllocator.cpp ****                 ma->pcbList.head = cur;
  32:src/MemoryAllocator.cpp **** 
  33:src/MemoryAllocator.cpp ****             } else
  34:src/MemoryAllocator.cpp ****             {
  35:src/MemoryAllocator.cpp ****                 FreeMem* temp;
  36:src/MemoryAllocator.cpp ****                 for( temp = ma->pcbList.head; temp->next!=nullptr; temp=temp->next);
 100              		.loc 1 36 57 is_stmt 1 discriminator 3
 101 0070 13870700 		mv	a4,a5
 102              		.loc 1 36 53 is_stmt 0 discriminator 3
 103 0074 83B78700 		ld	a5,8(a5)
 104              	.LVL6:
 105              		.loc 1 36 57 discriminator 3
 106 0078 E39C07FE 		bnez	a5,.L10
GAS LISTING /tmp/ccPUgfOH.s 			page 4


  37:src/MemoryAllocator.cpp ****                 temp->next=cur;
 107              		.loc 1 37 17 is_stmt 1
 108              		.loc 1 37 27 is_stmt 0
 109 007c 2334A700 		sd	a0,8(a4)
 110              	.LVL7:
 111              	.L11:
 112              	.LBE21:
 113              	.LBE20:
  38:src/MemoryAllocator.cpp ****             }
  39:src/MemoryAllocator.cpp ****             void* address = (void*)((size_t)cur+ sizeof(FreeMem));
 114              		.loc 1 39 13 is_stmt 1
 115              		.loc 1 39 48 is_stmt 0
 116 0080 13058501 		addi	a0,a0,24
 117              	.LVL8:
  40:src/MemoryAllocator.cpp ****             return address;
 118              		.loc 1 40 13 is_stmt 1
 119              	.L1:
 120              	.LBE19:
 121              	.LBE18:
 122              	.LBE17:
 123              	.LBE16:
  41:src/MemoryAllocator.cpp **** 
  42:src/MemoryAllocator.cpp ****         }
  43:src/MemoryAllocator.cpp ****         else{
  44:src/MemoryAllocator.cpp ****             FreeMem * newfrgm = (FreeMem *)((size_t)cur + size + sizeof(FreeMem));
  45:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
  46:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
  47:src/MemoryAllocator.cpp ****             if(cur->next) cur->next->prev = newfrgm;
  48:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
  49:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
  50:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
  51:src/MemoryAllocator.cpp **** 
  52:src/MemoryAllocator.cpp ****             //add process to the end of pcb list
  53:src/MemoryAllocator.cpp ****             FreeMem* proc = cur;
  54:src/MemoryAllocator.cpp ****             proc->size=size;
  55:src/MemoryAllocator.cpp ****             proc->next= nullptr;
  56:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
  57:src/MemoryAllocator.cpp ****             {
  58:src/MemoryAllocator.cpp ****                 ma->pcbList.head = cur;
  59:src/MemoryAllocator.cpp **** 
  60:src/MemoryAllocator.cpp ****             } else
  61:src/MemoryAllocator.cpp ****             {
  62:src/MemoryAllocator.cpp ****                 FreeMem* temp;
  63:src/MemoryAllocator.cpp ****                 for( temp = ma->pcbList.head; temp->next!=nullptr; temp=temp->next);
  64:src/MemoryAllocator.cpp ****                 temp->next=cur;
  65:src/MemoryAllocator.cpp ****             }
  66:src/MemoryAllocator.cpp **** 
  67:src/MemoryAllocator.cpp ****             void* address = (void*)((size_t)cur+ sizeof(FreeMem));
  68:src/MemoryAllocator.cpp ****             return address;
  69:src/MemoryAllocator.cpp ****         }
  70:src/MemoryAllocator.cpp ****     }
  71:src/MemoryAllocator.cpp ****     return nullptr;
  72:src/MemoryAllocator.cpp **** 
  73:src/MemoryAllocator.cpp ****     //initialize address at HEAP_START_ADRESS at the beginning
  74:src/MemoryAllocator.cpp ****     //ubaciti prvi element u listu i postaviti mu adresu na heap start adress + sizeof(freeMem)
  75:src/MemoryAllocator.cpp **** }
 124              		.loc 1 75 1 is_stmt 0
GAS LISTING /tmp/ccPUgfOH.s 			page 5


 125 0084 03348100 		ld	s0,8(sp)
 126              		.cfi_remember_state
 127              		.cfi_restore 8
 128              		.cfi_def_cfa 2, 16
 129 0088 13010101 		addi	sp,sp,16
 130              		.cfi_def_cfa_offset 0
 131 008c 67800000 		jr	ra
 132              	.LVL9:
 133              	.L18:
 134              		.cfi_restore_state
 135              	.LBB31:
 136              	.LBB15:
  19:src/../h/MemoryAllocator.hpp **** 
 137              		.loc 2 19 13 is_stmt 1
  19:src/../h/MemoryAllocator.hpp **** 
 138              		.loc 2 19 22 is_stmt 0
 139 0090 17060000 		la	a2,HEAP_START_ADDR
 139      03360600 
 140 0098 03370600 		ld	a4,0(a2)
 141 009c 97060000 		lla	a3,.LANCHOR0
 141      93860600 
 142 00a4 23B0E600 		sd	a4,0(a3)
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 143              		.loc 2 21 13 is_stmt 1
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 144              		.loc 2 21 71 is_stmt 0
 145 00a8 93050702 		addi	a1,a4,32
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 146              		.loc 2 21 36
 147 00ac 2330B700 		sd	a1,0(a4)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 148              		.loc 2 22 13 is_stmt 1
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 149              		.loc 2 22 32 is_stmt 0
 150 00b0 03B70600 		ld	a4,0(a3)
 151 00b4 83350700 		ld	a1,0(a4)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 152              		.loc 2 22 66
 153 00b8 17070000 		la	a4,HEAP_END_ADDR
 153      03370700 
 154 00c0 03370700 		ld	a4,0(a4)
 155 00c4 03360600 		ld	a2,0(a2)
 156 00c8 3307C740 		sub	a4,a4,a2
 157 00cc 130707FE 		addi	a4,a4,-32
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 158              		.loc 2 22 43
 159 00d0 23B0E500 		sd	a4,0(a1)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 160              		.loc 2 23 13 is_stmt 1
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 161              		.loc 2 23 32 is_stmt 0
 162 00d4 03B70600 		ld	a4,0(a3)
 163 00d8 83360700 		ld	a3,0(a4)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 164              		.loc 2 23 42
 165 00dc 23B40600 		sd	zero,8(a3)
  24:src/../h/MemoryAllocator.hpp **** 
GAS LISTING /tmp/ccPUgfOH.s 			page 6


 166              		.loc 2 24 13 is_stmt 1
  24:src/../h/MemoryAllocator.hpp **** 
 167              		.loc 2 24 32 is_stmt 0
 168 00e0 83360700 		ld	a3,0(a4)
  24:src/../h/MemoryAllocator.hpp **** 
 169              		.loc 2 24 42
 170 00e4 23B80600 		sd	zero,16(a3)
  26:src/../h/MemoryAllocator.hpp ****         }
 171              		.loc 2 26 13 is_stmt 1
  26:src/../h/MemoryAllocator.hpp ****         }
 172              		.loc 2 26 35 is_stmt 0
 173 00e8 23380700 		sd	zero,16(a4)
 174 00ec 6FF01FF3 		j	.L2
 175              	.LVL10:
 176              	.L19:
 177              	.LBE15:
 178              	.LBE31:
 179              	.LBB32:
 180              	.LBB29:
  16:src/MemoryAllocator.cpp ****         //Found
 181              		.loc 1 16 28 is_stmt 1 discriminator 1
 182              	.LBE29:
  15:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
 183              		.loc 1 15 5 discriminator 1
  15:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
 184              		.loc 1 15 60 is_stmt 0 discriminator 1
 185 00f0 03358500 		ld	a0,8(a0)
 186              	.LVL11:
  15:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
 187              		.loc 1 15 5 discriminator 1
 188 00f4 6FF05FF3 		j	.L5
 189              	.L7:
 190              	.LBB30:
 191              	.LBB28:
 192              	.LBB23:
  22:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
 193              		.loc 1 22 18 is_stmt 1
  22:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
 194              		.loc 1 22 43 is_stmt 0
 195 00f8 03378500 		ld	a4,8(a0)
  22:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
 196              		.loc 1 22 36
 197 00fc 23B0E600 		sd	a4,0(a3)
 198 0100 6FF01FF5 		j	.L8
 199              	.LVL12:
 200              	.L20:
 201              	.LBB22:
  31:src/MemoryAllocator.cpp **** 
 202              		.loc 1 31 17 is_stmt 1
  31:src/MemoryAllocator.cpp **** 
 203              		.loc 1 31 34 is_stmt 0
 204 0104 23B8A600 		sd	a0,16(a3)
 205              	.LVL13:
 206 0108 6FF09FF7 		j	.L11
 207              	.LVL14:
 208              	.L6:
 209              	.LBE22:
GAS LISTING /tmp/ccPUgfOH.s 			page 7


 210              	.LBE23:
 211              	.LBB24:
  44:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
 212              		.loc 1 44 13 is_stmt 1
  44:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
 213              		.loc 1 44 57 is_stmt 0
 214 010c 13080500 		mv	a6,a0
 215 0110 3306F500 		add	a2,a0,a5
  44:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
 216              		.loc 1 44 64
 217 0114 13078601 		addi	a4,a2,24
 218              	.LVL15:
  45:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 219              		.loc 1 45 13 is_stmt 1
  45:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 220              		.loc 1 45 21 is_stmt 0
 221 0118 83350501 		ld	a1,16(a0)
  45:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 222              		.loc 1 45 13
 223 011c 638C0504 		beqz	a1,.L12
  45:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 224              		.loc 1 45 26 is_stmt 1 discriminator 1
  45:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 225              		.loc 1 45 42 is_stmt 0 discriminator 1
 226 0120 23B4E500 		sd	a4,8(a1)
 227              	.L13:
  47:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 228              		.loc 1 47 13 is_stmt 1
  47:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 229              		.loc 1 47 21 is_stmt 0
 230 0124 83358500 		ld	a1,8(a0)
  47:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 231              		.loc 1 47 13
 232 0128 63840500 		beqz	a1,.L14
  47:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 233              		.loc 1 47 27 is_stmt 1 discriminator 1
  47:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 234              		.loc 1 47 43 is_stmt 0 discriminator 1
 235 012c 23B8E500 		sd	a4,16(a1)
 236              	.L14:
  48:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
 237              		.loc 1 48 13 is_stmt 1
  48:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
 238              		.loc 1 48 34 is_stmt 0
 239 0130 83350501 		ld	a1,16(a0)
  48:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
 240              		.loc 1 48 27
 241 0134 2338B700 		sd	a1,16(a4)
  49:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
 242              		.loc 1 49 13 is_stmt 1
  49:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
 243              		.loc 1 49 32 is_stmt 0
 244 0138 83358500 		ld	a1,8(a0)
  49:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
 245              		.loc 1 49 26
 246 013c 2334B700 		sd	a1,8(a4)
  50:src/MemoryAllocator.cpp **** 
GAS LISTING /tmp/ccPUgfOH.s 			page 8


 247              		.loc 1 50 13 is_stmt 1
  50:src/MemoryAllocator.cpp **** 
 248              		.loc 1 50 32 is_stmt 0
 249 0140 03370500 		ld	a4,0(a0)
 250              	.LVL16:
  50:src/MemoryAllocator.cpp **** 
 251              		.loc 1 50 36
 252 0144 3307F740 		sub	a4,a4,a5
  50:src/MemoryAllocator.cpp **** 
 253              		.loc 1 50 26
 254 0148 233CE600 		sd	a4,24(a2)
  53:src/MemoryAllocator.cpp ****             proc->size=size;
 255              		.loc 1 53 13 is_stmt 1
 256              	.LVL17:
  54:src/MemoryAllocator.cpp ****             proc->next= nullptr;
 257              		.loc 1 54 13
  54:src/MemoryAllocator.cpp ****             proc->next= nullptr;
 258              		.loc 1 54 23 is_stmt 0
 259 014c 2330F500 		sd	a5,0(a0)
  55:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
 260              		.loc 1 55 13 is_stmt 1
  55:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
 261              		.loc 1 55 23 is_stmt 0
 262 0150 23340500 		sd	zero,8(a0)
  56:src/MemoryAllocator.cpp ****             {
 263              		.loc 1 56 13 is_stmt 1
 264              	.LBB25:
  56:src/MemoryAllocator.cpp ****             {
 265              		.loc 1 56 29 is_stmt 0
 266 0154 83B70601 		ld	a5,16(a3)
 267              	.LVL18:
  56:src/MemoryAllocator.cpp ****             {
 268              		.loc 1 56 13
 269 0158 63820702 		beqz	a5,.L21
 270              	.L15:
 271              	.LVL19:
 272              	.LBB26:
  63:src/MemoryAllocator.cpp ****                 temp->next=cur;
 273              		.loc 1 63 57 is_stmt 1 discriminator 3
 274 015c 13870700 		mv	a4,a5
  63:src/MemoryAllocator.cpp ****                 temp->next=cur;
 275              		.loc 1 63 53 is_stmt 0 discriminator 3
 276 0160 83B78700 		ld	a5,8(a5)
 277              	.LVL20:
  63:src/MemoryAllocator.cpp ****                 temp->next=cur;
 278              		.loc 1 63 57 discriminator 3
 279 0164 E39C07FE 		bnez	a5,.L15
  64:src/MemoryAllocator.cpp ****             }
 280              		.loc 1 64 17 is_stmt 1
  64:src/MemoryAllocator.cpp ****             }
 281              		.loc 1 64 27 is_stmt 0
 282 0168 2334A700 		sd	a0,8(a4)
 283              	.LVL21:
 284              	.L16:
 285              	.LBE26:
 286              	.LBE25:
  67:src/MemoryAllocator.cpp ****             return address;
GAS LISTING /tmp/ccPUgfOH.s 			page 9


 287              		.loc 1 67 13 is_stmt 1
  67:src/MemoryAllocator.cpp ****             return address;
 288              		.loc 1 67 48 is_stmt 0
 289 016c 13058801 		addi	a0,a6,24
 290              	.LVL22:
  68:src/MemoryAllocator.cpp ****         }
 291              		.loc 1 68 13 is_stmt 1
  68:src/MemoryAllocator.cpp ****         }
 292              		.loc 1 68 20 is_stmt 0
 293 0170 6FF05FF1 		j	.L1
 294              	.LVL23:
 295              	.L12:
  46:src/MemoryAllocator.cpp ****             if(cur->next) cur->next->prev = newfrgm;
 296              		.loc 1 46 18 is_stmt 1
  46:src/MemoryAllocator.cpp ****             if(cur->next) cur->next->prev = newfrgm;
 297              		.loc 1 46 36 is_stmt 0
 298 0174 23B0E600 		sd	a4,0(a3)
 299 0178 6FF0DFFA 		j	.L13
 300              	.LVL24:
 301              	.L21:
 302              	.LBB27:
  58:src/MemoryAllocator.cpp **** 
 303              		.loc 1 58 17 is_stmt 1
  58:src/MemoryAllocator.cpp **** 
 304              		.loc 1 58 34 is_stmt 0
 305 017c 23B8A600 		sd	a0,16(a3)
 306              	.LVL25:
 307 0180 6FF0DFFE 		j	.L16
 308              	.LBE27:
 309              	.LBE24:
 310              	.LBE28:
 311              	.LBE30:
 312              	.LBE32:
 313              		.cfi_endproc
 314              	.LFE3:
 316              		.align	2
 317              		.globl	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
 319              	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE:
 320              	.LFB4:
  76:src/MemoryAllocator.cpp **** 
  77:src/MemoryAllocator.cpp **** //try to join cur with cur->next segment
  78:src/MemoryAllocator.cpp **** int MemoryAllocator::tryToJoin(FreeMem *cur) {
 321              		.loc 1 78 46 is_stmt 1
 322              		.cfi_startproc
 323              	.LVL26:
 324 0184 130101FF 		addi	sp,sp,-16
 325              		.cfi_def_cfa_offset 16
 326 0188 23348100 		sd	s0,8(sp)
 327              		.cfi_offset 8, -8
 328 018c 13040101 		addi	s0,sp,16
 329              		.cfi_def_cfa 8, 0
  79:src/MemoryAllocator.cpp ****     if(cur== nullptr)return 0;
 330              		.loc 1 79 5
 331 0190 630A0504 		beqz	a0,.L25
  80:src/MemoryAllocator.cpp ****     if(cur->next && (size_t)cur+cur->size+ sizeof(FreeMem)==(size_t)(cur->next)){
 332              		.loc 1 80 5
 333              		.loc 1 80 13 is_stmt 0
GAS LISTING /tmp/ccPUgfOH.s 			page 10


 334 0194 83378500 		ld	a5,8(a0)
 335              		.loc 1 80 5
 336 0198 638A0704 		beqz	a5,.L26
 337              		.loc 1 80 38 discriminator 1
 338 019c 83360500 		ld	a3,0(a0)
 339              		.loc 1 80 32 discriminator 1
 340 01a0 3307D500 		add	a4,a0,a3
 341              		.loc 1 80 42 discriminator 1
 342 01a4 13078701 		addi	a4,a4,24
 343              		.loc 1 80 18 discriminator 1
 344 01a8 630AF700 		beq	a4,a5,.L29
  81:src/MemoryAllocator.cpp ****         //remove the cur->next segment
  82:src/MemoryAllocator.cpp ****         cur->size+=cur->next->size+ sizeof(FreeMem);
  83:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
  84:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
  85:src/MemoryAllocator.cpp ****         return 1;
  86:src/MemoryAllocator.cpp ****     }
  87:src/MemoryAllocator.cpp ****     else return 0;
 345              		.loc 1 87 17
 346 01ac 13050000 		li	a0,0
 347              	.LVL27:
 348              	.L23:
  88:src/MemoryAllocator.cpp **** }
 349              		.loc 1 88 1
 350 01b0 03348100 		ld	s0,8(sp)
 351              		.cfi_remember_state
 352              		.cfi_restore 8
 353              		.cfi_def_cfa 2, 16
 354 01b4 13010101 		addi	sp,sp,16
 355              		.cfi_def_cfa_offset 0
 356 01b8 67800000 		jr	ra
 357              	.LVL28:
 358              	.L29:
 359              		.cfi_restore_state
  82:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
 360              		.loc 1 82 9 is_stmt 1
  82:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
 361              		.loc 1 82 31 is_stmt 0
 362 01bc 03B70700 		ld	a4,0(a5)
  82:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
 363              		.loc 1 82 18
 364 01c0 B386E600 		add	a3,a3,a4
 365 01c4 93868601 		addi	a3,a3,24
 366 01c8 2330D500 		sd	a3,0(a0)
  83:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
 367              		.loc 1 83 9 is_stmt 1
  83:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
 368              		.loc 1 83 32 is_stmt 0
 369 01cc 83B78700 		ld	a5,8(a5)
  83:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
 370              		.loc 1 83 19
 371 01d0 2334F500 		sd	a5,8(a0)
  84:src/MemoryAllocator.cpp ****         return 1;
 372              		.loc 1 84 9 is_stmt 1
 373 01d4 63840700 		beqz	a5,.L24
  84:src/MemoryAllocator.cpp ****         return 1;
 374              		.loc 1 84 22 discriminator 1
GAS LISTING /tmp/ccPUgfOH.s 			page 11


  84:src/MemoryAllocator.cpp ****         return 1;
 375              		.loc 1 84 37 is_stmt 0 discriminator 1
 376 01d8 23B8A700 		sd	a0,16(a5)
 377              	.L24:
  85:src/MemoryAllocator.cpp ****     }
 378              		.loc 1 85 9 is_stmt 1
  85:src/MemoryAllocator.cpp ****     }
 379              		.loc 1 85 16 is_stmt 0
 380 01dc 13051000 		li	a0,1
 381              	.LVL29:
 382 01e0 6FF01FFD 		j	.L23
 383              	.LVL30:
 384              	.L25:
  79:src/MemoryAllocator.cpp ****     if(cur->next && (size_t)cur+cur->size+ sizeof(FreeMem)==(size_t)(cur->next)){
 385              		.loc 1 79 29
 386 01e4 13050000 		li	a0,0
 387              	.LVL31:
 388 01e8 6FF09FFC 		j	.L23
 389              	.LVL32:
 390              	.L26:
  87:src/MemoryAllocator.cpp **** }
 391              		.loc 1 87 17
 392 01ec 13050000 		li	a0,0
 393              	.LVL33:
 394 01f0 6FF01FFC 		j	.L23
 395              		.cfi_endproc
 396              	.LFE4:
 398              		.align	2
 399              		.globl	_ZN15MemoryAllocator9kmem_freeEPv
 401              	_ZN15MemoryAllocator9kmem_freeEPv:
 402              	.LFB5:
  89:src/MemoryAllocator.cpp **** 
  90:src/MemoryAllocator.cpp **** int MemoryAllocator::kmem_free(void* addr){
 403              		.loc 1 90 43 is_stmt 1
 404              		.cfi_startproc
 405              	.LVL34:
 406 01f4 93060500 		mv	a3,a0
  91:src/MemoryAllocator.cpp ****     //find size of the process for deallocation
  92:src/MemoryAllocator.cpp ****     MemoryAllocator* ma = getInstance();
 407              		.loc 1 92 5
 408              	.LBB36:
 409              	.LBB37:
  18:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
 410              		.loc 2 18 9
  18:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
 411              		.loc 2 18 21 is_stmt 0
 412 01f8 97070000 		ld	a5,.LANCHOR0
 412      83B70700 
  18:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
 413              		.loc 2 18 9
 414 0200 63860702 		beqz	a5,.L51
 415              	.L31:
 416              		.loc 2 28 9 is_stmt 1
 417              		.loc 2 28 16 is_stmt 0
 418 0204 97050000 		ld	a1,.LANCHOR0
 418      83B50500 
 419              	.LVL35:
GAS LISTING /tmp/ccPUgfOH.s 			page 12


 420              	.LBE37:
 421              	.LBE36:
  93:src/MemoryAllocator.cpp **** 
  94:src/MemoryAllocator.cpp ****     size_t size = -1;
 422              		.loc 1 94 5 is_stmt 1
  95:src/MemoryAllocator.cpp ****     bool found = false;
 423              		.loc 1 95 5
  96:src/MemoryAllocator.cpp ****     FreeMem* prev=nullptr;
 424              		.loc 1 96 5
  97:src/MemoryAllocator.cpp ****     for( FreeMem *temp = ma->pcbList.head; temp!=nullptr; temp=temp->next){
 425              		.loc 1 97 5
 426              	.LBB39:
 427              		.loc 1 97 19 is_stmt 0
 428 020c 83B70501 		ld	a5,16(a1)
 429              	.LVL36:
 430              	.LBE39:
  96:src/MemoryAllocator.cpp ****     FreeMem* prev=nullptr;
 431              		.loc 1 96 14
 432 0210 13060000 		li	a2,0
 433              	.LVL37:
 434              	.L36:
 435              	.LBB40:
 436              		.loc 1 97 48 is_stmt 1 discriminator 1
 437 0214 63860714 		beqz	a5,.L44
  98:src/MemoryAllocator.cpp ****         if((size_t)temp+ sizeof(FreeMem)==(size_t)addr) {
 438              		.loc 1 98 9
 439              		.loc 1 98 24 is_stmt 0
 440 0218 13878701 		addi	a4,a5,24
 441              		.loc 1 98 9
 442 021c 6308D706 		beq	a4,a3,.L52
  99:src/MemoryAllocator.cpp ****             size = temp->size;
 100:src/MemoryAllocator.cpp ****             //delete pointer from pcb list
 101:src/MemoryAllocator.cpp ****             if(prev== nullptr) {
 102:src/MemoryAllocator.cpp ****                 //if its first
 103:src/MemoryAllocator.cpp ****                 ma->pcbList.head = temp->next;
 104:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 105:src/MemoryAllocator.cpp ****                 found=true;
 106:src/MemoryAllocator.cpp ****                 break;
 107:src/MemoryAllocator.cpp ****             }
 108:src/MemoryAllocator.cpp ****             else {
 109:src/MemoryAllocator.cpp ****                 prev->next = temp->next;
 110:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 111:src/MemoryAllocator.cpp ****                 found=true;
 112:src/MemoryAllocator.cpp ****                 break;
 113:src/MemoryAllocator.cpp ****             }
 114:src/MemoryAllocator.cpp ****         }
 115:src/MemoryAllocator.cpp ****         prev = temp;
 443              		.loc 1 115 9 is_stmt 1 discriminator 2
 444              	.LVL38:
  97:src/MemoryAllocator.cpp ****         if((size_t)temp+ sizeof(FreeMem)==(size_t)addr) {
 445              		.loc 1 97 5 discriminator 2
 446              		.loc 1 115 14 is_stmt 0 discriminator 2
 447 0220 13860700 		mv	a2,a5
  97:src/MemoryAllocator.cpp ****         if((size_t)temp+ sizeof(FreeMem)==(size_t)addr) {
 448              		.loc 1 97 63 discriminator 2
 449 0224 83B78700 		ld	a5,8(a5)
 450              	.LVL39:
GAS LISTING /tmp/ccPUgfOH.s 			page 13


  97:src/MemoryAllocator.cpp ****         if((size_t)temp+ sizeof(FreeMem)==(size_t)addr) {
 451              		.loc 1 97 5 discriminator 2
 452 0228 6FF0DFFE 		j	.L36
 453              	.LVL40:
 454              	.L51:
 455              	.LBE40:
 456              	.LBB41:
 457              	.LBB38:
  19:src/../h/MemoryAllocator.hpp **** 
 458              		.loc 2 19 13 is_stmt 1
  19:src/../h/MemoryAllocator.hpp **** 
 459              		.loc 2 19 22 is_stmt 0
 460 022c 17060000 		la	a2,HEAP_START_ADDR
 460      03360600 
 461 0234 83370600 		ld	a5,0(a2)
 462 0238 17070000 		lla	a4,.LANCHOR0
 462      13070700 
 463 0240 2330F700 		sd	a5,0(a4)
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 464              		.loc 2 21 13 is_stmt 1
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 465              		.loc 2 21 71 is_stmt 0
 466 0244 93850702 		addi	a1,a5,32
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 467              		.loc 2 21 36
 468 0248 23B0B700 		sd	a1,0(a5)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 469              		.loc 2 22 13 is_stmt 1
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 470              		.loc 2 22 32 is_stmt 0
 471 024c 83370700 		ld	a5,0(a4)
 472 0250 83B50700 		ld	a1,0(a5)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 473              		.loc 2 22 66
 474 0254 97070000 		la	a5,HEAP_END_ADDR
 474      83B70700 
 475 025c 83B70700 		ld	a5,0(a5)
 476 0260 03360600 		ld	a2,0(a2)
 477 0264 B387C740 		sub	a5,a5,a2
 478 0268 938707FE 		addi	a5,a5,-32
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 479              		.loc 2 22 43
 480 026c 23B0F500 		sd	a5,0(a1)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 481              		.loc 2 23 13 is_stmt 1
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 482              		.loc 2 23 32 is_stmt 0
 483 0270 83370700 		ld	a5,0(a4)
 484 0274 03B70700 		ld	a4,0(a5)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 485              		.loc 2 23 42
 486 0278 23340700 		sd	zero,8(a4)
  24:src/../h/MemoryAllocator.hpp **** 
 487              		.loc 2 24 13 is_stmt 1
  24:src/../h/MemoryAllocator.hpp **** 
 488              		.loc 2 24 32 is_stmt 0
 489 027c 03B70700 		ld	a4,0(a5)
GAS LISTING /tmp/ccPUgfOH.s 			page 14


  24:src/../h/MemoryAllocator.hpp **** 
 490              		.loc 2 24 42
 491 0280 23380700 		sd	zero,16(a4)
  26:src/../h/MemoryAllocator.hpp ****         }
 492              		.loc 2 26 13 is_stmt 1
  26:src/../h/MemoryAllocator.hpp ****         }
 493              		.loc 2 26 35 is_stmt 0
 494 0284 23B80700 		sd	zero,16(a5)
 495 0288 6FF0DFF7 		j	.L31
 496              	.LVL41:
 497              	.L52:
 498              	.LBE38:
 499              	.LBE41:
  90:src/MemoryAllocator.cpp ****     //find size of the process for deallocation
 500              		.loc 1 90 43
 501 028c 130101FE 		addi	sp,sp,-32
 502              		.cfi_def_cfa_offset 32
 503 0290 233C1100 		sd	ra,24(sp)
 504 0294 23388100 		sd	s0,16(sp)
 505 0298 23349100 		sd	s1,8(sp)
 506              		.cfi_offset 1, -8
 507              		.cfi_offset 8, -16
 508              		.cfi_offset 9, -24
 509 029c 13040102 		addi	s0,sp,32
 510              		.cfi_def_cfa 8, 0
 511              	.LBB42:
  99:src/MemoryAllocator.cpp ****             //delete pointer from pcb list
 512              		.loc 1 99 13 is_stmt 1
  99:src/MemoryAllocator.cpp ****             //delete pointer from pcb list
 513              		.loc 1 99 18 is_stmt 0
 514 02a0 03B80700 		ld	a6,0(a5)
 515              	.LVL42:
 101:src/MemoryAllocator.cpp ****                 //if its first
 516              		.loc 1 101 13 is_stmt 1
 517 02a4 630A0602 		beqz	a2,.L53
 109:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 518              		.loc 1 109 17
 109:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 519              		.loc 1 109 36 is_stmt 0
 520 02a8 03B78700 		ld	a4,8(a5)
 109:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 521              		.loc 1 109 28
 522 02ac 2334E600 		sd	a4,8(a2)
 110:src/MemoryAllocator.cpp ****                 found=true;
 523              		.loc 1 110 17 is_stmt 1
 110:src/MemoryAllocator.cpp ****                 found=true;
 524              		.loc 1 110 27 is_stmt 0
 525 02b0 23B40700 		sd	zero,8(a5)
 111:src/MemoryAllocator.cpp ****                 break;
 526              		.loc 1 111 17 is_stmt 1
 527              	.LVL43:
 112:src/MemoryAllocator.cpp ****             }
 528              		.loc 1 112 17
 529              	.LBE42:
 116:src/MemoryAllocator.cpp ****     }
 117:src/MemoryAllocator.cpp ****     //size not found
 118:src/MemoryAllocator.cpp ****     if(found==false)return -1;
GAS LISTING /tmp/ccPUgfOH.s 			page 15


 530              		.loc 1 118 5
 531              	.L35:
 119:src/MemoryAllocator.cpp **** 
 120:src/MemoryAllocator.cpp ****     //find the place where to insert the new free segment (just after cur)
 121:src/MemoryAllocator.cpp ****     FreeMem* cur=0;
 532              		.loc 1 121 5
 122:src/MemoryAllocator.cpp ****     if(ma->freeList.head== nullptr || (size_t)addr<(size_t)ma->freeList.head)
 533              		.loc 1 122 5
 534              		.loc 1 122 21 is_stmt 0
 535 02b4 83B70500 		ld	a5,0(a1)
 536              	.LVL44:
 537              		.loc 1 122 5
 538 02b8 63880702 		beqz	a5,.L45
 539              		.loc 1 122 51 discriminator 1
 540 02bc 13870600 		mv	a4,a3
 541              		.loc 1 122 36 discriminator 1
 542 02c0 63E8F602 		bgtu	a5,a3,.L46
 543              	.LVL45:
 544              	.L38:
 123:src/MemoryAllocator.cpp ****         cur= nullptr;   //insert as first
 124:src/MemoryAllocator.cpp ****     else
 125:src/MemoryAllocator.cpp ****         for(cur=ma->freeList.head; cur->next!= nullptr && (size_t)addr>(size_t)(cur->next); cur=cur
 545              		.loc 1 125 56 is_stmt 1 discriminator 4
 546 02c4 93840700 		mv	s1,a5
 547              		.loc 1 125 41 is_stmt 0 discriminator 4
 548 02c8 83B78700 		ld	a5,8(a5)
 549              	.LVL46:
 550              		.loc 1 125 56 discriminator 4
 551 02cc 63840702 		beqz	a5,.L37
 552              		.loc 1 125 56 discriminator 2
 553 02d0 E3EAE7FE 		bgtu	a4,a5,.L38
 554 02d4 6F000002 		j	.L37
 555              	.LVL47:
 556              	.L53:
 557              	.LBB43:
 103:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 558              		.loc 1 103 17 is_stmt 1
 103:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 559              		.loc 1 103 42 is_stmt 0
 560 02d8 03B78700 		ld	a4,8(a5)
 103:src/MemoryAllocator.cpp ****                 temp->next= nullptr;
 561              		.loc 1 103 34
 562 02dc 23B8E500 		sd	a4,16(a1)
 104:src/MemoryAllocator.cpp ****                 found=true;
 563              		.loc 1 104 17 is_stmt 1
 104:src/MemoryAllocator.cpp ****                 found=true;
 564              		.loc 1 104 27 is_stmt 0
 565 02e0 23B40700 		sd	zero,8(a5)
 105:src/MemoryAllocator.cpp ****                 break;
 566              		.loc 1 105 17 is_stmt 1
 567              	.LVL48:
 106:src/MemoryAllocator.cpp ****             }
 568              		.loc 1 106 17
 569              	.LBE43:
 118:src/MemoryAllocator.cpp **** 
 570              		.loc 1 118 5
 571 02e4 6FF01FFD 		j	.L35
GAS LISTING /tmp/ccPUgfOH.s 			page 16


 572              	.LVL49:
 573              	.L45:
 123:src/MemoryAllocator.cpp ****     else
 574              		.loc 1 123 12 is_stmt 0
 575 02e8 93840700 		mv	s1,a5
 576 02ec 6F008000 		j	.L37
 577              	.L46:
 578 02f0 93040000 		li	s1,0
 579              	.LVL50:
 580              	.L37:
 126:src/MemoryAllocator.cpp **** 
 127:src/MemoryAllocator.cpp ****     //insert seg after cur
 128:src/MemoryAllocator.cpp ****     FreeMem* newSeg = (FreeMem*)((size_t)addr- sizeof(FreeMem));
 581              		.loc 1 128 5 is_stmt 1
 582              		.loc 1 128 46 is_stmt 0
 583 02f4 138586FE 		addi	a0,a3,-24
 584              	.LVL51:
 129:src/MemoryAllocator.cpp ****     newSeg->size = size;    //check this!!
 585              		.loc 1 129 5 is_stmt 1
 586              		.loc 1 129 18 is_stmt 0
 587 02f8 23B406FF 		sd	a6,-24(a3)
 130:src/MemoryAllocator.cpp ****     newSeg->prev= cur;
 588              		.loc 1 130 5 is_stmt 1
 589              		.loc 1 130 17 is_stmt 0
 590 02fc 23389500 		sd	s1,16(a0)
 131:src/MemoryAllocator.cpp ****     if(cur)newSeg->next = cur->next;//link to next
 591              		.loc 1 131 5 is_stmt 1
 592 0300 63860404 		beqz	s1,.L39
 593              		.loc 1 131 12 discriminator 1
 594              		.loc 1 131 32 is_stmt 0 discriminator 1
 595 0304 83B78400 		ld	a5,8(s1)
 596              		.loc 1 131 25 discriminator 1
 597 0308 2334F500 		sd	a5,8(a0)
 598              	.L40:
 132:src/MemoryAllocator.cpp ****     else newSeg->next=ma->freeList.head;
 133:src/MemoryAllocator.cpp ****     if(newSeg->next)newSeg->next->prev=newSeg;
 599              		.loc 1 133 5 is_stmt 1
 600              		.loc 1 133 16 is_stmt 0
 601 030c 83378500 		ld	a5,8(a0)
 602              		.loc 1 133 5
 603 0310 63840700 		beqz	a5,.L41
 604              		.loc 1 133 21 is_stmt 1 discriminator 1
 605              		.loc 1 133 39 is_stmt 0 discriminator 1
 606 0314 23B8A700 		sd	a0,16(a5)
 607              	.L41:
 134:src/MemoryAllocator.cpp ****     if(cur)cur->next=newSeg; //link previous
 608              		.loc 1 134 5 is_stmt 1
 609 0318 63800404 		beqz	s1,.L42
 610              		.loc 1 134 12 discriminator 1
 611              		.loc 1 134 21 is_stmt 0 discriminator 1
 612 031c 23B4A400 		sd	a0,8(s1)
 613              	.L43:
 135:src/MemoryAllocator.cpp ****     else ma->freeList.head = newSeg;
 136:src/MemoryAllocator.cpp **** 
 137:src/MemoryAllocator.cpp **** 
 138:src/MemoryAllocator.cpp **** 
 139:src/MemoryAllocator.cpp ****     tryToJoin(newSeg);
GAS LISTING /tmp/ccPUgfOH.s 			page 17


 614              		.loc 1 139 5 is_stmt 1
 615              		.loc 1 139 14 is_stmt 0
 616 0320 97000000 		call	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
 616      E7800000 
 617              	.LVL52:
 140:src/MemoryAllocator.cpp ****     tryToJoin(cur);
 618              		.loc 1 140 5 is_stmt 1
 619              		.loc 1 140 14 is_stmt 0
 620 0328 13850400 		mv	a0,s1
 621 032c 97000000 		call	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
 621      E7800000 
 622              	.LVL53:
 141:src/MemoryAllocator.cpp **** 
 142:src/MemoryAllocator.cpp **** 
 143:src/MemoryAllocator.cpp **** 
 144:src/MemoryAllocator.cpp ****     return 0;
 623              		.loc 1 144 5 is_stmt 1
 624              		.loc 1 144 12 is_stmt 0
 625 0334 13050000 		li	a0,0
 626              	.LVL54:
 145:src/MemoryAllocator.cpp **** 
 146:src/MemoryAllocator.cpp **** }...
 627              		.loc 1 146 1
 628 0338 83308101 		ld	ra,24(sp)
 629              		.cfi_remember_state
 630              		.cfi_restore 1
 631 033c 03340101 		ld	s0,16(sp)
 632              		.cfi_restore 8
 633              		.cfi_def_cfa 2, 32
 634 0340 83348100 		ld	s1,8(sp)
 635              		.cfi_restore 9
 636              	.LVL55:
 637 0344 13010102 		addi	sp,sp,32
 638              		.cfi_def_cfa_offset 0
 639 0348 67800000 		jr	ra
 640              	.LVL56:
 641              	.L39:
 642              		.cfi_restore_state
 132:src/MemoryAllocator.cpp ****     else newSeg->next=ma->freeList.head;
 643              		.loc 1 132 10 is_stmt 1
 132:src/MemoryAllocator.cpp ****     else newSeg->next=ma->freeList.head;
 644              		.loc 1 132 36 is_stmt 0
 645 034c 83B70500 		ld	a5,0(a1)
 132:src/MemoryAllocator.cpp ****     else newSeg->next=ma->freeList.head;
 646              		.loc 1 132 22
 647 0350 2334F500 		sd	a5,8(a0)
 648 0354 6FF09FFB 		j	.L40
 649              	.L42:
 135:src/MemoryAllocator.cpp ****     else ma->freeList.head = newSeg;
 650              		.loc 1 135 10 is_stmt 1
 135:src/MemoryAllocator.cpp ****     else ma->freeList.head = newSeg;
 651              		.loc 1 135 28 is_stmt 0
 652 0358 23B0A500 		sd	a0,0(a1)
 653 035c 6FF05FFC 		j	.L43
 654              	.LVL57:
 655              	.L44:
 656              		.cfi_def_cfa_register 2
GAS LISTING /tmp/ccPUgfOH.s 			page 18


 657              		.cfi_restore 1
 658              		.cfi_restore 8
 659              		.cfi_restore 9
 118:src/MemoryAllocator.cpp ****     if(found==false)return -1;
 660              		.loc 1 118 29
 661 0360 1305F0FF 		li	a0,-1
 662              	.LVL58:
 663              		.loc 1 146 1
 664 0364 67800000 		ret
 665              		.cfi_endproc
 666              	.LFE5:
 668              		.globl	_ZN15MemoryAllocator8instanceE
 669              		.bss
 670              		.align	3
 671              		.set	.LANCHOR0,. + 0
 674              	_ZN15MemoryAllocator8instanceE:
 675 0000 00000000 		.zero	8
 675      00000000 
 676              		.text
 677              	.Letext0:
 678              		.file 3 "src/../h/../lib/hw.h"
 679              		.file 4 "src/../h/DoublyLinkedList.hpp"
GAS LISTING /tmp/ccPUgfOH.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccPUgfOH.s:9      .text:0000000000000000 _ZN15MemoryAllocator10kmem_allocEm
     /tmp/ccPUgfOH.s:13     .text:0000000000000000 .L0 
     /tmp/ccPUgfOH.s:15     .text:0000000000000000 .L0 
     /tmp/ccPUgfOH.s:16     .text:0000000000000004 .L0 
     /tmp/ccPUgfOH.s:18     .text:0000000000000008 .L0 
     /tmp/ccPUgfOH.s:20     .text:000000000000000c .L0 
     /tmp/ccPUgfOH.s:26     .text:0000000000000010 .L0 
     /tmp/ccPUgfOH.s:27     .text:0000000000000010 .L0 
     /tmp/ccPUgfOH.s:28     .text:0000000000000010 .L0 
     /tmp/ccPUgfOH.s:30     .text:0000000000000018 .L0 
     /tmp/ccPUgfOH.s:33     .text:000000000000001c .L0 
     /tmp/ccPUgfOH.s:34     .text:000000000000001c .L0 
     /tmp/ccPUgfOH.s:40     .text:0000000000000024 .L0 
     /tmp/ccPUgfOH.s:41     .text:0000000000000024 .L0 
     /tmp/ccPUgfOH.s:45     .text:0000000000000028 .L0 
     /tmp/ccPUgfOH.s:48     .text:000000000000002c .L0 
     /tmp/ccPUgfOH.s:49     .text:000000000000002c .L0 
     /tmp/ccPUgfOH.s:51     .text:0000000000000030 .L0 
     /tmp/ccPUgfOH.s:54     .text:0000000000000034 .L0 
     /tmp/ccPUgfOH.s:55     .text:0000000000000034 .L0 
     /tmp/ccPUgfOH.s:57     .text:0000000000000038 .L0 
     /tmp/ccPUgfOH.s:61     .text:0000000000000040 .L0 
     /tmp/ccPUgfOH.s:62     .text:0000000000000040 .L0 
     /tmp/ccPUgfOH.s:64     .text:0000000000000044 .L0 
     /tmp/ccPUgfOH.s:66     .text:0000000000000048 .L0 
     /tmp/ccPUgfOH.s:67     .text:0000000000000048 .L0 
     /tmp/ccPUgfOH.s:69     .text:000000000000004c .L0 
     /tmp/ccPUgfOH.s:72     .text:0000000000000050 .L0 
     /tmp/ccPUgfOH.s:73     .text:0000000000000050 .L0 
     /tmp/ccPUgfOH.s:75     .text:0000000000000054 .L0 
     /tmp/ccPUgfOH.s:77     .text:0000000000000058 .L0 
     /tmp/ccPUgfOH.s:78     .text:0000000000000058 .L0 
     /tmp/ccPUgfOH.s:80     .text:000000000000005c .L0 
     /tmp/ccPUgfOH.s:84     .text:0000000000000060 .L0 
     /tmp/ccPUgfOH.s:85     .text:0000000000000060 .L0 
     /tmp/ccPUgfOH.s:86     .text:0000000000000060 .L0 
     /tmp/ccPUgfOH.s:88     .text:0000000000000064 .L0 
     /tmp/ccPUgfOH.s:89     .text:0000000000000064 .L0 
     /tmp/ccPUgfOH.s:92     .text:0000000000000068 .L0 
     /tmp/ccPUgfOH.s:93     .text:0000000000000068 .L0 
     /tmp/ccPUgfOH.s:96     .text:000000000000006c .L0 
     /tmp/ccPUgfOH.s:101    .text:0000000000000070 .L0 
     /tmp/ccPUgfOH.s:103    .text:0000000000000074 .L0 
     /tmp/ccPUgfOH.s:106    .text:0000000000000078 .L0 
     /tmp/ccPUgfOH.s:108    .text:000000000000007c .L0 
     /tmp/ccPUgfOH.s:109    .text:000000000000007c .L0 
     /tmp/ccPUgfOH.s:115    .text:0000000000000080 .L0 
     /tmp/ccPUgfOH.s:116    .text:0000000000000080 .L0 
     /tmp/ccPUgfOH.s:124    .text:0000000000000084 .L0 
     /tmp/ccPUgfOH.s:125    .text:0000000000000084 .L0 
     /tmp/ccPUgfOH.s:126    .text:0000000000000088 .L0 
     /tmp/ccPUgfOH.s:127    .text:0000000000000088 .L0 
     /tmp/ccPUgfOH.s:128    .text:0000000000000088 .L0 
     /tmp/ccPUgfOH.s:130    .text:000000000000008c .L0 
     /tmp/ccPUgfOH.s:134    .text:0000000000000090 .L0 
GAS LISTING /tmp/ccPUgfOH.s 			page 20


     /tmp/ccPUgfOH.s:138    .text:0000000000000090 .L0 
     /tmp/ccPUgfOH.s:139    .text:0000000000000090 .L0 
     /tmp/ccPUgfOH.s:144    .text:00000000000000a8 .L0 
     /tmp/ccPUgfOH.s:145    .text:00000000000000a8 .L0 
     /tmp/ccPUgfOH.s:147    .text:00000000000000ac .L0 
     /tmp/ccPUgfOH.s:149    .text:00000000000000b0 .L0 
     /tmp/ccPUgfOH.s:150    .text:00000000000000b0 .L0 
     /tmp/ccPUgfOH.s:153    .text:00000000000000b8 .L0 
     /tmp/ccPUgfOH.s:159    .text:00000000000000d0 .L0 
     /tmp/ccPUgfOH.s:161    .text:00000000000000d4 .L0 
     /tmp/ccPUgfOH.s:162    .text:00000000000000d4 .L0 
     /tmp/ccPUgfOH.s:165    .text:00000000000000dc .L0 
     /tmp/ccPUgfOH.s:167    .text:00000000000000e0 .L0 
     /tmp/ccPUgfOH.s:168    .text:00000000000000e0 .L0 
     /tmp/ccPUgfOH.s:170    .text:00000000000000e4 .L0 
     /tmp/ccPUgfOH.s:172    .text:00000000000000e8 .L0 
     /tmp/ccPUgfOH.s:173    .text:00000000000000e8 .L0 
     /tmp/ccPUgfOH.s:183    .text:00000000000000f0 .L0 
     /tmp/ccPUgfOH.s:184    .text:00000000000000f0 .L0 
     /tmp/ccPUgfOH.s:185    .text:00000000000000f0 .L0 
     /tmp/ccPUgfOH.s:188    .text:00000000000000f4 .L0 
     /tmp/ccPUgfOH.s:194    .text:00000000000000f8 .L0 
     /tmp/ccPUgfOH.s:195    .text:00000000000000f8 .L0 
     /tmp/ccPUgfOH.s:197    .text:00000000000000fc .L0 
     /tmp/ccPUgfOH.s:203    .text:0000000000000104 .L0 
     /tmp/ccPUgfOH.s:204    .text:0000000000000104 .L0 
     /tmp/ccPUgfOH.s:213    .text:000000000000010c .L0 
     /tmp/ccPUgfOH.s:214    .text:000000000000010c .L0 
     /tmp/ccPUgfOH.s:217    .text:0000000000000114 .L0 
     /tmp/ccPUgfOH.s:220    .text:0000000000000118 .L0 
     /tmp/ccPUgfOH.s:221    .text:0000000000000118 .L0 
     /tmp/ccPUgfOH.s:223    .text:000000000000011c .L0 
     /tmp/ccPUgfOH.s:225    .text:0000000000000120 .L0 
     /tmp/ccPUgfOH.s:226    .text:0000000000000120 .L0 
     /tmp/ccPUgfOH.s:229    .text:0000000000000124 .L0 
     /tmp/ccPUgfOH.s:230    .text:0000000000000124 .L0 
     /tmp/ccPUgfOH.s:232    .text:0000000000000128 .L0 
     /tmp/ccPUgfOH.s:234    .text:000000000000012c .L0 
     /tmp/ccPUgfOH.s:235    .text:000000000000012c .L0 
     /tmp/ccPUgfOH.s:238    .text:0000000000000130 .L0 
     /tmp/ccPUgfOH.s:239    .text:0000000000000130 .L0 
     /tmp/ccPUgfOH.s:241    .text:0000000000000134 .L0 
     /tmp/ccPUgfOH.s:243    .text:0000000000000138 .L0 
     /tmp/ccPUgfOH.s:244    .text:0000000000000138 .L0 
     /tmp/ccPUgfOH.s:246    .text:000000000000013c .L0 
     /tmp/ccPUgfOH.s:248    .text:0000000000000140 .L0 
     /tmp/ccPUgfOH.s:249    .text:0000000000000140 .L0 
     /tmp/ccPUgfOH.s:252    .text:0000000000000144 .L0 
     /tmp/ccPUgfOH.s:254    .text:0000000000000148 .L0 
     /tmp/ccPUgfOH.s:257    .text:000000000000014c .L0 
     /tmp/ccPUgfOH.s:258    .text:000000000000014c .L0 
     /tmp/ccPUgfOH.s:259    .text:000000000000014c .L0 
     /tmp/ccPUgfOH.s:261    .text:0000000000000150 .L0 
     /tmp/ccPUgfOH.s:262    .text:0000000000000150 .L0 
     /tmp/ccPUgfOH.s:265    .text:0000000000000154 .L0 
     /tmp/ccPUgfOH.s:266    .text:0000000000000154 .L0 
     /tmp/ccPUgfOH.s:269    .text:0000000000000158 .L0 
GAS LISTING /tmp/ccPUgfOH.s 			page 21


     /tmp/ccPUgfOH.s:274    .text:000000000000015c .L0 
     /tmp/ccPUgfOH.s:276    .text:0000000000000160 .L0 
     /tmp/ccPUgfOH.s:279    .text:0000000000000164 .L0 
     /tmp/ccPUgfOH.s:281    .text:0000000000000168 .L0 
     /tmp/ccPUgfOH.s:282    .text:0000000000000168 .L0 
     /tmp/ccPUgfOH.s:288    .text:000000000000016c .L0 
     /tmp/ccPUgfOH.s:289    .text:000000000000016c .L0 
     /tmp/ccPUgfOH.s:292    .text:0000000000000170 .L0 
     /tmp/ccPUgfOH.s:293    .text:0000000000000170 .L0 
     /tmp/ccPUgfOH.s:297    .text:0000000000000174 .L0 
     /tmp/ccPUgfOH.s:298    .text:0000000000000174 .L0 
     /tmp/ccPUgfOH.s:304    .text:000000000000017c .L0 
     /tmp/ccPUgfOH.s:305    .text:000000000000017c .L0 
     /tmp/ccPUgfOH.s:313    .text:0000000000000184 .L0 
     /tmp/ccPUgfOH.s:319    .text:0000000000000184 _ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
     /tmp/ccPUgfOH.s:322    .text:0000000000000184 .L0 
     /tmp/ccPUgfOH.s:324    .text:0000000000000184 .L0 
     /tmp/ccPUgfOH.s:325    .text:0000000000000188 .L0 
     /tmp/ccPUgfOH.s:327    .text:000000000000018c .L0 
     /tmp/ccPUgfOH.s:329    .text:0000000000000190 .L0 
     /tmp/ccPUgfOH.s:331    .text:0000000000000190 .L0 
     /tmp/ccPUgfOH.s:333    .text:0000000000000194 .L0 
     /tmp/ccPUgfOH.s:334    .text:0000000000000194 .L0 
     /tmp/ccPUgfOH.s:336    .text:0000000000000198 .L0 
     /tmp/ccPUgfOH.s:338    .text:000000000000019c .L0 
     /tmp/ccPUgfOH.s:340    .text:00000000000001a0 .L0 
     /tmp/ccPUgfOH.s:342    .text:00000000000001a4 .L0 
     /tmp/ccPUgfOH.s:344    .text:00000000000001a8 .L0 
     /tmp/ccPUgfOH.s:346    .text:00000000000001ac .L0 
     /tmp/ccPUgfOH.s:350    .text:00000000000001b0 .L0 
     /tmp/ccPUgfOH.s:351    .text:00000000000001b4 .L0 
     /tmp/ccPUgfOH.s:352    .text:00000000000001b4 .L0 
     /tmp/ccPUgfOH.s:353    .text:00000000000001b4 .L0 
     /tmp/ccPUgfOH.s:355    .text:00000000000001b8 .L0 
     /tmp/ccPUgfOH.s:359    .text:00000000000001bc .L0 
     /tmp/ccPUgfOH.s:361    .text:00000000000001bc .L0 
     /tmp/ccPUgfOH.s:362    .text:00000000000001bc .L0 
     /tmp/ccPUgfOH.s:364    .text:00000000000001c0 .L0 
     /tmp/ccPUgfOH.s:368    .text:00000000000001cc .L0 
     /tmp/ccPUgfOH.s:369    .text:00000000000001cc .L0 
     /tmp/ccPUgfOH.s:371    .text:00000000000001d0 .L0 
     /tmp/ccPUgfOH.s:373    .text:00000000000001d4 .L0 
     /tmp/ccPUgfOH.s:375    .text:00000000000001d8 .L0 
     /tmp/ccPUgfOH.s:376    .text:00000000000001d8 .L0 
     /tmp/ccPUgfOH.s:379    .text:00000000000001dc .L0 
     /tmp/ccPUgfOH.s:380    .text:00000000000001dc .L0 
     /tmp/ccPUgfOH.s:386    .text:00000000000001e4 .L0 
     /tmp/ccPUgfOH.s:392    .text:00000000000001ec .L0 
     /tmp/ccPUgfOH.s:395    .text:00000000000001f4 .L0 
     /tmp/ccPUgfOH.s:401    .text:00000000000001f4 _ZN15MemoryAllocator9kmem_freeEPv
     /tmp/ccPUgfOH.s:404    .text:00000000000001f4 .L0 
     /tmp/ccPUgfOH.s:406    .text:00000000000001f4 .L0 
     /tmp/ccPUgfOH.s:410    .text:00000000000001f8 .L0 
     /tmp/ccPUgfOH.s:411    .text:00000000000001f8 .L0 
     /tmp/ccPUgfOH.s:412    .text:00000000000001f8 .L0 
     /tmp/ccPUgfOH.s:414    .text:0000000000000200 .L0 
     /tmp/ccPUgfOH.s:417    .text:0000000000000204 .L0 
GAS LISTING /tmp/ccPUgfOH.s 			page 22


     /tmp/ccPUgfOH.s:418    .text:0000000000000204 .L0 
     /tmp/ccPUgfOH.s:423    .text:000000000000020c .L0 
     /tmp/ccPUgfOH.s:424    .text:000000000000020c .L0 
     /tmp/ccPUgfOH.s:425    .text:000000000000020c .L0 
     /tmp/ccPUgfOH.s:427    .text:000000000000020c .L0 
     /tmp/ccPUgfOH.s:428    .text:000000000000020c .L0 
     /tmp/ccPUgfOH.s:432    .text:0000000000000210 .L0 
     /tmp/ccPUgfOH.s:437    .text:0000000000000214 .L0 
     /tmp/ccPUgfOH.s:439    .text:0000000000000218 .L0 
     /tmp/ccPUgfOH.s:440    .text:0000000000000218 .L0 
     /tmp/ccPUgfOH.s:442    .text:000000000000021c .L0 
     /tmp/ccPUgfOH.s:445    .text:0000000000000220 .L0 
     /tmp/ccPUgfOH.s:446    .text:0000000000000220 .L0 
     /tmp/ccPUgfOH.s:447    .text:0000000000000220 .L0 
     /tmp/ccPUgfOH.s:449    .text:0000000000000224 .L0 
     /tmp/ccPUgfOH.s:452    .text:0000000000000228 .L0 
     /tmp/ccPUgfOH.s:459    .text:000000000000022c .L0 
     /tmp/ccPUgfOH.s:460    .text:000000000000022c .L0 
     /tmp/ccPUgfOH.s:465    .text:0000000000000244 .L0 
     /tmp/ccPUgfOH.s:466    .text:0000000000000244 .L0 
     /tmp/ccPUgfOH.s:468    .text:0000000000000248 .L0 
     /tmp/ccPUgfOH.s:470    .text:000000000000024c .L0 
     /tmp/ccPUgfOH.s:471    .text:000000000000024c .L0 
     /tmp/ccPUgfOH.s:474    .text:0000000000000254 .L0 
     /tmp/ccPUgfOH.s:480    .text:000000000000026c .L0 
     /tmp/ccPUgfOH.s:482    .text:0000000000000270 .L0 
     /tmp/ccPUgfOH.s:483    .text:0000000000000270 .L0 
     /tmp/ccPUgfOH.s:486    .text:0000000000000278 .L0 
     /tmp/ccPUgfOH.s:488    .text:000000000000027c .L0 
     /tmp/ccPUgfOH.s:489    .text:000000000000027c .L0 
     /tmp/ccPUgfOH.s:491    .text:0000000000000280 .L0 
     /tmp/ccPUgfOH.s:493    .text:0000000000000284 .L0 
     /tmp/ccPUgfOH.s:494    .text:0000000000000284 .L0 
     /tmp/ccPUgfOH.s:501    .text:000000000000028c .L0 
     /tmp/ccPUgfOH.s:502    .text:0000000000000290 .L0 
     /tmp/ccPUgfOH.s:506    .text:000000000000029c .L0 
     /tmp/ccPUgfOH.s:507    .text:000000000000029c .L0 
     /tmp/ccPUgfOH.s:508    .text:000000000000029c .L0 
     /tmp/ccPUgfOH.s:510    .text:00000000000002a0 .L0 
     /tmp/ccPUgfOH.s:513    .text:00000000000002a0 .L0 
     /tmp/ccPUgfOH.s:514    .text:00000000000002a0 .L0 
     /tmp/ccPUgfOH.s:517    .text:00000000000002a4 .L0 
     /tmp/ccPUgfOH.s:519    .text:00000000000002a8 .L0 
     /tmp/ccPUgfOH.s:520    .text:00000000000002a8 .L0 
     /tmp/ccPUgfOH.s:522    .text:00000000000002ac .L0 
     /tmp/ccPUgfOH.s:524    .text:00000000000002b0 .L0 
     /tmp/ccPUgfOH.s:525    .text:00000000000002b0 .L0 
     /tmp/ccPUgfOH.s:528    .text:00000000000002b4 .L0 
     /tmp/ccPUgfOH.s:530    .text:00000000000002b4 .L0 
     /tmp/ccPUgfOH.s:532    .text:00000000000002b4 .L0 
     /tmp/ccPUgfOH.s:533    .text:00000000000002b4 .L0 
     /tmp/ccPUgfOH.s:534    .text:00000000000002b4 .L0 
     /tmp/ccPUgfOH.s:535    .text:00000000000002b4 .L0 
     /tmp/ccPUgfOH.s:538    .text:00000000000002b8 .L0 
     /tmp/ccPUgfOH.s:540    .text:00000000000002bc .L0 
     /tmp/ccPUgfOH.s:542    .text:00000000000002c0 .L0 
     /tmp/ccPUgfOH.s:546    .text:00000000000002c4 .L0 
GAS LISTING /tmp/ccPUgfOH.s 			page 23


     /tmp/ccPUgfOH.s:548    .text:00000000000002c8 .L0 
     /tmp/ccPUgfOH.s:551    .text:00000000000002cc .L0 
     /tmp/ccPUgfOH.s:553    .text:00000000000002d0 .L0 
     /tmp/ccPUgfOH.s:559    .text:00000000000002d8 .L0 
     /tmp/ccPUgfOH.s:560    .text:00000000000002d8 .L0 
     /tmp/ccPUgfOH.s:562    .text:00000000000002dc .L0 
     /tmp/ccPUgfOH.s:564    .text:00000000000002e0 .L0 
     /tmp/ccPUgfOH.s:565    .text:00000000000002e0 .L0 
     /tmp/ccPUgfOH.s:568    .text:00000000000002e4 .L0 
     /tmp/ccPUgfOH.s:570    .text:00000000000002e4 .L0 
     /tmp/ccPUgfOH.s:571    .text:00000000000002e4 .L0 
     /tmp/ccPUgfOH.s:575    .text:00000000000002e8 .L0 
     /tmp/ccPUgfOH.s:582    .text:00000000000002f4 .L0 
     /tmp/ccPUgfOH.s:583    .text:00000000000002f4 .L0 
     /tmp/ccPUgfOH.s:586    .text:00000000000002f8 .L0 
     /tmp/ccPUgfOH.s:587    .text:00000000000002f8 .L0 
     /tmp/ccPUgfOH.s:589    .text:00000000000002fc .L0 
     /tmp/ccPUgfOH.s:590    .text:00000000000002fc .L0 
     /tmp/ccPUgfOH.s:592    .text:0000000000000300 .L0 
     /tmp/ccPUgfOH.s:594    .text:0000000000000304 .L0 
     /tmp/ccPUgfOH.s:595    .text:0000000000000304 .L0 
     /tmp/ccPUgfOH.s:597    .text:0000000000000308 .L0 
     /tmp/ccPUgfOH.s:600    .text:000000000000030c .L0 
     /tmp/ccPUgfOH.s:601    .text:000000000000030c .L0 
     /tmp/ccPUgfOH.s:603    .text:0000000000000310 .L0 
     /tmp/ccPUgfOH.s:605    .text:0000000000000314 .L0 
     /tmp/ccPUgfOH.s:606    .text:0000000000000314 .L0 
     /tmp/ccPUgfOH.s:609    .text:0000000000000318 .L0 
     /tmp/ccPUgfOH.s:611    .text:000000000000031c .L0 
     /tmp/ccPUgfOH.s:612    .text:000000000000031c .L0 
     /tmp/ccPUgfOH.s:615    .text:0000000000000320 .L0 
     /tmp/ccPUgfOH.s:616    .text:0000000000000320 .L0 
     /tmp/ccPUgfOH.s:619    .text:0000000000000328 .L0 
     /tmp/ccPUgfOH.s:620    .text:0000000000000328 .L0 
     /tmp/ccPUgfOH.s:624    .text:0000000000000334 .L0 
     /tmp/ccPUgfOH.s:625    .text:0000000000000334 .L0 
     /tmp/ccPUgfOH.s:628    .text:0000000000000338 .L0 
     /tmp/ccPUgfOH.s:629    .text:000000000000033c .L0 
     /tmp/ccPUgfOH.s:630    .text:000000000000033c .L0 
     /tmp/ccPUgfOH.s:632    .text:0000000000000340 .L0 
     /tmp/ccPUgfOH.s:633    .text:0000000000000340 .L0 
     /tmp/ccPUgfOH.s:635    .text:0000000000000344 .L0 
     /tmp/ccPUgfOH.s:638    .text:0000000000000348 .L0 
     /tmp/ccPUgfOH.s:642    .text:000000000000034c .L0 
     /tmp/ccPUgfOH.s:644    .text:000000000000034c .L0 
     /tmp/ccPUgfOH.s:645    .text:000000000000034c .L0 
     /tmp/ccPUgfOH.s:647    .text:0000000000000350 .L0 
     /tmp/ccPUgfOH.s:651    .text:0000000000000358 .L0 
     /tmp/ccPUgfOH.s:652    .text:0000000000000358 .L0 
     /tmp/ccPUgfOH.s:656    .text:0000000000000360 .L0 
     /tmp/ccPUgfOH.s:657    .text:0000000000000360 .L0 
     /tmp/ccPUgfOH.s:658    .text:0000000000000360 .L0 
     /tmp/ccPUgfOH.s:659    .text:0000000000000360 .L0 
     /tmp/ccPUgfOH.s:661    .text:0000000000000360 .L0 
     /tmp/ccPUgfOH.s:664    .text:0000000000000364 .L0 
     /tmp/ccPUgfOH.s:665    .text:0000000000000368 .L0 
     /tmp/ccPUgfOH.s:674    .bss:0000000000000000 _ZN15MemoryAllocator8instanceE
GAS LISTING /tmp/ccPUgfOH.s 			page 24


     /tmp/ccPUgfOH.s:671    .bss:0000000000000000 .LANCHOR0
     /tmp/ccPUgfOH.s:680    .text:0000000000000368 .L0 
     /tmp/ccPUgfOH.s:28     .text:0000000000000010 .L0 
     /tmp/ccPUgfOH.s:34     .text:000000000000001c .L0 
     /tmp/ccPUgfOH.s:139    .text:0000000000000090 .L0 
     /tmp/ccPUgfOH.s:141    .text:000000000000009c .L0 
     /tmp/ccPUgfOH.s:153    .text:00000000000000b8 .L0 
     /tmp/ccPUgfOH.s:412    .text:00000000000001f8 .L0 
     /tmp/ccPUgfOH.s:418    .text:0000000000000204 .L0 
     /tmp/ccPUgfOH.s:460    .text:000000000000022c .L0 
     /tmp/ccPUgfOH.s:462    .text:0000000000000238 .L0 
     /tmp/ccPUgfOH.s:474    .text:0000000000000254 .L0 
     /tmp/ccPUgfOH.s:133    .text:0000000000000090 .L18
     /tmp/ccPUgfOH.s:119    .text:0000000000000084 .L1
     /tmp/ccPUgfOH.s:176    .text:00000000000000f0 .L19
     /tmp/ccPUgfOH.s:208    .text:000000000000010c .L6
     /tmp/ccPUgfOH.s:189    .text:00000000000000f8 .L7
     /tmp/ccPUgfOH.s:81     .text:0000000000000060 .L9
     /tmp/ccPUgfOH.s:200    .text:0000000000000104 .L20
     /tmp/ccPUgfOH.s:97     .text:0000000000000070 .L10
     /tmp/ccPUgfOH.s:31     .text:000000000000001c .L2
     /tmp/ccPUgfOH.s:43     .text:0000000000000028 .L5
     /tmp/ccPUgfOH.s:70     .text:0000000000000050 .L8
     /tmp/ccPUgfOH.s:111    .text:0000000000000080 .L11
     /tmp/ccPUgfOH.s:295    .text:0000000000000174 .L12
     /tmp/ccPUgfOH.s:236    .text:0000000000000130 .L14
     /tmp/ccPUgfOH.s:301    .text:000000000000017c .L21
     /tmp/ccPUgfOH.s:270    .text:000000000000015c .L15
     /tmp/ccPUgfOH.s:227    .text:0000000000000124 .L13
     /tmp/ccPUgfOH.s:284    .text:000000000000016c .L16
     /tmp/ccPUgfOH.s:384    .text:00000000000001e4 .L25
     /tmp/ccPUgfOH.s:390    .text:00000000000001ec .L26
     /tmp/ccPUgfOH.s:358    .text:00000000000001bc .L29
     /tmp/ccPUgfOH.s:377    .text:00000000000001dc .L24
     /tmp/ccPUgfOH.s:348    .text:00000000000001b0 .L23
     /tmp/ccPUgfOH.s:454    .text:000000000000022c .L51
     /tmp/ccPUgfOH.s:655    .text:0000000000000360 .L44
     /tmp/ccPUgfOH.s:497    .text:000000000000028c .L52
     /tmp/ccPUgfOH.s:434    .text:0000000000000214 .L36
     /tmp/ccPUgfOH.s:415    .text:0000000000000204 .L31
     /tmp/ccPUgfOH.s:556    .text:00000000000002d8 .L53
     /tmp/ccPUgfOH.s:573    .text:00000000000002e8 .L45
     /tmp/ccPUgfOH.s:577    .text:00000000000002f0 .L46
     /tmp/ccPUgfOH.s:580    .text:00000000000002f4 .L37
     /tmp/ccPUgfOH.s:544    .text:00000000000002c4 .L38
     /tmp/ccPUgfOH.s:531    .text:00000000000002b4 .L35
     /tmp/ccPUgfOH.s:641    .text:000000000000034c .L39
     /tmp/ccPUgfOH.s:607    .text:0000000000000318 .L41
     /tmp/ccPUgfOH.s:649    .text:0000000000000358 .L42
     /tmp/ccPUgfOH.s:598    .text:000000000000030c .L40
     /tmp/ccPUgfOH.s:613    .text:0000000000000320 .L43
     /tmp/ccPUgfOH.s:1294   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccPUgfOH.s:2521   .debug_str:000000000000021f .LASF49
     /tmp/ccPUgfOH.s:2549   .debug_str:00000000000003d3 .LASF50
     /tmp/ccPUgfOH.s:2469   .debug_str:000000000000002a .LASF51
     /tmp/ccPUgfOH.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccPUgfOH.s:677    .text:0000000000000368 .Letext0
GAS LISTING /tmp/ccPUgfOH.s 			page 25


     /tmp/ccPUgfOH.s:2461   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccPUgfOH.s:2531   .debug_str:0000000000000336 .LASF0
     /tmp/ccPUgfOH.s:2509   .debug_str:0000000000000192 .LASF1
     /tmp/ccPUgfOH.s:2497   .debug_str:0000000000000141 .LASF2
     /tmp/ccPUgfOH.s:2477   .debug_str:000000000000008e .LASF4
     /tmp/ccPUgfOH.s:2505   .debug_str:000000000000017b .LASF3
     /tmp/ccPUgfOH.s:2467   .debug_str:0000000000000023 .LASF5
     /tmp/ccPUgfOH.s:2463   .debug_str:0000000000000000 .LASF6
     /tmp/ccPUgfOH.s:2493   .debug_str:000000000000011f .LASF7
     /tmp/ccPUgfOH.s:2541   .debug_str:0000000000000397 .LASF8
     /tmp/ccPUgfOH.s:2475   .debug_str:0000000000000080 .LASF9
     /tmp/ccPUgfOH.s:2577   .debug_str:0000000000000487 .LASF10
     /tmp/ccPUgfOH.s:2495   .debug_str:0000000000000132 .LASF11
     /tmp/ccPUgfOH.s:2563   .debug_str:0000000000000432 .LASF12
     /tmp/ccPUgfOH.s:2551   .debug_str:00000000000003eb .LASF13
     /tmp/ccPUgfOH.s:2511   .debug_str:00000000000001a5 .LASF14
     /tmp/ccPUgfOH.s:2485   .debug_str:00000000000000be .LASF15
     /tmp/ccPUgfOH.s:2545   .debug_str:00000000000003b1 .LASF16
     /tmp/ccPUgfOH.s:2523   .debug_str:00000000000002e3 .LASF26
     /tmp/ccPUgfOH.s:2559   .debug_str:0000000000000423 .LASF52
     /tmp/ccPUgfOH.s:2569   .debug_str:0000000000000451 .LASF17
     /tmp/ccPUgfOH.s:2567   .debug_str:000000000000044c .LASF18
     /tmp/ccPUgfOH.s:2573   .debug_str:0000000000000477 .LASF19
     /tmp/ccPUgfOH.s:2519   .debug_str:00000000000001fd .LASF53
     /tmp/ccPUgfOH.s:2525   .debug_str:0000000000000307 .LASF20
     /tmp/ccPUgfOH.s:2557   .debug_str:000000000000041e .LASF21
     /tmp/ccPUgfOH.s:2513   .debug_str:00000000000001b1 .LASF22
     /tmp/ccPUgfOH.s:2555   .debug_str:0000000000000401 .LASF24
     /tmp/ccPUgfOH.s:2571   .debug_str:0000000000000456 .LASF36
     /tmp/ccPUgfOH.s:2565   .debug_str:0000000000000442 .LASF23
     /tmp/ccPUgfOH.s:2471   .debug_str:000000000000005a .LASF25
     /tmp/ccPUgfOH.s:2465   .debug_str:0000000000000013 .LASF27
     /tmp/ccPUgfOH.s:2547   .debug_str:00000000000003c7 .LASF54
     /tmp/ccPUgfOH.s:2539   .debug_str:0000000000000373 .LASF55
     /tmp/ccPUgfOH.s:2575   .debug_str:000000000000047c .LASF28
     /tmp/ccPUgfOH.s:2529   .debug_str:0000000000000313 .LASF29
     /tmp/ccPUgfOH.s:2543   .debug_str:00000000000003a7 .LASF30
     /tmp/ccPUgfOH.s:2517   .debug_str:00000000000001db .LASF31
     /tmp/ccPUgfOH.s:2561   .debug_str:0000000000000428 .LASF32
     /tmp/ccPUgfOH.s:2489   .debug_str:00000000000000dd .LASF33
     /tmp/ccPUgfOH.s:2499   .debug_str:000000000000014f .LASF56
     /tmp/ccPUgfOH.s:2483   .debug_str:00000000000000a2 .LASF34
     /tmp/ccPUgfOH.s:2501   .debug_str:0000000000000157 .LASF35
     /tmp/ccPUgfOH.s:2515   .debug_str:00000000000001c2 .LASF37
     /tmp/ccPUgfOH.s:2535   .debug_str:000000000000034b .LASF38
     /tmp/ccPUgfOH.s:2487   .debug_str:00000000000000d4 .LASF39
     /tmp/ccPUgfOH.s:2503   .debug_str:0000000000000173 .LASF40
     /tmp/ccPUgfOH.s:2537   .debug_str:0000000000000354 .LASF57
     /tmp/ccPUgfOH.s:402    .text:00000000000001f4 .LFB5
     /tmp/ccPUgfOH.s:666    .text:0000000000000368 .LFE5
     /tmp/ccPUgfOH.s:2491   .debug_str:000000000000011a .LASF45
     /tmp/ccPUgfOH.s:1965   .debug_loc:0000000000000000 .LLST10
     /tmp/ccPUgfOH.s:1995   .debug_loc:0000000000000085 .LLST11
     /tmp/ccPUgfOH.s:2010   .debug_loc:00000000000000ce .LLST12
     /tmp/ccPUgfOH.s:2553   .debug_str:00000000000003fb .LASF41
     /tmp/ccPUgfOH.s:2039   .debug_loc:0000000000000143 .LLST13
     /tmp/ccPUgfOH.s:2077   .debug_loc:00000000000001df .LLST14
GAS LISTING /tmp/ccPUgfOH.s 			page 26


     /tmp/ccPUgfOH.s:2105   .debug_loc:0000000000000262 .LLST15
     /tmp/ccPUgfOH.s:2527   .debug_str:000000000000030c .LASF42
     /tmp/ccPUgfOH.s:2134   .debug_loc:00000000000002e6 .LLST16
     /tmp/ccPUgfOH.s:2425   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccPUgfOH.s:2507   .debug_str:000000000000018d .LASF43
     /tmp/ccPUgfOH.s:2154   .debug_loc:0000000000000334 .LLST17
     /tmp/ccPUgfOH.s:408    .text:00000000000001f8 .LBB36
     /tmp/ccPUgfOH.s:617    .text:0000000000000328 .LVL52
     /tmp/ccPUgfOH.s:622    .text:0000000000000334 .LVL53
     /tmp/ccPUgfOH.s:2479   .debug_str:0000000000000095 .LASF44
     /tmp/ccPUgfOH.s:320    .text:0000000000000184 .LFB4
     /tmp/ccPUgfOH.s:396    .text:00000000000001f4 .LFE4
     /tmp/ccPUgfOH.s:2182   .debug_loc:00000000000003b7 .LLST9
     /tmp/ccPUgfOH.s:10     .text:0000000000000000 .LFB3
     /tmp/ccPUgfOH.s:314    .text:0000000000000184 .LFE3
     /tmp/ccPUgfOH.s:2229   .debug_loc:000000000000046b .LLST0
     /tmp/ccPUgfOH.s:2304   .debug_loc:0000000000000595 .LLST1
     /tmp/ccPUgfOH.s:2315   .debug_loc:00000000000005cb .LLST2
     /tmp/ccPUgfOH.s:2473   .debug_str:000000000000007b .LASF46
     /tmp/ccPUgfOH.s:2334   .debug_loc:0000000000000627 .LLST3
     /tmp/ccPUgfOH.s:2533   .debug_str:0000000000000343 .LASF48
     /tmp/ccPUgfOH.s:99     .text:0000000000000070 .LBB21
     /tmp/ccPUgfOH.s:112    .text:0000000000000080 .LBE21
     /tmp/ccPUgfOH.s:2345   .debug_loc:000000000000065d .LLST4
     /tmp/ccPUgfOH.s:211    .text:000000000000010c .LBB24
     /tmp/ccPUgfOH.s:309    .text:0000000000000184 .LBE24
     /tmp/ccPUgfOH.s:2481   .debug_str:000000000000009a .LASF47
     /tmp/ccPUgfOH.s:2356   .debug_loc:0000000000000693 .LLST5
     /tmp/ccPUgfOH.s:2379   .debug_loc:00000000000006f3 .LLST6
     /tmp/ccPUgfOH.s:2394   .debug_loc:000000000000073c .LLST7
     /tmp/ccPUgfOH.s:272    .text:000000000000015c .LBB26
     /tmp/ccPUgfOH.s:285    .text:000000000000016c .LBE26
     /tmp/ccPUgfOH.s:2401   .debug_loc:000000000000075f .LLST8
     /tmp/ccPUgfOH.s:23     .text:0000000000000010 .LBB13
     /tmp/ccPUgfOH.s:405    .text:00000000000001f4 .LVL34
     /tmp/ccPUgfOH.s:584    .text:00000000000002f8 .LVL51
     /tmp/ccPUgfOH.s:640    .text:000000000000034c .LVL56
     /tmp/ccPUgfOH.s:654    .text:0000000000000360 .LVL57
     /tmp/ccPUgfOH.s:662    .text:0000000000000364 .LVL58
     /tmp/ccPUgfOH.s:419    .text:000000000000020c .LVL35
     /tmp/ccPUgfOH.s:453    .text:000000000000022c .LVL40
     /tmp/ccPUgfOH.s:496    .text:000000000000028c .LVL41
     /tmp/ccPUgfOH.s:515    .text:00000000000002a4 .LVL42
     /tmp/ccPUgfOH.s:527    .text:00000000000002b4 .LVL43
     /tmp/ccPUgfOH.s:555    .text:00000000000002d8 .LVL47
     /tmp/ccPUgfOH.s:567    .text:00000000000002e4 .LVL48
     /tmp/ccPUgfOH.s:626    .text:0000000000000338 .LVL54
     /tmp/ccPUgfOH.s:433    .text:0000000000000214 .LVL37
     /tmp/ccPUgfOH.s:444    .text:0000000000000220 .LVL38
     /tmp/ccPUgfOH.s:450    .text:0000000000000228 .LVL39
     /tmp/ccPUgfOH.s:543    .text:00000000000002c4 .LVL45
     /tmp/ccPUgfOH.s:549    .text:00000000000002cc .LVL46
     /tmp/ccPUgfOH.s:572    .text:00000000000002e8 .LVL49
     /tmp/ccPUgfOH.s:579    .text:00000000000002f4 .LVL50
     /tmp/ccPUgfOH.s:636    .text:0000000000000344 .LVL55
     /tmp/ccPUgfOH.s:429    .text:0000000000000210 .LVL36
     /tmp/ccPUgfOH.s:536    .text:00000000000002b8 .LVL44
GAS LISTING /tmp/ccPUgfOH.s 			page 27


     /tmp/ccPUgfOH.s:323    .text:0000000000000184 .LVL26
     /tmp/ccPUgfOH.s:347    .text:00000000000001b0 .LVL27
     /tmp/ccPUgfOH.s:357    .text:00000000000001bc .LVL28
     /tmp/ccPUgfOH.s:381    .text:00000000000001e0 .LVL29
     /tmp/ccPUgfOH.s:383    .text:00000000000001e4 .LVL30
     /tmp/ccPUgfOH.s:387    .text:00000000000001e8 .LVL31
     /tmp/ccPUgfOH.s:389    .text:00000000000001ec .LVL32
     /tmp/ccPUgfOH.s:393    .text:00000000000001f0 .LVL33
     /tmp/ccPUgfOH.s:14     .text:0000000000000000 .LVL0
     /tmp/ccPUgfOH.s:42     .text:0000000000000028 .LVL2
     /tmp/ccPUgfOH.s:94     .text:000000000000006c .LVL4
     /tmp/ccPUgfOH.s:110    .text:0000000000000080 .LVL7
     /tmp/ccPUgfOH.s:132    .text:0000000000000090 .LVL9
     /tmp/ccPUgfOH.s:175    .text:00000000000000f0 .LVL10
     /tmp/ccPUgfOH.s:199    .text:0000000000000104 .LVL12
     /tmp/ccPUgfOH.s:205    .text:0000000000000108 .LVL13
     /tmp/ccPUgfOH.s:207    .text:000000000000010c .LVL14
     /tmp/ccPUgfOH.s:267    .text:0000000000000158 .LVL18
     /tmp/ccPUgfOH.s:283    .text:000000000000016c .LVL21
     /tmp/ccPUgfOH.s:294    .text:0000000000000174 .LVL23
     /tmp/ccPUgfOH.s:300    .text:000000000000017c .LVL24
     /tmp/ccPUgfOH.s:306    .text:0000000000000180 .LVL25
     /tmp/ccPUgfOH.s:35     .text:0000000000000024 .LVL1
     /tmp/ccPUgfOH.s:117    .text:0000000000000084 .LVL8
     /tmp/ccPUgfOH.s:290    .text:0000000000000170 .LVL22
     /tmp/ccPUgfOH.s:83     .text:0000000000000060 .LVL3
     /tmp/ccPUgfOH.s:98     .text:0000000000000070 .LVL5
     /tmp/ccPUgfOH.s:104    .text:0000000000000078 .LVL6
     /tmp/ccPUgfOH.s:218    .text:0000000000000118 .LVL15
     /tmp/ccPUgfOH.s:250    .text:0000000000000144 .LVL16
     /tmp/ccPUgfOH.s:256    .text:000000000000014c .LVL17
     /tmp/ccPUgfOH.s:271    .text:000000000000015c .LVL19
     /tmp/ccPUgfOH.s:277    .text:0000000000000164 .LVL20
     /tmp/ccPUgfOH.s:681    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccPUgfOH.s:37     .text:0000000000000024 .LBE13
     /tmp/ccPUgfOH.s:135    .text:0000000000000090 .LBB31
     /tmp/ccPUgfOH.s:178    .text:00000000000000f0 .LBE31
     /tmp/ccPUgfOH.s:39     .text:0000000000000024 .LBB16
     /tmp/ccPUgfOH.s:123    .text:0000000000000084 .LBE16
     /tmp/ccPUgfOH.s:179    .text:00000000000000f0 .LBB32
     /tmp/ccPUgfOH.s:312    .text:0000000000000184 .LBE32
     /tmp/ccPUgfOH.s:59     .text:0000000000000040 .LBB19
     /tmp/ccPUgfOH.s:120    .text:0000000000000084 .LBE19
     /tmp/ccPUgfOH.s:192    .text:00000000000000f8 .LBB23
     /tmp/ccPUgfOH.s:210    .text:000000000000010c .LBE23
     /tmp/ccPUgfOH.s:421    .text:000000000000020c .LBE36
     /tmp/ccPUgfOH.s:456    .text:000000000000022c .LBB41
     /tmp/ccPUgfOH.s:499    .text:000000000000028c .LBE41
     /tmp/ccPUgfOH.s:426    .text:000000000000020c .LBB39
     /tmp/ccPUgfOH.s:430    .text:0000000000000210 .LBE39
     /tmp/ccPUgfOH.s:435    .text:0000000000000214 .LBB40
     /tmp/ccPUgfOH.s:455    .text:000000000000022c .LBE40
     /tmp/ccPUgfOH.s:511    .text:00000000000002a0 .LBB42
     /tmp/ccPUgfOH.s:529    .text:00000000000002b4 .LBE42
     /tmp/ccPUgfOH.s:557    .text:00000000000002d8 .LBB43
     /tmp/ccPUgfOH.s:569    .text:00000000000002e4 .LBE43

GAS LISTING /tmp/ccPUgfOH.s 			page 28


UNDEFINED SYMBOLS
HEAP_START_ADDR
HEAP_END_ADDR
