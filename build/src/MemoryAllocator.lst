GAS LISTING /tmp/ccwRXG7a.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator10kmem_allocEm
   9              	_ZN15MemoryAllocator10kmem_allocEm:
  10              	.LFB8:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** //
   2:src/MemoryAllocator.cpp **** // Created by os on 6/20/22.
   3:src/MemoryAllocator.cpp **** //
   4:src/MemoryAllocator.cpp **** 
   5:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.hpp"
   6:src/MemoryAllocator.cpp **** 
   7:src/MemoryAllocator.cpp **** 
   8:src/MemoryAllocator.cpp **** 
   9:src/MemoryAllocator.cpp **** 
  10:src/MemoryAllocator.cpp **** MemoryAllocator* MemoryAllocator::instance= nullptr;
  11:src/MemoryAllocator.cpp **** 
  12:src/MemoryAllocator.cpp **** 
  13:src/MemoryAllocator.cpp **** void* MemoryAllocator::kmem_alloc(size_t size){
  12              		.loc 1 13 47
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
  21 000c 93070500 		mv	a5,a0
  14:src/MemoryAllocator.cpp ****     MemoryAllocator* ma = getInstance();
  22              		.loc 1 14 5
  23              	.LBB13:
  24              	.LBB14:
  25              		.file 2 "src/../h/MemoryAllocator.hpp"
   1:src/../h/MemoryAllocator.hpp **** //
   2:src/../h/MemoryAllocator.hpp **** // Created by os on 6/20/22.
   3:src/../h/MemoryAllocator.hpp **** //
   4:src/../h/MemoryAllocator.hpp **** 
   5:src/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   6:src/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   7:src/../h/MemoryAllocator.hpp **** 
   8:src/../h/MemoryAllocator.hpp **** #include "../lib/mem.h"
   9:src/../h/MemoryAllocator.hpp **** #include "DoublyLinkedList.hpp"
  10:src/../h/MemoryAllocator.hpp **** #include "../lib/hw.h"
  11:src/../h/MemoryAllocator.hpp **** 
  12:src/../h/MemoryAllocator.hpp **** 
  13:src/../h/MemoryAllocator.hpp **** class MemoryAllocator {
  14:src/../h/MemoryAllocator.hpp **** public:
  15:src/../h/MemoryAllocator.hpp ****     typedef DoublyLinkedList<size_t>::Node FreeMem;
  16:src/../h/MemoryAllocator.hpp **** 
  17:src/../h/MemoryAllocator.hpp ****     static MemoryAllocator* getInstance(){
  18:src/../h/MemoryAllocator.hpp ****         if(instance == nullptr){
  26              		.loc 2 18 9
GAS LISTING /tmp/ccwRXG7a.s 			page 2


  27              		.loc 2 18 21 is_stmt 0
  28 0010 17070000 		ld	a4,.LANCHOR0
  28      03370700 
  29              		.loc 2 18 9
  30 0018 630E0706 		beqz	a4,.L18
  31              	.LVL1:
  32              	.L2:
  19:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
  20:src/../h/MemoryAllocator.hpp **** 
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head=(FreeMem*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator));
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->address=(void*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
  25:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
  26:src/../h/MemoryAllocator.hpp **** 
  27:src/../h/MemoryAllocator.hpp ****             instance->pcbList.head= nullptr;
  28:src/../h/MemoryAllocator.hpp ****         }
  29:src/../h/MemoryAllocator.hpp ****         return instance;
  33              		.loc 2 29 9 is_stmt 1
  34              		.loc 2 29 16 is_stmt 0
  35 001c 97060000 		ld	a3,.LANCHOR0
  35      83B60600 
  36              	.LVL2:
  37              	.LBE14:
  38              	.LBE13:
  15:src/MemoryAllocator.cpp ****     for(FreeMem* cur = ma->freeList.head; cur!=nullptr; cur=cur->next){
  39              		.loc 1 15 5 is_stmt 1
  40              	.LBB16:
  41              		.loc 1 15 18 is_stmt 0
  42 0024 03B50600 		ld	a0,0(a3)
  43              	.LVL3:
  44              	.L5:
  45              		.loc 1 15 46 is_stmt 1 discriminator 1
  46 0028 63000506 		beqz	a0,.L1
  47              	.LBB17:
  16:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
  48              		.loc 1 16 9
  49              		.loc 1 16 17 is_stmt 0
  50 002c 03370500 		ld	a4,0(a0)
  51              		.loc 1 16 9
  52 0030 6368F70C 		bltu	a4,a5,.L19
  17:src/MemoryAllocator.cpp ****         //Found
  18:src/MemoryAllocator.cpp **** 
  19:src/MemoryAllocator.cpp ****         if(cur->size-size<=sizeof(FreeMem)){
  53              		.loc 1 19 9 is_stmt 1
  54              	.LBB18:
  55              		.loc 1 19 21 is_stmt 0
  56 0034 3307F740 		sub	a4,a4,a5
  57              		.loc 1 19 9
  58 0038 13060002 		li	a2,32
  59 003c 6360E60E 		bgtu	a4,a2,.L6
  60              	.LBB19:
  20:src/MemoryAllocator.cpp ****             //No remaining fragment
  21:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = cur->next;
  61              		.loc 1 21 13 is_stmt 1
  62              		.loc 1 21 21 is_stmt 0
  63 0040 03378501 		ld	a4,24(a0)
GAS LISTING /tmp/ccwRXG7a.s 			page 3


  64              		.loc 1 21 13
  65 0044 6302070C 		beqz	a4,.L7
  66              		.loc 1 21 26 is_stmt 1 discriminator 1
  67              		.loc 1 21 49 is_stmt 0 discriminator 1
  68 0048 03360501 		ld	a2,16(a0)
  69              		.loc 1 21 42 discriminator 1
  70 004c 2338C700 		sd	a2,16(a4)
  71              	.L8:
  22:src/MemoryAllocator.cpp ****             else ma->freeList.head = cur->next;
  23:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
  72              		.loc 1 23 13 is_stmt 1
  73              		.loc 1 23 21 is_stmt 0
  74 0050 03370501 		ld	a4,16(a0)
  75              		.loc 1 23 13
  76 0054 63060700 		beqz	a4,.L9
  77              		.loc 1 23 26 is_stmt 1 discriminator 1
  78              		.loc 1 23 49 is_stmt 0 discriminator 1
  79 0058 03368501 		ld	a2,24(a0)
  80              		.loc 1 23 42 discriminator 1
  81 005c 233CC700 		sd	a2,24(a4)
  82              	.L9:
  24:src/MemoryAllocator.cpp **** 
  25:src/MemoryAllocator.cpp ****             //add process to the end of pcb list
  26:src/MemoryAllocator.cpp ****             FreeMem* proc = cur;
  83              		.loc 1 26 13 is_stmt 1
  84              	.LVL4:
  27:src/MemoryAllocator.cpp ****             proc->size=size;
  85              		.loc 1 27 13
  86              		.loc 1 27 23 is_stmt 0
  87 0060 2330F500 		sd	a5,0(a0)
  28:src/MemoryAllocator.cpp ****             proc->address=cur;
  88              		.loc 1 28 13 is_stmt 1
  89              		.loc 1 28 26 is_stmt 0
  90 0064 2334A500 		sd	a0,8(a0)
  29:src/MemoryAllocator.cpp ****             proc->next= nullptr;
  91              		.loc 1 29 13 is_stmt 1
  92              		.loc 1 29 23 is_stmt 0
  93 0068 23380500 		sd	zero,16(a0)
  30:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
  94              		.loc 1 30 13 is_stmt 1
  95              	.LBB20:
  96              		.loc 1 30 29 is_stmt 0
  97 006c 83B70601 		ld	a5,16(a3)
  98              	.LVL5:
  99              		.loc 1 30 13
 100 0070 6382070A 		beqz	a5,.L20
 101              	.L10:
 102              	.LVL6:
 103              	.LBB21:
  31:src/MemoryAllocator.cpp ****             {
  32:src/MemoryAllocator.cpp ****                 ma->pcbList.head = cur;
  33:src/MemoryAllocator.cpp **** 
  34:src/MemoryAllocator.cpp ****             } else
  35:src/MemoryAllocator.cpp ****             {
  36:src/MemoryAllocator.cpp ****                 FreeMem* temp;
  37:src/MemoryAllocator.cpp ****                 for( temp = ma->pcbList.head; temp->next!=nullptr; temp=temp->next);
 104              		.loc 1 37 57 is_stmt 1 discriminator 3
GAS LISTING /tmp/ccwRXG7a.s 			page 4


 105 0074 13870700 		mv	a4,a5
 106              		.loc 1 37 53 is_stmt 0 discriminator 3
 107 0078 83B70701 		ld	a5,16(a5)
 108              	.LVL7:
 109              		.loc 1 37 57 discriminator 3
 110 007c E39C07FE 		bnez	a5,.L10
  38:src/MemoryAllocator.cpp ****                 temp->next=cur;
 111              		.loc 1 38 17 is_stmt 1
 112              		.loc 1 38 27 is_stmt 0
 113 0080 2338A700 		sd	a0,16(a4)
 114              	.LVL8:
 115              	.L11:
 116              	.LBE21:
 117              	.LBE20:
  39:src/MemoryAllocator.cpp ****             }
  40:src/MemoryAllocator.cpp **** 
  41:src/MemoryAllocator.cpp ****             return cur->address;
 118              		.loc 1 41 13 is_stmt 1
 119              		.loc 1 41 25 is_stmt 0
 120 0084 03358500 		ld	a0,8(a0)
 121              	.LVL9:
 122              	.L1:
 123              	.LBE19:
 124              	.LBE18:
 125              	.LBE17:
 126              	.LBE16:
  42:src/MemoryAllocator.cpp **** 
  43:src/MemoryAllocator.cpp ****         }
  44:src/MemoryAllocator.cpp ****         else{
  45:src/MemoryAllocator.cpp ****             FreeMem * newfrgm = (FreeMem *)((size_t)cur + size + sizeof(FreeMem));
  46:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
  47:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
  48:src/MemoryAllocator.cpp ****             if(cur->next) cur->next->prev = newfrgm;
  49:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
  50:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
  51:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
  52:src/MemoryAllocator.cpp ****             newfrgm->address= (void*)((size_t)cur + size + sizeof(FreeMem));
  53:src/MemoryAllocator.cpp **** 
  54:src/MemoryAllocator.cpp ****             //add process to the end of pcb list
  55:src/MemoryAllocator.cpp ****             FreeMem* proc = cur;
  56:src/MemoryAllocator.cpp ****             proc->size=size;
  57:src/MemoryAllocator.cpp ****             proc->address=cur;
  58:src/MemoryAllocator.cpp ****             proc->next= nullptr;
  59:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
  60:src/MemoryAllocator.cpp ****             {
  61:src/MemoryAllocator.cpp ****                 ma->pcbList.head = cur;
  62:src/MemoryAllocator.cpp **** 
  63:src/MemoryAllocator.cpp ****             } else
  64:src/MemoryAllocator.cpp ****             {
  65:src/MemoryAllocator.cpp ****                 FreeMem* temp;
  66:src/MemoryAllocator.cpp ****                 for( temp = ma->pcbList.head; temp->next!=nullptr; temp=temp->next);
  67:src/MemoryAllocator.cpp ****                 temp->next=cur;
  68:src/MemoryAllocator.cpp ****             }
  69:src/MemoryAllocator.cpp **** 
  70:src/MemoryAllocator.cpp ****             return cur->address;
  71:src/MemoryAllocator.cpp ****         }
  72:src/MemoryAllocator.cpp ****     }
GAS LISTING /tmp/ccwRXG7a.s 			page 5


  73:src/MemoryAllocator.cpp ****     return nullptr;
  74:src/MemoryAllocator.cpp **** 
  75:src/MemoryAllocator.cpp ****     //initialize address at HEAP_START_ADRESS at the beginning
  76:src/MemoryAllocator.cpp ****     //ubaciti prvi element u listu i postaviti mu adresu na heap start adress + sizeof(freeMem)
  77:src/MemoryAllocator.cpp **** }
 127              		.loc 1 77 1
 128 0088 03348100 		ld	s0,8(sp)
 129              		.cfi_remember_state
 130              		.cfi_restore 8
 131              		.cfi_def_cfa 2, 16
 132 008c 13010101 		addi	sp,sp,16
 133              		.cfi_def_cfa_offset 0
 134 0090 67800000 		jr	ra
 135              	.LVL10:
 136              	.L18:
 137              		.cfi_restore_state
 138              	.LBB31:
 139              	.LBB15:
  19:src/../h/MemoryAllocator.hpp **** 
 140              		.loc 2 19 13 is_stmt 1
  19:src/../h/MemoryAllocator.hpp **** 
 141              		.loc 2 19 22 is_stmt 0
 142 0094 17060000 		la	a2,HEAP_START_ADDR
 142      03360600 
 143 009c 03370600 		ld	a4,0(a2)
 144 00a0 97060000 		lla	a3,.LANCHOR0
 144      93860600 
 145 00a8 23B0E600 		sd	a4,0(a3)
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->address=(void*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator
 146              		.loc 2 21 13 is_stmt 1
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->address=(void*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator
 147              		.loc 2 21 71 is_stmt 0
 148 00ac 93050702 		addi	a1,a4,32
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->address=(void*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator
 149              		.loc 2 21 36
 150 00b0 2330B700 		sd	a1,0(a4)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 151              		.loc 2 22 13 is_stmt 1
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 152              		.loc 2 22 77 is_stmt 0
 153 00b4 03360600 		ld	a2,0(a2)
 154 00b8 13050602 		addi	a0,a2,32
 155              	.LVL11:
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 156              		.loc 2 22 32
 157 00bc 03B70600 		ld	a4,0(a3)
 158 00c0 83350700 		ld	a1,0(a4)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 159              		.loc 2 22 45
 160 00c4 23B4A500 		sd	a0,8(a1)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 161              		.loc 2 23 13 is_stmt 1
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 162              		.loc 2 23 32 is_stmt 0
 163 00c8 83350700 		ld	a1,0(a4)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 164              		.loc 2 23 66
GAS LISTING /tmp/ccwRXG7a.s 			page 6


 165 00cc 17070000 		la	a4,HEAP_END_ADDR
 165      03370700 
 166 00d4 03370700 		ld	a4,0(a4)
 167 00d8 3307C740 		sub	a4,a4,a2
 168 00dc 130707FE 		addi	a4,a4,-32
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 169              		.loc 2 23 43
 170 00e0 23B0E500 		sd	a4,0(a1)
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 171              		.loc 2 24 13 is_stmt 1
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 172              		.loc 2 24 32 is_stmt 0
 173 00e4 03B70600 		ld	a4,0(a3)
 174 00e8 83360700 		ld	a3,0(a4)
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 175              		.loc 2 24 42
 176 00ec 23B80600 		sd	zero,16(a3)
  25:src/../h/MemoryAllocator.hpp **** 
 177              		.loc 2 25 13 is_stmt 1
  25:src/../h/MemoryAllocator.hpp **** 
 178              		.loc 2 25 32 is_stmt 0
 179 00f0 83360700 		ld	a3,0(a4)
  25:src/../h/MemoryAllocator.hpp **** 
 180              		.loc 2 25 42
 181 00f4 23BC0600 		sd	zero,24(a3)
  27:src/../h/MemoryAllocator.hpp ****         }
 182              		.loc 2 27 13 is_stmt 1
  27:src/../h/MemoryAllocator.hpp ****         }
 183              		.loc 2 27 35 is_stmt 0
 184 00f8 23380700 		sd	zero,16(a4)
 185 00fc 6FF01FF2 		j	.L2
 186              	.LVL12:
 187              	.L19:
 188              	.LBE15:
 189              	.LBE31:
 190              	.LBB32:
 191              	.LBB29:
  16:src/MemoryAllocator.cpp ****         //Found
 192              		.loc 1 16 28 is_stmt 1 discriminator 1
 193              	.LBE29:
  15:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
 194              		.loc 1 15 5 discriminator 1
  15:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
 195              		.loc 1 15 60 is_stmt 0 discriminator 1
 196 0100 03350501 		ld	a0,16(a0)
 197              	.LVL13:
  15:src/MemoryAllocator.cpp ****         if(cur->size<size) continue;
 198              		.loc 1 15 5 discriminator 1
 199 0104 6FF05FF2 		j	.L5
 200              	.L7:
 201              	.LBB30:
 202              	.LBB28:
 203              	.LBB23:
  22:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
 204              		.loc 1 22 18 is_stmt 1
  22:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
 205              		.loc 1 22 43 is_stmt 0
GAS LISTING /tmp/ccwRXG7a.s 			page 7


 206 0108 03370501 		ld	a4,16(a0)
  22:src/MemoryAllocator.cpp ****             if(cur->next)cur->next->prev = cur->prev;
 207              		.loc 1 22 36
 208 010c 23B0E600 		sd	a4,0(a3)
 209 0110 6FF01FF4 		j	.L8
 210              	.LVL14:
 211              	.L20:
 212              	.LBB22:
  32:src/MemoryAllocator.cpp **** 
 213              		.loc 1 32 17 is_stmt 1
  32:src/MemoryAllocator.cpp **** 
 214              		.loc 1 32 34 is_stmt 0
 215 0114 23B8A600 		sd	a0,16(a3)
 216              	.LVL15:
 217 0118 6FF0DFF6 		j	.L11
 218              	.LVL16:
 219              	.L6:
 220              	.LBE22:
 221              	.LBE23:
 222              	.LBB24:
  45:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
 223              		.loc 1 45 13 is_stmt 1
  45:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
 224              		.loc 1 45 57 is_stmt 0
 225 011c B305F500 		add	a1,a0,a5
  45:src/MemoryAllocator.cpp ****             if(cur->prev)cur->prev->next = newfrgm;
 226              		.loc 1 45 64
 227 0120 13870502 		addi	a4,a1,32
 228              	.LVL17:
  46:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 229              		.loc 1 46 13 is_stmt 1
  46:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 230              		.loc 1 46 21 is_stmt 0
 231 0124 03368501 		ld	a2,24(a0)
  46:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 232              		.loc 1 46 13
 233 0128 63000606 		beqz	a2,.L12
  46:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 234              		.loc 1 46 26 is_stmt 1 discriminator 1
  46:src/MemoryAllocator.cpp ****             else ma->freeList.head = newfrgm;
 235              		.loc 1 46 42 is_stmt 0 discriminator 1
 236 012c 2338E600 		sd	a4,16(a2)
 237              	.L13:
  48:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 238              		.loc 1 48 13 is_stmt 1
  48:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 239              		.loc 1 48 21 is_stmt 0
 240 0130 03360501 		ld	a2,16(a0)
  48:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 241              		.loc 1 48 13
 242 0134 63040600 		beqz	a2,.L14
  48:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 243              		.loc 1 48 27 is_stmt 1 discriminator 1
  48:src/MemoryAllocator.cpp ****             newfrgm->prev = cur->prev;
 244              		.loc 1 48 43 is_stmt 0 discriminator 1
 245 0138 233CE600 		sd	a4,24(a2)
 246              	.L14:
GAS LISTING /tmp/ccwRXG7a.s 			page 8


  49:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
 247              		.loc 1 49 13 is_stmt 1
  49:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
 248              		.loc 1 49 34 is_stmt 0
 249 013c 03368501 		ld	a2,24(a0)
  49:src/MemoryAllocator.cpp ****             newfrgm->next=cur->next;
 250              		.loc 1 49 27
 251 0140 233CC700 		sd	a2,24(a4)
  50:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
 252              		.loc 1 50 13 is_stmt 1
  50:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
 253              		.loc 1 50 32 is_stmt 0
 254 0144 03360501 		ld	a2,16(a0)
  50:src/MemoryAllocator.cpp ****             newfrgm->size=cur->size-size;
 255              		.loc 1 50 26
 256 0148 2338C700 		sd	a2,16(a4)
  51:src/MemoryAllocator.cpp ****             newfrgm->address= (void*)((size_t)cur + size + sizeof(FreeMem));
 257              		.loc 1 51 13 is_stmt 1
  51:src/MemoryAllocator.cpp ****             newfrgm->address= (void*)((size_t)cur + size + sizeof(FreeMem));
 258              		.loc 1 51 32 is_stmt 0
 259 014c 03360500 		ld	a2,0(a0)
  51:src/MemoryAllocator.cpp ****             newfrgm->address= (void*)((size_t)cur + size + sizeof(FreeMem));
 260              		.loc 1 51 36
 261 0150 3306F640 		sub	a2,a2,a5
  51:src/MemoryAllocator.cpp ****             newfrgm->address= (void*)((size_t)cur + size + sizeof(FreeMem));
 262              		.loc 1 51 26
 263 0154 23B0C502 		sd	a2,32(a1)
  52:src/MemoryAllocator.cpp **** 
 264              		.loc 1 52 13 is_stmt 1
  52:src/MemoryAllocator.cpp **** 
 265              		.loc 1 52 29 is_stmt 0
 266 0158 2334E700 		sd	a4,8(a4)
  55:src/MemoryAllocator.cpp ****             proc->size=size;
 267              		.loc 1 55 13 is_stmt 1
 268              	.LVL18:
  56:src/MemoryAllocator.cpp ****             proc->address=cur;
 269              		.loc 1 56 13
  56:src/MemoryAllocator.cpp ****             proc->address=cur;
 270              		.loc 1 56 23 is_stmt 0
 271 015c 2330F500 		sd	a5,0(a0)
  57:src/MemoryAllocator.cpp ****             proc->next= nullptr;
 272              		.loc 1 57 13 is_stmt 1
  57:src/MemoryAllocator.cpp ****             proc->next= nullptr;
 273              		.loc 1 57 26 is_stmt 0
 274 0160 2334A500 		sd	a0,8(a0)
  58:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
 275              		.loc 1 58 13 is_stmt 1
  58:src/MemoryAllocator.cpp ****             if (ma->pcbList.head == nullptr)
 276              		.loc 1 58 23 is_stmt 0
 277 0164 23380500 		sd	zero,16(a0)
  59:src/MemoryAllocator.cpp ****             {
 278              		.loc 1 59 13 is_stmt 1
 279              	.LBB25:
  59:src/MemoryAllocator.cpp ****             {
 280              		.loc 1 59 29 is_stmt 0
 281 0168 83B70601 		ld	a5,16(a3)
 282              	.LVL19:
GAS LISTING /tmp/ccwRXG7a.s 			page 9


  59:src/MemoryAllocator.cpp ****             {
 283              		.loc 1 59 13
 284 016c 63820702 		beqz	a5,.L21
 285              	.LVL20:
 286              	.L15:
 287              	.LBB26:
  66:src/MemoryAllocator.cpp ****                 temp->next=cur;
 288              		.loc 1 66 57 is_stmt 1 discriminator 3
 289 0170 13870700 		mv	a4,a5
  66:src/MemoryAllocator.cpp ****                 temp->next=cur;
 290              		.loc 1 66 53 is_stmt 0 discriminator 3
 291 0174 83B70701 		ld	a5,16(a5)
 292              	.LVL21:
  66:src/MemoryAllocator.cpp ****                 temp->next=cur;
 293              		.loc 1 66 57 discriminator 3
 294 0178 E39C07FE 		bnez	a5,.L15
  67:src/MemoryAllocator.cpp ****             }
 295              		.loc 1 67 17 is_stmt 1
  67:src/MemoryAllocator.cpp ****             }
 296              		.loc 1 67 27 is_stmt 0
 297 017c 2338A700 		sd	a0,16(a4)
 298              	.LVL22:
 299              	.L16:
 300              	.LBE26:
 301              	.LBE25:
  70:src/MemoryAllocator.cpp ****         }
 302              		.loc 1 70 13 is_stmt 1
  70:src/MemoryAllocator.cpp ****         }
 303              		.loc 1 70 25 is_stmt 0
 304 0180 03358500 		ld	a0,8(a0)
 305              	.LVL23:
 306 0184 6FF05FF0 		j	.L1
 307              	.LVL24:
 308              	.L12:
  47:src/MemoryAllocator.cpp ****             if(cur->next) cur->next->prev = newfrgm;
 309              		.loc 1 47 18 is_stmt 1
  47:src/MemoryAllocator.cpp ****             if(cur->next) cur->next->prev = newfrgm;
 310              		.loc 1 47 36 is_stmt 0
 311 0188 23B0E600 		sd	a4,0(a3)
 312 018c 6FF05FFA 		j	.L13
 313              	.LVL25:
 314              	.L21:
 315              	.LBB27:
  61:src/MemoryAllocator.cpp **** 
 316              		.loc 1 61 17 is_stmt 1
  61:src/MemoryAllocator.cpp **** 
 317              		.loc 1 61 34 is_stmt 0
 318 0190 23B8A600 		sd	a0,16(a3)
 319              	.LVL26:
 320 0194 6FF0DFFE 		j	.L16
 321              	.LBE27:
 322              	.LBE24:
 323              	.LBE28:
 324              	.LBE30:
 325              	.LBE32:
 326              		.cfi_endproc
 327              	.LFE8:
GAS LISTING /tmp/ccwRXG7a.s 			page 10


 329              		.align	2
 330              		.globl	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
 332              	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE:
 333              	.LFB9:
  78:src/MemoryAllocator.cpp **** 
  79:src/MemoryAllocator.cpp **** //try to join cur with cur->next segment
  80:src/MemoryAllocator.cpp **** int MemoryAllocator::tryToJoin(FreeMem *cur) {
 334              		.loc 1 80 46 is_stmt 1
 335              		.cfi_startproc
 336              	.LVL27:
 337 0198 130101FF 		addi	sp,sp,-16
 338              		.cfi_def_cfa_offset 16
 339 019c 23348100 		sd	s0,8(sp)
 340              		.cfi_offset 8, -8
 341 01a0 13040101 		addi	s0,sp,16
 342              		.cfi_def_cfa 8, 0
  81:src/MemoryAllocator.cpp ****     if(cur== nullptr)return 0;
 343              		.loc 1 81 5
 344 01a4 63060504 		beqz	a0,.L25
  82:src/MemoryAllocator.cpp ****     if(cur->next && (char*)cur+cur->size==(char*)(cur->next)){
 345              		.loc 1 82 5
 346              		.loc 1 82 13 is_stmt 0
 347 01a8 83370501 		ld	a5,16(a0)
 348              		.loc 1 82 5
 349 01ac 63860704 		beqz	a5,.L26
 350              		.loc 1 82 37 discriminator 1
 351 01b0 03370500 		ld	a4,0(a0)
 352              		.loc 1 82 31 discriminator 1
 353 01b4 B306E500 		add	a3,a0,a4
 354              		.loc 1 82 18 discriminator 1
 355 01b8 638AD700 		beq	a5,a3,.L29
  83:src/MemoryAllocator.cpp ****         //remove the cur->next segment
  84:src/MemoryAllocator.cpp ****         cur->size+=cur->next->size;
  85:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
  86:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
  87:src/MemoryAllocator.cpp ****         return 1;
  88:src/MemoryAllocator.cpp ****     }
  89:src/MemoryAllocator.cpp ****     else return 0;
 356              		.loc 1 89 17
 357 01bc 13050000 		li	a0,0
 358              	.LVL28:
 359              	.L23:
  90:src/MemoryAllocator.cpp **** }
 360              		.loc 1 90 1
 361 01c0 03348100 		ld	s0,8(sp)
 362              		.cfi_remember_state
 363              		.cfi_restore 8
 364              		.cfi_def_cfa 2, 16
 365 01c4 13010101 		addi	sp,sp,16
 366              		.cfi_def_cfa_offset 0
 367 01c8 67800000 		jr	ra
 368              	.LVL29:
 369              	.L29:
 370              		.cfi_restore_state
  84:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
 371              		.loc 1 84 9 is_stmt 1
  84:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
GAS LISTING /tmp/ccwRXG7a.s 			page 11


 372              		.loc 1 84 31 is_stmt 0
 373 01cc 83B60700 		ld	a3,0(a5)
  84:src/MemoryAllocator.cpp ****         cur->next = cur->next->next;
 374              		.loc 1 84 18
 375 01d0 3307D700 		add	a4,a4,a3
 376 01d4 2330E500 		sd	a4,0(a0)
  85:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
 377              		.loc 1 85 9 is_stmt 1
  85:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
 378              		.loc 1 85 32 is_stmt 0
 379 01d8 83B70701 		ld	a5,16(a5)
  85:src/MemoryAllocator.cpp ****         if(cur->next)cur->next->prev=cur;
 380              		.loc 1 85 19
 381 01dc 2338F500 		sd	a5,16(a0)
  86:src/MemoryAllocator.cpp ****         return 1;
 382              		.loc 1 86 9 is_stmt 1
 383 01e0 63840700 		beqz	a5,.L24
  86:src/MemoryAllocator.cpp ****         return 1;
 384              		.loc 1 86 22 discriminator 1
  86:src/MemoryAllocator.cpp ****         return 1;
 385              		.loc 1 86 37 is_stmt 0 discriminator 1
 386 01e4 23BCA700 		sd	a0,24(a5)
 387              	.L24:
  87:src/MemoryAllocator.cpp ****     }
 388              		.loc 1 87 9 is_stmt 1
  87:src/MemoryAllocator.cpp ****     }
 389              		.loc 1 87 16 is_stmt 0
 390 01e8 13051000 		li	a0,1
 391              	.LVL30:
 392 01ec 6FF05FFD 		j	.L23
 393              	.LVL31:
 394              	.L25:
  81:src/MemoryAllocator.cpp ****     if(cur->next && (char*)cur+cur->size==(char*)(cur->next)){
 395              		.loc 1 81 29
 396 01f0 13050000 		li	a0,0
 397              	.LVL32:
 398 01f4 6FF0DFFC 		j	.L23
 399              	.LVL33:
 400              	.L26:
  89:src/MemoryAllocator.cpp **** }
 401              		.loc 1 89 17
 402 01f8 13050000 		li	a0,0
 403              	.LVL34:
 404 01fc 6FF05FFC 		j	.L23
 405              		.cfi_endproc
 406              	.LFE9:
 408              		.align	2
 409              		.globl	_ZN15MemoryAllocator9kmem_freeEPv
 411              	_ZN15MemoryAllocator9kmem_freeEPv:
 412              	.LFB10:
  91:src/MemoryAllocator.cpp **** 
  92:src/MemoryAllocator.cpp **** int MemoryAllocator::kmem_free(void* addr){
 413              		.loc 1 92 43 is_stmt 1
 414              		.cfi_startproc
 415              	.LVL35:
 416 0200 130101FD 		addi	sp,sp,-48
 417              		.cfi_def_cfa_offset 48
GAS LISTING /tmp/ccwRXG7a.s 			page 12


 418 0204 23341102 		sd	ra,40(sp)
 419 0208 23308102 		sd	s0,32(sp)
 420 020c 233C9100 		sd	s1,24(sp)
 421 0210 23382101 		sd	s2,16(sp)
 422 0214 23343101 		sd	s3,8(sp)
 423 0218 23304101 		sd	s4,0(sp)
 424              		.cfi_offset 1, -8
 425              		.cfi_offset 8, -16
 426              		.cfi_offset 9, -24
 427              		.cfi_offset 18, -32
 428              		.cfi_offset 19, -40
 429              		.cfi_offset 20, -48
 430 021c 13040103 		addi	s0,sp,48
 431              		.cfi_def_cfa 8, 0
 432 0220 13090500 		mv	s2,a0
  93:src/MemoryAllocator.cpp ****     //find size of the process for deallocation
  94:src/MemoryAllocator.cpp ****     MemoryAllocator* ma = getInstance();
 433              		.loc 1 94 5
 434              	.LBB37:
 435              	.LBB38:
  18:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
 436              		.loc 2 18 9
  18:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
 437              		.loc 2 18 21 is_stmt 0
 438 0224 97070000 		ld	a5,.LANCHOR0
 438      83B70700 
  18:src/../h/MemoryAllocator.hpp ****             instance = (MemoryAllocator*)HEAP_START_ADDR;
 439              		.loc 2 18 9
 440 022c 638C0700 		beqz	a5,.L49
 441              	.L31:
 442              		.loc 2 29 9 is_stmt 1
 443              		.loc 2 29 16 is_stmt 0
 444 0230 170A0000 		ld	s4,.LANCHOR0
 444      033A0A00 
 445              	.LVL36:
 446              	.LBE38:
 447              	.LBE37:
  95:src/MemoryAllocator.cpp **** 
  96:src/MemoryAllocator.cpp ****     size_t size = -1;
 448              		.loc 1 96 5 is_stmt 1
  97:src/MemoryAllocator.cpp ****     for( FreeMem *temp = ma->pcbList.head; temp!=nullptr; temp=temp->next){
 449              		.loc 1 97 5
 450              	.LBB40:
 451              		.loc 1 97 19 is_stmt 0
 452 0238 83340A01 		ld	s1,16(s4)
 453              	.LVL37:
 454              	.LBE40:
  96:src/MemoryAllocator.cpp ****     for( FreeMem *temp = ma->pcbList.head; temp!=nullptr; temp=temp->next){
 455              		.loc 1 96 12
 456 023c 1307F0FF 		li	a4,-1
 457 0240 6F008007 		j	.L34
 458              	.LVL38:
 459              	.L49:
 460              	.LBB41:
 461              	.LBB39:
  19:src/../h/MemoryAllocator.hpp **** 
 462              		.loc 2 19 13 is_stmt 1
GAS LISTING /tmp/ccwRXG7a.s 			page 13


  19:src/../h/MemoryAllocator.hpp **** 
 463              		.loc 2 19 22 is_stmt 0
 464 0244 97060000 		la	a3,HEAP_START_ADDR
 464      83B60600 
 465 024c 83B70600 		ld	a5,0(a3)
 466 0250 17070000 		lla	a4,.LANCHOR0
 466      13070700 
 467 0258 2330F700 		sd	a5,0(a4)
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->address=(void*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator
 468              		.loc 2 21 13 is_stmt 1
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->address=(void*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator
 469              		.loc 2 21 71 is_stmt 0
 470 025c 13860702 		addi	a2,a5,32
  21:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->address=(void*)((size_t)HEAP_START_ADDR+sizeof(MemoryAllocator
 471              		.loc 2 21 36
 472 0260 23B0C700 		sd	a2,0(a5)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 473              		.loc 2 22 13 is_stmt 1
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 474              		.loc 2 22 77 is_stmt 0
 475 0264 83B60600 		ld	a3,0(a3)
 476 0268 93850602 		addi	a1,a3,32
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 477              		.loc 2 22 32
 478 026c 83370700 		ld	a5,0(a4)
 479 0270 03B60700 		ld	a2,0(a5)
  22:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->size = (size_t)HEAP_END_ADDR-((size_t)HEAP_START_ADDR+sizeof(M
 480              		.loc 2 22 45
 481 0274 2334B600 		sd	a1,8(a2)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 482              		.loc 2 23 13 is_stmt 1
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 483              		.loc 2 23 32 is_stmt 0
 484 0278 03B60700 		ld	a2,0(a5)
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 485              		.loc 2 23 66
 486 027c 97070000 		la	a5,HEAP_END_ADDR
 486      83B70700 
 487 0284 83B70700 		ld	a5,0(a5)
 488 0288 B387D740 		sub	a5,a5,a3
 489 028c 938707FE 		addi	a5,a5,-32
  23:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->next= nullptr;
 490              		.loc 2 23 43
 491 0290 2330F600 		sd	a5,0(a2)
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 492              		.loc 2 24 13 is_stmt 1
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 493              		.loc 2 24 32 is_stmt 0
 494 0294 83370700 		ld	a5,0(a4)
 495 0298 03B70700 		ld	a4,0(a5)
  24:src/../h/MemoryAllocator.hpp ****             instance->freeList.head->prev= nullptr;
 496              		.loc 2 24 42
 497 029c 23380700 		sd	zero,16(a4)
  25:src/../h/MemoryAllocator.hpp **** 
 498              		.loc 2 25 13 is_stmt 1
  25:src/../h/MemoryAllocator.hpp **** 
 499              		.loc 2 25 32 is_stmt 0
GAS LISTING /tmp/ccwRXG7a.s 			page 14


 500 02a0 03B70700 		ld	a4,0(a5)
  25:src/../h/MemoryAllocator.hpp **** 
 501              		.loc 2 25 42
 502 02a4 233C0700 		sd	zero,24(a4)
  27:src/../h/MemoryAllocator.hpp ****         }
 503              		.loc 2 27 13 is_stmt 1
  27:src/../h/MemoryAllocator.hpp ****         }
 504              		.loc 2 27 35 is_stmt 0
 505 02a8 23B80700 		sd	zero,16(a5)
 506 02ac 6FF05FF8 		j	.L31
 507              	.LVL39:
 508              	.L50:
 509              	.LBE39:
 510              	.LBE41:
 511              	.LBB42:
  98:src/MemoryAllocator.cpp ****         if(temp->address==addr)
  99:src/MemoryAllocator.cpp ****             size = temp->size;
 512              		.loc 1 99 13 is_stmt 1
 513              		.loc 1 99 18 is_stmt 0
 514 02b0 03B70400 		ld	a4,0(s1)
 515              	.LVL40:
 516              	.L33:
  97:src/MemoryAllocator.cpp ****         if(temp->address==addr)
 517              		.loc 1 97 5 is_stmt 1 discriminator 2
  97:src/MemoryAllocator.cpp ****         if(temp->address==addr)
 518              		.loc 1 97 63 is_stmt 0 discriminator 2
 519 02b4 83B40401 		ld	s1,16(s1)
 520              	.LVL41:
 521              	.L34:
  97:src/MemoryAllocator.cpp ****         if(temp->address==addr)
 522              		.loc 1 97 48 is_stmt 1 discriminator 1
 523 02b8 63880400 		beqz	s1,.L32
  98:src/MemoryAllocator.cpp ****         if(temp->address==addr)
 524              		.loc 1 98 9
  98:src/MemoryAllocator.cpp ****         if(temp->address==addr)
 525              		.loc 1 98 18 is_stmt 0
 526 02bc 83B78400 		ld	a5,8(s1)
  98:src/MemoryAllocator.cpp ****         if(temp->address==addr)
 527              		.loc 1 98 9
 528 02c0 E39A27FF 		bne	a5,s2,.L33
 529 02c4 6FF0DFFE 		j	.L50
 530              	.L32:
 531              	.LBE42:
 100:src/MemoryAllocator.cpp ****     }
 101:src/MemoryAllocator.cpp ****     //size not found
 102:src/MemoryAllocator.cpp ****     if(size<0)return -1;
 532              		.loc 1 102 5 is_stmt 1
 103:src/MemoryAllocator.cpp **** 
 104:src/MemoryAllocator.cpp ****     //find the place where to insert the new free segment (just after cur)
 105:src/MemoryAllocator.cpp ****     FreeMem* cur=0;
 533              		.loc 1 105 5
 534              	.LVL42:
 106:src/MemoryAllocator.cpp ****     if(ma->freeList.head== nullptr || addr<(char*)ma->freeList.head->address)
 535              		.loc 1 106 5
 536              		.loc 1 106 21 is_stmt 0
 537 02c8 83370A00 		ld	a5,0(s4)
 538              		.loc 1 106 5
GAS LISTING /tmp/ccwRXG7a.s 			page 15


 539 02cc 63800702 		beqz	a5,.L46
 540              		.loc 1 106 70 discriminator 1
 541 02d0 83B68700 		ld	a3,8(a5)
 542              		.loc 1 106 36 discriminator 1
 543 02d4 6360D902 		bgtu	a3,s2,.L47
 544              	.LVL43:
 545              	.L36:
 107:src/MemoryAllocator.cpp ****         cur= nullptr;   //insert as first
 108:src/MemoryAllocator.cpp ****     else
 109:src/MemoryAllocator.cpp ****         for(cur=ma->freeList.head; cur->next!= nullptr && addr>(char*)(cur->next); cur=cur->next);
 546              		.loc 1 109 56 is_stmt 1 discriminator 4
 547 02d8 93890700 		mv	s3,a5
 548              		.loc 1 109 41 is_stmt 0 discriminator 4
 549 02dc 83B70701 		ld	a5,16(a5)
 550              	.LVL44:
 551              		.loc 1 109 56 discriminator 4
 552 02e0 638C0700 		beqz	a5,.L35
 553              		.loc 1 109 56 discriminator 2
 554 02e4 E3EA27FF 		bltu	a5,s2,.L36
 555 02e8 6F000001 		j	.L35
 556              	.LVL45:
 557              	.L46:
 107:src/MemoryAllocator.cpp ****         cur= nullptr;   //insert as first
 558              		.loc 1 107 12
 559 02ec 93890700 		mv	s3,a5
 560 02f0 6F008000 		j	.L35
 561              	.L47:
 562 02f4 93890400 		mv	s3,s1
 563              	.LVL46:
 564              	.L35:
 110:src/MemoryAllocator.cpp **** 
 111:src/MemoryAllocator.cpp ****     //insert seg after cur
 112:src/MemoryAllocator.cpp ****     FreeMem* newSeg = (FreeMem*)addr;
 565              		.loc 1 112 5 is_stmt 1
 113:src/MemoryAllocator.cpp ****     newSeg->size = size;
 566              		.loc 1 113 5
 567              		.loc 1 113 18 is_stmt 0
 568 02f8 2330E900 		sd	a4,0(s2)
 114:src/MemoryAllocator.cpp ****     newSeg->prev= cur;
 569              		.loc 1 114 5 is_stmt 1
 570              		.loc 1 114 17 is_stmt 0
 571 02fc 233C3901 		sd	s3,24(s2)
 115:src/MemoryAllocator.cpp ****     newSeg->address=addr;
 572              		.loc 1 115 5 is_stmt 1
 573              		.loc 1 115 20 is_stmt 0
 574 0300 23342901 		sd	s2,8(s2)
 116:src/MemoryAllocator.cpp ****     if(cur)newSeg->next = cur->next;//link to next
 575              		.loc 1 116 5 is_stmt 1
 576 0304 63800904 		beqz	s3,.L37
 577              		.loc 1 116 12 discriminator 1
 578              		.loc 1 116 32 is_stmt 0 discriminator 1
 579 0308 83B70901 		ld	a5,16(s3)
 580              		.loc 1 116 25 discriminator 1
 581 030c 2338F900 		sd	a5,16(s2)
 582              	.L38:
 117:src/MemoryAllocator.cpp ****     else newSeg->next=ma->freeList.head;
 118:src/MemoryAllocator.cpp ****     if(newSeg->next)newSeg->next->prev=newSeg;
GAS LISTING /tmp/ccwRXG7a.s 			page 16


 583              		.loc 1 118 5 is_stmt 1
 584              		.loc 1 118 16 is_stmt 0
 585 0310 83370901 		ld	a5,16(s2)
 586              		.loc 1 118 5
 587 0314 63840700 		beqz	a5,.L39
 588              		.loc 1 118 21 is_stmt 1 discriminator 1
 589              		.loc 1 118 39 is_stmt 0 discriminator 1
 590 0318 23BC2701 		sd	s2,24(a5)
 591              	.L39:
 119:src/MemoryAllocator.cpp ****     if(cur)cur->next=newSeg; //link previous
 592              		.loc 1 119 5 is_stmt 1
 593 031c 638A0902 		beqz	s3,.L40
 594              		.loc 1 119 12 discriminator 1
 595              		.loc 1 119 21 is_stmt 0 discriminator 1
 596 0320 23B82901 		sd	s2,16(s3)
 597              	.L41:
 120:src/MemoryAllocator.cpp ****     else ma->freeList.head = newSeg;
 121:src/MemoryAllocator.cpp **** 
 122:src/MemoryAllocator.cpp **** 
 123:src/MemoryAllocator.cpp **** 
 124:src/MemoryAllocator.cpp ****     tryToJoin(newSeg);
 598              		.loc 1 124 5 is_stmt 1
 599              		.loc 1 124 14 is_stmt 0
 600 0324 13050900 		mv	a0,s2
 601              	.LVL47:
 602 0328 97000000 		call	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
 602      E7800000 
 603              	.LVL48:
 125:src/MemoryAllocator.cpp ****     tryToJoin(cur);
 604              		.loc 1 125 5 is_stmt 1
 605              		.loc 1 125 14 is_stmt 0
 606 0330 13850900 		mv	a0,s3
 607 0334 97000000 		call	_ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
 607      E7800000 
 608              	.LVL49:
 126:src/MemoryAllocator.cpp **** 
 127:src/MemoryAllocator.cpp ****     //delete pointer from pcb list
 128:src/MemoryAllocator.cpp ****     FreeMem* prev=nullptr;
 609              		.loc 1 128 5 is_stmt 1
 129:src/MemoryAllocator.cpp ****     for( FreeMem *temp = ma->pcbList.head; temp!=nullptr; temp=temp->next){
 610              		.loc 1 129 5
 611              	.LBB43:
 612              		.loc 1 129 19 is_stmt 0
 613 033c 83370A01 		ld	a5,16(s4)
 614              	.LVL50:
 615 0340 6F008002 		j	.L45
 616              	.LVL51:
 617              	.L37:
 618              	.LBE43:
 117:src/MemoryAllocator.cpp ****     if(newSeg->next)newSeg->next->prev=newSeg;
 619              		.loc 1 117 10 is_stmt 1
 117:src/MemoryAllocator.cpp ****     if(newSeg->next)newSeg->next->prev=newSeg;
 620              		.loc 1 117 36 is_stmt 0
 621 0344 83370A00 		ld	a5,0(s4)
 117:src/MemoryAllocator.cpp ****     if(newSeg->next)newSeg->next->prev=newSeg;
 622              		.loc 1 117 22
 623 0348 2338F900 		sd	a5,16(s2)
GAS LISTING /tmp/ccwRXG7a.s 			page 17


 624 034c 6FF05FFC 		j	.L38
 625              	.L40:
 120:src/MemoryAllocator.cpp **** 
 626              		.loc 1 120 10 is_stmt 1
 120:src/MemoryAllocator.cpp **** 
 627              		.loc 1 120 28 is_stmt 0
 628 0350 23302A01 		sd	s2,0(s4)
 629 0354 6FF01FFD 		j	.L41
 630              	.LVL52:
 631              	.L51:
 632              	.LBB44:
 130:src/MemoryAllocator.cpp ****         if(temp->address==addr){
 131:src/MemoryAllocator.cpp ****             if(prev== nullptr)ma->pcbList.head=temp->next;
 633              		.loc 1 131 31 is_stmt 1 discriminator 1
 634              		.loc 1 131 54 is_stmt 0 discriminator 1
 635 0358 03B70701 		ld	a4,16(a5)
 636              		.loc 1 131 47 discriminator 1
 637 035c 2338EA00 		sd	a4,16(s4)
 638              	.L43:
 132:src/MemoryAllocator.cpp ****             else prev->next=temp->next;
 133:src/MemoryAllocator.cpp ****         }
 134:src/MemoryAllocator.cpp ****         prev = temp;
 639              		.loc 1 134 9 is_stmt 1 discriminator 2
 640              	.LVL53:
 129:src/MemoryAllocator.cpp ****         if(temp->address==addr){
 641              		.loc 1 129 5 discriminator 2
 642              		.loc 1 134 14 is_stmt 0 discriminator 2
 643 0360 93840700 		mv	s1,a5
 129:src/MemoryAllocator.cpp ****         if(temp->address==addr){
 644              		.loc 1 129 63 discriminator 2
 645 0364 83B70701 		ld	a5,16(a5)
 646              	.LVL54:
 647              	.L45:
 129:src/MemoryAllocator.cpp ****         if(temp->address==addr){
 648              		.loc 1 129 48 is_stmt 1 discriminator 1
 649 0368 638E0700 		beqz	a5,.L42
 130:src/MemoryAllocator.cpp ****         if(temp->address==addr){
 650              		.loc 1 130 9
 130:src/MemoryAllocator.cpp ****         if(temp->address==addr){
 651              		.loc 1 130 18 is_stmt 0
 652 036c 03B78700 		ld	a4,8(a5)
 130:src/MemoryAllocator.cpp ****         if(temp->address==addr){
 653              		.loc 1 130 9
 654 0370 E31827FF 		bne	a4,s2,.L43
 131:src/MemoryAllocator.cpp ****             else prev->next=temp->next;
 655              		.loc 1 131 13 is_stmt 1
 656 0374 E38204FE 		beqz	s1,.L51
 132:src/MemoryAllocator.cpp ****             else prev->next=temp->next;
 657              		.loc 1 132 18
 132:src/MemoryAllocator.cpp ****             else prev->next=temp->next;
 658              		.loc 1 132 35 is_stmt 0
 659 0378 03B70701 		ld	a4,16(a5)
 132:src/MemoryAllocator.cpp ****             else prev->next=temp->next;
 660              		.loc 1 132 28
 661 037c 23B8E400 		sd	a4,16(s1)
 662 0380 6FF01FFE 		j	.L43
 663              	.L42:
GAS LISTING /tmp/ccwRXG7a.s 			page 18


 664              	.LBE44:
 135:src/MemoryAllocator.cpp ****     }
 136:src/MemoryAllocator.cpp **** 
 137:src/MemoryAllocator.cpp **** 
 138:src/MemoryAllocator.cpp ****     return 0;
 665              		.loc 1 138 5 is_stmt 1
 139:src/MemoryAllocator.cpp **** 
 140:src/MemoryAllocator.cpp **** }...
 666              		.loc 1 140 1 is_stmt 0
 667 0384 13050000 		li	a0,0
 668 0388 83308102 		ld	ra,40(sp)
 669              		.cfi_restore 1
 670 038c 03340102 		ld	s0,32(sp)
 671              		.cfi_restore 8
 672              		.cfi_def_cfa 2, 48
 673 0390 83348101 		ld	s1,24(sp)
 674              		.cfi_restore 9
 675              	.LVL55:
 676 0394 03390101 		ld	s2,16(sp)
 677              		.cfi_restore 18
 678              	.LVL56:
 679 0398 83398100 		ld	s3,8(sp)
 680              		.cfi_restore 19
 681              	.LVL57:
 682 039c 033A0100 		ld	s4,0(sp)
 683              		.cfi_restore 20
 684              	.LVL58:
 685 03a0 13010103 		addi	sp,sp,48
 686              		.cfi_def_cfa_offset 0
 687 03a4 67800000 		jr	ra
 688              		.cfi_endproc
 689              	.LFE10:
 691              		.globl	_ZN15MemoryAllocator8instanceE
 692              		.bss
 693              		.align	3
 694              		.set	.LANCHOR0,. + 0
 697              	_ZN15MemoryAllocator8instanceE:
 698 0000 00000000 		.zero	8
 698      00000000 
 699              		.text
 700              	.Letext0:
 701              		.file 3 "src/../h/../lib/hw.h"
 702              		.file 4 "src/../h/DoublyLinkedList.hpp"
GAS LISTING /tmp/ccwRXG7a.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccwRXG7a.s:9      .text:0000000000000000 _ZN15MemoryAllocator10kmem_allocEm
     /tmp/ccwRXG7a.s:13     .text:0000000000000000 .L0 
     /tmp/ccwRXG7a.s:15     .text:0000000000000000 .L0 
     /tmp/ccwRXG7a.s:16     .text:0000000000000004 .L0 
     /tmp/ccwRXG7a.s:18     .text:0000000000000008 .L0 
     /tmp/ccwRXG7a.s:20     .text:000000000000000c .L0 
     /tmp/ccwRXG7a.s:26     .text:0000000000000010 .L0 
     /tmp/ccwRXG7a.s:27     .text:0000000000000010 .L0 
     /tmp/ccwRXG7a.s:28     .text:0000000000000010 .L0 
     /tmp/ccwRXG7a.s:30     .text:0000000000000018 .L0 
     /tmp/ccwRXG7a.s:34     .text:000000000000001c .L0 
     /tmp/ccwRXG7a.s:35     .text:000000000000001c .L0 
     /tmp/ccwRXG7a.s:41     .text:0000000000000024 .L0 
     /tmp/ccwRXG7a.s:42     .text:0000000000000024 .L0 
     /tmp/ccwRXG7a.s:46     .text:0000000000000028 .L0 
     /tmp/ccwRXG7a.s:49     .text:000000000000002c .L0 
     /tmp/ccwRXG7a.s:50     .text:000000000000002c .L0 
     /tmp/ccwRXG7a.s:52     .text:0000000000000030 .L0 
     /tmp/ccwRXG7a.s:55     .text:0000000000000034 .L0 
     /tmp/ccwRXG7a.s:56     .text:0000000000000034 .L0 
     /tmp/ccwRXG7a.s:58     .text:0000000000000038 .L0 
     /tmp/ccwRXG7a.s:62     .text:0000000000000040 .L0 
     /tmp/ccwRXG7a.s:63     .text:0000000000000040 .L0 
     /tmp/ccwRXG7a.s:65     .text:0000000000000044 .L0 
     /tmp/ccwRXG7a.s:67     .text:0000000000000048 .L0 
     /tmp/ccwRXG7a.s:68     .text:0000000000000048 .L0 
     /tmp/ccwRXG7a.s:70     .text:000000000000004c .L0 
     /tmp/ccwRXG7a.s:73     .text:0000000000000050 .L0 
     /tmp/ccwRXG7a.s:74     .text:0000000000000050 .L0 
     /tmp/ccwRXG7a.s:76     .text:0000000000000054 .L0 
     /tmp/ccwRXG7a.s:78     .text:0000000000000058 .L0 
     /tmp/ccwRXG7a.s:79     .text:0000000000000058 .L0 
     /tmp/ccwRXG7a.s:81     .text:000000000000005c .L0 
     /tmp/ccwRXG7a.s:85     .text:0000000000000060 .L0 
     /tmp/ccwRXG7a.s:86     .text:0000000000000060 .L0 
     /tmp/ccwRXG7a.s:87     .text:0000000000000060 .L0 
     /tmp/ccwRXG7a.s:89     .text:0000000000000064 .L0 
     /tmp/ccwRXG7a.s:90     .text:0000000000000064 .L0 
     /tmp/ccwRXG7a.s:92     .text:0000000000000068 .L0 
     /tmp/ccwRXG7a.s:93     .text:0000000000000068 .L0 
     /tmp/ccwRXG7a.s:96     .text:000000000000006c .L0 
     /tmp/ccwRXG7a.s:97     .text:000000000000006c .L0 
     /tmp/ccwRXG7a.s:100    .text:0000000000000070 .L0 
     /tmp/ccwRXG7a.s:105    .text:0000000000000074 .L0 
     /tmp/ccwRXG7a.s:107    .text:0000000000000078 .L0 
     /tmp/ccwRXG7a.s:110    .text:000000000000007c .L0 
     /tmp/ccwRXG7a.s:112    .text:0000000000000080 .L0 
     /tmp/ccwRXG7a.s:113    .text:0000000000000080 .L0 
     /tmp/ccwRXG7a.s:119    .text:0000000000000084 .L0 
     /tmp/ccwRXG7a.s:120    .text:0000000000000084 .L0 
     /tmp/ccwRXG7a.s:128    .text:0000000000000088 .L0 
     /tmp/ccwRXG7a.s:129    .text:000000000000008c .L0 
     /tmp/ccwRXG7a.s:130    .text:000000000000008c .L0 
     /tmp/ccwRXG7a.s:131    .text:000000000000008c .L0 
     /tmp/ccwRXG7a.s:133    .text:0000000000000090 .L0 
GAS LISTING /tmp/ccwRXG7a.s 			page 20


     /tmp/ccwRXG7a.s:137    .text:0000000000000094 .L0 
     /tmp/ccwRXG7a.s:141    .text:0000000000000094 .L0 
     /tmp/ccwRXG7a.s:142    .text:0000000000000094 .L0 
     /tmp/ccwRXG7a.s:147    .text:00000000000000ac .L0 
     /tmp/ccwRXG7a.s:148    .text:00000000000000ac .L0 
     /tmp/ccwRXG7a.s:150    .text:00000000000000b0 .L0 
     /tmp/ccwRXG7a.s:152    .text:00000000000000b4 .L0 
     /tmp/ccwRXG7a.s:153    .text:00000000000000b4 .L0 
     /tmp/ccwRXG7a.s:157    .text:00000000000000bc .L0 
     /tmp/ccwRXG7a.s:160    .text:00000000000000c4 .L0 
     /tmp/ccwRXG7a.s:162    .text:00000000000000c8 .L0 
     /tmp/ccwRXG7a.s:163    .text:00000000000000c8 .L0 
     /tmp/ccwRXG7a.s:165    .text:00000000000000cc .L0 
     /tmp/ccwRXG7a.s:170    .text:00000000000000e0 .L0 
     /tmp/ccwRXG7a.s:172    .text:00000000000000e4 .L0 
     /tmp/ccwRXG7a.s:173    .text:00000000000000e4 .L0 
     /tmp/ccwRXG7a.s:176    .text:00000000000000ec .L0 
     /tmp/ccwRXG7a.s:178    .text:00000000000000f0 .L0 
     /tmp/ccwRXG7a.s:179    .text:00000000000000f0 .L0 
     /tmp/ccwRXG7a.s:181    .text:00000000000000f4 .L0 
     /tmp/ccwRXG7a.s:183    .text:00000000000000f8 .L0 
     /tmp/ccwRXG7a.s:184    .text:00000000000000f8 .L0 
     /tmp/ccwRXG7a.s:194    .text:0000000000000100 .L0 
     /tmp/ccwRXG7a.s:195    .text:0000000000000100 .L0 
     /tmp/ccwRXG7a.s:196    .text:0000000000000100 .L0 
     /tmp/ccwRXG7a.s:199    .text:0000000000000104 .L0 
     /tmp/ccwRXG7a.s:205    .text:0000000000000108 .L0 
     /tmp/ccwRXG7a.s:206    .text:0000000000000108 .L0 
     /tmp/ccwRXG7a.s:208    .text:000000000000010c .L0 
     /tmp/ccwRXG7a.s:214    .text:0000000000000114 .L0 
     /tmp/ccwRXG7a.s:215    .text:0000000000000114 .L0 
     /tmp/ccwRXG7a.s:224    .text:000000000000011c .L0 
     /tmp/ccwRXG7a.s:225    .text:000000000000011c .L0 
     /tmp/ccwRXG7a.s:227    .text:0000000000000120 .L0 
     /tmp/ccwRXG7a.s:230    .text:0000000000000124 .L0 
     /tmp/ccwRXG7a.s:231    .text:0000000000000124 .L0 
     /tmp/ccwRXG7a.s:233    .text:0000000000000128 .L0 
     /tmp/ccwRXG7a.s:235    .text:000000000000012c .L0 
     /tmp/ccwRXG7a.s:236    .text:000000000000012c .L0 
     /tmp/ccwRXG7a.s:239    .text:0000000000000130 .L0 
     /tmp/ccwRXG7a.s:240    .text:0000000000000130 .L0 
     /tmp/ccwRXG7a.s:242    .text:0000000000000134 .L0 
     /tmp/ccwRXG7a.s:244    .text:0000000000000138 .L0 
     /tmp/ccwRXG7a.s:245    .text:0000000000000138 .L0 
     /tmp/ccwRXG7a.s:248    .text:000000000000013c .L0 
     /tmp/ccwRXG7a.s:249    .text:000000000000013c .L0 
     /tmp/ccwRXG7a.s:251    .text:0000000000000140 .L0 
     /tmp/ccwRXG7a.s:253    .text:0000000000000144 .L0 
     /tmp/ccwRXG7a.s:254    .text:0000000000000144 .L0 
     /tmp/ccwRXG7a.s:256    .text:0000000000000148 .L0 
     /tmp/ccwRXG7a.s:258    .text:000000000000014c .L0 
     /tmp/ccwRXG7a.s:259    .text:000000000000014c .L0 
     /tmp/ccwRXG7a.s:261    .text:0000000000000150 .L0 
     /tmp/ccwRXG7a.s:263    .text:0000000000000154 .L0 
     /tmp/ccwRXG7a.s:265    .text:0000000000000158 .L0 
     /tmp/ccwRXG7a.s:266    .text:0000000000000158 .L0 
     /tmp/ccwRXG7a.s:269    .text:000000000000015c .L0 
GAS LISTING /tmp/ccwRXG7a.s 			page 21


     /tmp/ccwRXG7a.s:270    .text:000000000000015c .L0 
     /tmp/ccwRXG7a.s:271    .text:000000000000015c .L0 
     /tmp/ccwRXG7a.s:273    .text:0000000000000160 .L0 
     /tmp/ccwRXG7a.s:274    .text:0000000000000160 .L0 
     /tmp/ccwRXG7a.s:276    .text:0000000000000164 .L0 
     /tmp/ccwRXG7a.s:277    .text:0000000000000164 .L0 
     /tmp/ccwRXG7a.s:280    .text:0000000000000168 .L0 
     /tmp/ccwRXG7a.s:281    .text:0000000000000168 .L0 
     /tmp/ccwRXG7a.s:284    .text:000000000000016c .L0 
     /tmp/ccwRXG7a.s:289    .text:0000000000000170 .L0 
     /tmp/ccwRXG7a.s:291    .text:0000000000000174 .L0 
     /tmp/ccwRXG7a.s:294    .text:0000000000000178 .L0 
     /tmp/ccwRXG7a.s:296    .text:000000000000017c .L0 
     /tmp/ccwRXG7a.s:297    .text:000000000000017c .L0 
     /tmp/ccwRXG7a.s:303    .text:0000000000000180 .L0 
     /tmp/ccwRXG7a.s:304    .text:0000000000000180 .L0 
     /tmp/ccwRXG7a.s:310    .text:0000000000000188 .L0 
     /tmp/ccwRXG7a.s:311    .text:0000000000000188 .L0 
     /tmp/ccwRXG7a.s:317    .text:0000000000000190 .L0 
     /tmp/ccwRXG7a.s:318    .text:0000000000000190 .L0 
     /tmp/ccwRXG7a.s:326    .text:0000000000000198 .L0 
     /tmp/ccwRXG7a.s:332    .text:0000000000000198 _ZN15MemoryAllocator9tryToJoinEPN16DoublyLinkedListImE4NodeE
     /tmp/ccwRXG7a.s:335    .text:0000000000000198 .L0 
     /tmp/ccwRXG7a.s:337    .text:0000000000000198 .L0 
     /tmp/ccwRXG7a.s:338    .text:000000000000019c .L0 
     /tmp/ccwRXG7a.s:340    .text:00000000000001a0 .L0 
     /tmp/ccwRXG7a.s:342    .text:00000000000001a4 .L0 
     /tmp/ccwRXG7a.s:344    .text:00000000000001a4 .L0 
     /tmp/ccwRXG7a.s:346    .text:00000000000001a8 .L0 
     /tmp/ccwRXG7a.s:347    .text:00000000000001a8 .L0 
     /tmp/ccwRXG7a.s:349    .text:00000000000001ac .L0 
     /tmp/ccwRXG7a.s:351    .text:00000000000001b0 .L0 
     /tmp/ccwRXG7a.s:353    .text:00000000000001b4 .L0 
     /tmp/ccwRXG7a.s:355    .text:00000000000001b8 .L0 
     /tmp/ccwRXG7a.s:357    .text:00000000000001bc .L0 
     /tmp/ccwRXG7a.s:361    .text:00000000000001c0 .L0 
     /tmp/ccwRXG7a.s:362    .text:00000000000001c4 .L0 
     /tmp/ccwRXG7a.s:363    .text:00000000000001c4 .L0 
     /tmp/ccwRXG7a.s:364    .text:00000000000001c4 .L0 
     /tmp/ccwRXG7a.s:366    .text:00000000000001c8 .L0 
     /tmp/ccwRXG7a.s:370    .text:00000000000001cc .L0 
     /tmp/ccwRXG7a.s:372    .text:00000000000001cc .L0 
     /tmp/ccwRXG7a.s:373    .text:00000000000001cc .L0 
     /tmp/ccwRXG7a.s:375    .text:00000000000001d0 .L0 
     /tmp/ccwRXG7a.s:378    .text:00000000000001d8 .L0 
     /tmp/ccwRXG7a.s:379    .text:00000000000001d8 .L0 
     /tmp/ccwRXG7a.s:381    .text:00000000000001dc .L0 
     /tmp/ccwRXG7a.s:383    .text:00000000000001e0 .L0 
     /tmp/ccwRXG7a.s:385    .text:00000000000001e4 .L0 
     /tmp/ccwRXG7a.s:386    .text:00000000000001e4 .L0 
     /tmp/ccwRXG7a.s:389    .text:00000000000001e8 .L0 
     /tmp/ccwRXG7a.s:390    .text:00000000000001e8 .L0 
     /tmp/ccwRXG7a.s:396    .text:00000000000001f0 .L0 
     /tmp/ccwRXG7a.s:402    .text:00000000000001f8 .L0 
     /tmp/ccwRXG7a.s:405    .text:0000000000000200 .L0 
     /tmp/ccwRXG7a.s:411    .text:0000000000000200 _ZN15MemoryAllocator9kmem_freeEPv
     /tmp/ccwRXG7a.s:414    .text:0000000000000200 .L0 
GAS LISTING /tmp/ccwRXG7a.s 			page 22


     /tmp/ccwRXG7a.s:416    .text:0000000000000200 .L0 
     /tmp/ccwRXG7a.s:417    .text:0000000000000204 .L0 
     /tmp/ccwRXG7a.s:424    .text:000000000000021c .L0 
     /tmp/ccwRXG7a.s:425    .text:000000000000021c .L0 
     /tmp/ccwRXG7a.s:426    .text:000000000000021c .L0 
     /tmp/ccwRXG7a.s:427    .text:000000000000021c .L0 
     /tmp/ccwRXG7a.s:428    .text:000000000000021c .L0 
     /tmp/ccwRXG7a.s:429    .text:000000000000021c .L0 
     /tmp/ccwRXG7a.s:431    .text:0000000000000220 .L0 
     /tmp/ccwRXG7a.s:436    .text:0000000000000224 .L0 
     /tmp/ccwRXG7a.s:437    .text:0000000000000224 .L0 
     /tmp/ccwRXG7a.s:438    .text:0000000000000224 .L0 
     /tmp/ccwRXG7a.s:440    .text:000000000000022c .L0 
     /tmp/ccwRXG7a.s:443    .text:0000000000000230 .L0 
     /tmp/ccwRXG7a.s:444    .text:0000000000000230 .L0 
     /tmp/ccwRXG7a.s:449    .text:0000000000000238 .L0 
     /tmp/ccwRXG7a.s:451    .text:0000000000000238 .L0 
     /tmp/ccwRXG7a.s:452    .text:0000000000000238 .L0 
     /tmp/ccwRXG7a.s:456    .text:000000000000023c .L0 
     /tmp/ccwRXG7a.s:463    .text:0000000000000244 .L0 
     /tmp/ccwRXG7a.s:464    .text:0000000000000244 .L0 
     /tmp/ccwRXG7a.s:469    .text:000000000000025c .L0 
     /tmp/ccwRXG7a.s:470    .text:000000000000025c .L0 
     /tmp/ccwRXG7a.s:472    .text:0000000000000260 .L0 
     /tmp/ccwRXG7a.s:474    .text:0000000000000264 .L0 
     /tmp/ccwRXG7a.s:475    .text:0000000000000264 .L0 
     /tmp/ccwRXG7a.s:478    .text:000000000000026c .L0 
     /tmp/ccwRXG7a.s:481    .text:0000000000000274 .L0 
     /tmp/ccwRXG7a.s:483    .text:0000000000000278 .L0 
     /tmp/ccwRXG7a.s:484    .text:0000000000000278 .L0 
     /tmp/ccwRXG7a.s:486    .text:000000000000027c .L0 
     /tmp/ccwRXG7a.s:491    .text:0000000000000290 .L0 
     /tmp/ccwRXG7a.s:493    .text:0000000000000294 .L0 
     /tmp/ccwRXG7a.s:494    .text:0000000000000294 .L0 
     /tmp/ccwRXG7a.s:497    .text:000000000000029c .L0 
     /tmp/ccwRXG7a.s:499    .text:00000000000002a0 .L0 
     /tmp/ccwRXG7a.s:500    .text:00000000000002a0 .L0 
     /tmp/ccwRXG7a.s:502    .text:00000000000002a4 .L0 
     /tmp/ccwRXG7a.s:504    .text:00000000000002a8 .L0 
     /tmp/ccwRXG7a.s:505    .text:00000000000002a8 .L0 
     /tmp/ccwRXG7a.s:513    .text:00000000000002b0 .L0 
     /tmp/ccwRXG7a.s:514    .text:00000000000002b0 .L0 
     /tmp/ccwRXG7a.s:518    .text:00000000000002b4 .L0 
     /tmp/ccwRXG7a.s:519    .text:00000000000002b4 .L0 
     /tmp/ccwRXG7a.s:523    .text:00000000000002b8 .L0 
     /tmp/ccwRXG7a.s:525    .text:00000000000002bc .L0 
     /tmp/ccwRXG7a.s:526    .text:00000000000002bc .L0 
     /tmp/ccwRXG7a.s:528    .text:00000000000002c0 .L0 
     /tmp/ccwRXG7a.s:533    .text:00000000000002c8 .L0 
     /tmp/ccwRXG7a.s:535    .text:00000000000002c8 .L0 
     /tmp/ccwRXG7a.s:536    .text:00000000000002c8 .L0 
     /tmp/ccwRXG7a.s:537    .text:00000000000002c8 .L0 
     /tmp/ccwRXG7a.s:539    .text:00000000000002cc .L0 
     /tmp/ccwRXG7a.s:541    .text:00000000000002d0 .L0 
     /tmp/ccwRXG7a.s:543    .text:00000000000002d4 .L0 
     /tmp/ccwRXG7a.s:547    .text:00000000000002d8 .L0 
     /tmp/ccwRXG7a.s:549    .text:00000000000002dc .L0 
GAS LISTING /tmp/ccwRXG7a.s 			page 23


     /tmp/ccwRXG7a.s:552    .text:00000000000002e0 .L0 
     /tmp/ccwRXG7a.s:554    .text:00000000000002e4 .L0 
     /tmp/ccwRXG7a.s:559    .text:00000000000002ec .L0 
     /tmp/ccwRXG7a.s:566    .text:00000000000002f8 .L0 
     /tmp/ccwRXG7a.s:567    .text:00000000000002f8 .L0 
     /tmp/ccwRXG7a.s:568    .text:00000000000002f8 .L0 
     /tmp/ccwRXG7a.s:570    .text:00000000000002fc .L0 
     /tmp/ccwRXG7a.s:571    .text:00000000000002fc .L0 
     /tmp/ccwRXG7a.s:573    .text:0000000000000300 .L0 
     /tmp/ccwRXG7a.s:574    .text:0000000000000300 .L0 
     /tmp/ccwRXG7a.s:576    .text:0000000000000304 .L0 
     /tmp/ccwRXG7a.s:578    .text:0000000000000308 .L0 
     /tmp/ccwRXG7a.s:579    .text:0000000000000308 .L0 
     /tmp/ccwRXG7a.s:581    .text:000000000000030c .L0 
     /tmp/ccwRXG7a.s:584    .text:0000000000000310 .L0 
     /tmp/ccwRXG7a.s:585    .text:0000000000000310 .L0 
     /tmp/ccwRXG7a.s:587    .text:0000000000000314 .L0 
     /tmp/ccwRXG7a.s:589    .text:0000000000000318 .L0 
     /tmp/ccwRXG7a.s:590    .text:0000000000000318 .L0 
     /tmp/ccwRXG7a.s:593    .text:000000000000031c .L0 
     /tmp/ccwRXG7a.s:595    .text:0000000000000320 .L0 
     /tmp/ccwRXG7a.s:596    .text:0000000000000320 .L0 
     /tmp/ccwRXG7a.s:599    .text:0000000000000324 .L0 
     /tmp/ccwRXG7a.s:600    .text:0000000000000324 .L0 
     /tmp/ccwRXG7a.s:605    .text:0000000000000330 .L0 
     /tmp/ccwRXG7a.s:606    .text:0000000000000330 .L0 
     /tmp/ccwRXG7a.s:610    .text:000000000000033c .L0 
     /tmp/ccwRXG7a.s:612    .text:000000000000033c .L0 
     /tmp/ccwRXG7a.s:613    .text:000000000000033c .L0 
     /tmp/ccwRXG7a.s:620    .text:0000000000000344 .L0 
     /tmp/ccwRXG7a.s:621    .text:0000000000000344 .L0 
     /tmp/ccwRXG7a.s:623    .text:0000000000000348 .L0 
     /tmp/ccwRXG7a.s:627    .text:0000000000000350 .L0 
     /tmp/ccwRXG7a.s:628    .text:0000000000000350 .L0 
     /tmp/ccwRXG7a.s:634    .text:0000000000000358 .L0 
     /tmp/ccwRXG7a.s:635    .text:0000000000000358 .L0 
     /tmp/ccwRXG7a.s:637    .text:000000000000035c .L0 
     /tmp/ccwRXG7a.s:641    .text:0000000000000360 .L0 
     /tmp/ccwRXG7a.s:642    .text:0000000000000360 .L0 
     /tmp/ccwRXG7a.s:643    .text:0000000000000360 .L0 
     /tmp/ccwRXG7a.s:645    .text:0000000000000364 .L0 
     /tmp/ccwRXG7a.s:649    .text:0000000000000368 .L0 
     /tmp/ccwRXG7a.s:651    .text:000000000000036c .L0 
     /tmp/ccwRXG7a.s:652    .text:000000000000036c .L0 
     /tmp/ccwRXG7a.s:654    .text:0000000000000370 .L0 
     /tmp/ccwRXG7a.s:656    .text:0000000000000374 .L0 
     /tmp/ccwRXG7a.s:658    .text:0000000000000378 .L0 
     /tmp/ccwRXG7a.s:659    .text:0000000000000378 .L0 
     /tmp/ccwRXG7a.s:661    .text:000000000000037c .L0 
     /tmp/ccwRXG7a.s:666    .text:0000000000000384 .L0 
     /tmp/ccwRXG7a.s:667    .text:0000000000000384 .L0 
     /tmp/ccwRXG7a.s:669    .text:000000000000038c .L0 
     /tmp/ccwRXG7a.s:671    .text:0000000000000390 .L0 
     /tmp/ccwRXG7a.s:672    .text:0000000000000390 .L0 
     /tmp/ccwRXG7a.s:674    .text:0000000000000394 .L0 
     /tmp/ccwRXG7a.s:677    .text:0000000000000398 .L0 
     /tmp/ccwRXG7a.s:680    .text:000000000000039c .L0 
GAS LISTING /tmp/ccwRXG7a.s 			page 24


     /tmp/ccwRXG7a.s:683    .text:00000000000003a0 .L0 
     /tmp/ccwRXG7a.s:686    .text:00000000000003a4 .L0 
     /tmp/ccwRXG7a.s:688    .text:00000000000003a8 .L0 
     /tmp/ccwRXG7a.s:697    .bss:0000000000000000 _ZN15MemoryAllocator8instanceE
     /tmp/ccwRXG7a.s:694    .bss:0000000000000000 .LANCHOR0
     /tmp/ccwRXG7a.s:703    .text:00000000000003a8 .L0 
     /tmp/ccwRXG7a.s:28     .text:0000000000000010 .L0 
     /tmp/ccwRXG7a.s:35     .text:000000000000001c .L0 
     /tmp/ccwRXG7a.s:142    .text:0000000000000094 .L0 
     /tmp/ccwRXG7a.s:144    .text:00000000000000a0 .L0 
     /tmp/ccwRXG7a.s:165    .text:00000000000000cc .L0 
     /tmp/ccwRXG7a.s:438    .text:0000000000000224 .L0 
     /tmp/ccwRXG7a.s:444    .text:0000000000000230 .L0 
     /tmp/ccwRXG7a.s:464    .text:0000000000000244 .L0 
     /tmp/ccwRXG7a.s:466    .text:0000000000000250 .L0 
     /tmp/ccwRXG7a.s:486    .text:000000000000027c .L0 
     /tmp/ccwRXG7a.s:136    .text:0000000000000094 .L18
     /tmp/ccwRXG7a.s:122    .text:0000000000000088 .L1
     /tmp/ccwRXG7a.s:187    .text:0000000000000100 .L19
     /tmp/ccwRXG7a.s:219    .text:000000000000011c .L6
     /tmp/ccwRXG7a.s:200    .text:0000000000000108 .L7
     /tmp/ccwRXG7a.s:82     .text:0000000000000060 .L9
     /tmp/ccwRXG7a.s:211    .text:0000000000000114 .L20
     /tmp/ccwRXG7a.s:101    .text:0000000000000074 .L10
     /tmp/ccwRXG7a.s:32     .text:000000000000001c .L2
     /tmp/ccwRXG7a.s:44     .text:0000000000000028 .L5
     /tmp/ccwRXG7a.s:71     .text:0000000000000050 .L8
     /tmp/ccwRXG7a.s:115    .text:0000000000000084 .L11
     /tmp/ccwRXG7a.s:308    .text:0000000000000188 .L12
     /tmp/ccwRXG7a.s:246    .text:000000000000013c .L14
     /tmp/ccwRXG7a.s:314    .text:0000000000000190 .L21
     /tmp/ccwRXG7a.s:286    .text:0000000000000170 .L15
     /tmp/ccwRXG7a.s:237    .text:0000000000000130 .L13
     /tmp/ccwRXG7a.s:299    .text:0000000000000180 .L16
     /tmp/ccwRXG7a.s:394    .text:00000000000001f0 .L25
     /tmp/ccwRXG7a.s:400    .text:00000000000001f8 .L26
     /tmp/ccwRXG7a.s:369    .text:00000000000001cc .L29
     /tmp/ccwRXG7a.s:387    .text:00000000000001e8 .L24
     /tmp/ccwRXG7a.s:359    .text:00000000000001c0 .L23
     /tmp/ccwRXG7a.s:459    .text:0000000000000244 .L49
     /tmp/ccwRXG7a.s:521    .text:00000000000002b8 .L34
     /tmp/ccwRXG7a.s:441    .text:0000000000000230 .L31
     /tmp/ccwRXG7a.s:530    .text:00000000000002c8 .L32
     /tmp/ccwRXG7a.s:516    .text:00000000000002b4 .L33
     /tmp/ccwRXG7a.s:508    .text:00000000000002b0 .L50
     /tmp/ccwRXG7a.s:557    .text:00000000000002ec .L46
     /tmp/ccwRXG7a.s:561    .text:00000000000002f4 .L47
     /tmp/ccwRXG7a.s:564    .text:00000000000002f8 .L35
     /tmp/ccwRXG7a.s:545    .text:00000000000002d8 .L36
     /tmp/ccwRXG7a.s:617    .text:0000000000000344 .L37
     /tmp/ccwRXG7a.s:591    .text:000000000000031c .L39
     /tmp/ccwRXG7a.s:625    .text:0000000000000350 .L40
     /tmp/ccwRXG7a.s:647    .text:0000000000000368 .L45
     /tmp/ccwRXG7a.s:582    .text:0000000000000310 .L38
     /tmp/ccwRXG7a.s:597    .text:0000000000000324 .L41
     /tmp/ccwRXG7a.s:663    .text:0000000000000384 .L42
     /tmp/ccwRXG7a.s:638    .text:0000000000000360 .L43
GAS LISTING /tmp/ccwRXG7a.s 			page 25


     /tmp/ccwRXG7a.s:631    .text:0000000000000358 .L51
     /tmp/ccwRXG7a.s:1389   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccwRXG7a.s:2529   .debug_str:0000000000000272 .LASF57
     /tmp/ccwRXG7a.s:2559   .debug_str:0000000000000431 .LASF58
     /tmp/ccwRXG7a.s:2471   .debug_str:000000000000002a .LASF59
     /tmp/ccwRXG7a.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccwRXG7a.s:700    .text:00000000000003a8 .Letext0
     /tmp/ccwRXG7a.s:2463   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccwRXG7a.s:2539   .debug_str:0000000000000389 .LASF0
     /tmp/ccwRXG7a.s:2513   .debug_str:00000000000001c2 .LASF1
     /tmp/ccwRXG7a.s:2501   .debug_str:0000000000000171 .LASF2
     /tmp/ccwRXG7a.s:2479   .debug_str:000000000000008e .LASF4
     /tmp/ccwRXG7a.s:2509   .debug_str:00000000000001ab .LASF3
     /tmp/ccwRXG7a.s:2469   .debug_str:0000000000000023 .LASF5
     /tmp/ccwRXG7a.s:2465   .debug_str:0000000000000000 .LASF6
     /tmp/ccwRXG7a.s:2495   .debug_str:0000000000000147 .LASF7
     /tmp/ccwRXG7a.s:2551   .debug_str:00000000000003f6 .LASF8
     /tmp/ccwRXG7a.s:2477   .debug_str:0000000000000080 .LASF9
     /tmp/ccwRXG7a.s:2595   .debug_str:000000000000056b .LASF10
     /tmp/ccwRXG7a.s:2497   .debug_str:000000000000015a .LASF11
     /tmp/ccwRXG7a.s:2577   .debug_str:00000000000004d3 .LASF12
     /tmp/ccwRXG7a.s:2561   .debug_str:0000000000000449 .LASF13
     /tmp/ccwRXG7a.s:2517   .debug_str:00000000000001fc .LASF14
     /tmp/ccwRXG7a.s:2487   .debug_str:00000000000000e1 .LASF15
     /tmp/ccwRXG7a.s:2555   .debug_str:0000000000000410 .LASF16
     /tmp/ccwRXG7a.s:2531   .debug_str:0000000000000336 .LASF37
     /tmp/ccwRXG7a.s:2573   .debug_str:00000000000004c4 .LASF60
     /tmp/ccwRXG7a.s:2585   .debug_str:0000000000000517 .LASF17
     /tmp/ccwRXG7a.s:2541   .debug_str:0000000000000396 .LASF18
     /tmp/ccwRXG7a.s:2583   .debug_str:0000000000000512 .LASF19
     /tmp/ccwRXG7a.s:2589   .debug_str:0000000000000539 .LASF20
     /tmp/ccwRXG7a.s:2527   .debug_str:0000000000000250 .LASF61
     /tmp/ccwRXG7a.s:2533   .debug_str:000000000000035a .LASF21
     /tmp/ccwRXG7a.s:2569   .debug_str:000000000000049c .LASF22
     /tmp/ccwRXG7a.s:2519   .debug_str:0000000000000208 .LASF23
     /tmp/ccwRXG7a.s:2565   .debug_str:000000000000047a .LASF25
     /tmp/ccwRXG7a.s:2525   .debug_str:000000000000023e .LASF24
     /tmp/ccwRXG7a.s:2587   .debug_str:000000000000051c .LASF26
     /tmp/ccwRXG7a.s:2521   .debug_str:0000000000000219 .LASF27
     /tmp/ccwRXG7a.s:2483   .debug_str:000000000000009d .LASF28
     /tmp/ccwRXG7a.s:2557   .debug_str:0000000000000426 .LASF29
     /tmp/ccwRXG7a.s:2515   .debug_str:00000000000001d5 .LASF30
     /tmp/ccwRXG7a.s:2493   .debug_str:000000000000013d .LASF31
     /tmp/ccwRXG7a.s:2581   .debug_str:00000000000004ed .LASF32
     /tmp/ccwRXG7a.s:2499   .debug_str:0000000000000169 .LASF33
     /tmp/ccwRXG7a.s:2571   .debug_str:00000000000004a1 .LASF34
     /tmp/ccwRXG7a.s:2563   .debug_str:0000000000000459 .LASF47
     /tmp/ccwRXG7a.s:2579   .debug_str:00000000000004e3 .LASF35
     /tmp/ccwRXG7a.s:2473   .debug_str:000000000000005a .LASF36
     /tmp/ccwRXG7a.s:2467   .debug_str:0000000000000013 .LASF38
     /tmp/ccwRXG7a.s:2547   .debug_str:00000000000003c6 .LASF62
     /tmp/ccwRXG7a.s:2549   .debug_str:00000000000003d2 .LASF63
     /tmp/ccwRXG7a.s:2591   .debug_str:000000000000053e .LASF39
     /tmp/ccwRXG7a.s:2537   .debug_str:0000000000000366 .LASF40
     /tmp/ccwRXG7a.s:2553   .debug_str:0000000000000406 .LASF41
     /tmp/ccwRXG7a.s:2593   .debug_str:0000000000000549 .LASF42
     /tmp/ccwRXG7a.s:2575   .debug_str:00000000000004c9 .LASF43
GAS LISTING /tmp/ccwRXG7a.s 			page 26


     /tmp/ccwRXG7a.s:2491   .debug_str:0000000000000100 .LASF44
     /tmp/ccwRXG7a.s:2503   .debug_str:000000000000017f .LASF64
     /tmp/ccwRXG7a.s:2485   .debug_str:00000000000000c5 .LASF45
     /tmp/ccwRXG7a.s:2505   .debug_str:0000000000000187 .LASF46
     /tmp/ccwRXG7a.s:2523   .debug_str:0000000000000225 .LASF48
     /tmp/ccwRXG7a.s:2543   .debug_str:000000000000039e .LASF49
     /tmp/ccwRXG7a.s:2489   .debug_str:00000000000000f7 .LASF50
     /tmp/ccwRXG7a.s:2507   .debug_str:00000000000001a3 .LASF51
     /tmp/ccwRXG7a.s:2545   .debug_str:00000000000003a7 .LASF65
     /tmp/ccwRXG7a.s:412    .text:0000000000000200 .LFB10
     /tmp/ccwRXG7a.s:689    .text:00000000000003a8 .LFE10
     /tmp/ccwRXG7a.s:2567   .debug_str:0000000000000497 .LASF54
     /tmp/ccwRXG7a.s:2047   .debug_loc:0000000000000000 .LLST9
     /tmp/ccwRXG7a.s:2073   .debug_loc:0000000000000072 .LLST10
     /tmp/ccwRXG7a.s:2084   .debug_loc:00000000000000a8 .LLST11
     /tmp/ccwRXG7a.s:2101   .debug_loc:00000000000000f3 .LLST12
     /tmp/ccwRXG7a.s:2535   .debug_str:000000000000035f .LASF52
     /tmp/ccwRXG7a.s:2126   .debug_loc:0000000000000164 .LLST13
     /tmp/ccwRXG7a.s:2152   .debug_loc:00000000000001d6 .LLST14
     /tmp/ccwRXG7a.s:2425   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccwRXG7a.s:2511   .debug_str:00000000000001bd .LASF53
     /tmp/ccwRXG7a.s:2172   .debug_loc:0000000000000233 .LLST15
     /tmp/ccwRXG7a.s:2183   .debug_loc:0000000000000269 .LLST16
     /tmp/ccwRXG7a.s:434    .text:0000000000000224 .LBB37
     /tmp/ccwRXG7a.s:603    .text:0000000000000330 .LVL48
     /tmp/ccwRXG7a.s:608    .text:000000000000033c .LVL49
     /tmp/ccwRXG7a.s:333    .text:0000000000000198 .LFB9
     /tmp/ccwRXG7a.s:406    .text:0000000000000200 .LFE9
     /tmp/ccwRXG7a.s:2203   .debug_loc:00000000000002c6 .LLST8
     /tmp/ccwRXG7a.s:10     .text:0000000000000000 .LFB8
     /tmp/ccwRXG7a.s:327    .text:0000000000000198 .LFE8
     /tmp/ccwRXG7a.s:2250   .debug_loc:000000000000037a .LLST0
     /tmp/ccwRXG7a.s:2325   .debug_loc:00000000000004a4 .LLST1
     /tmp/ccwRXG7a.s:2336   .debug_loc:00000000000004da .LLST2
     /tmp/ccwRXG7a.s:2475   .debug_str:000000000000007b .LASF55
     /tmp/ccwRXG7a.s:2351   .debug_loc:0000000000000523 .LLST3
     /tmp/ccwRXG7a.s:103    .text:0000000000000074 .LBB21
     /tmp/ccwRXG7a.s:116    .text:0000000000000084 .LBE21
     /tmp/ccwRXG7a.s:2362   .debug_loc:0000000000000559 .LLST4
     /tmp/ccwRXG7a.s:222    .text:000000000000011c .LBB24
     /tmp/ccwRXG7a.s:322    .text:0000000000000198 .LBE24
     /tmp/ccwRXG7a.s:2481   .debug_str:0000000000000095 .LASF56
     /tmp/ccwRXG7a.s:2373   .debug_loc:000000000000058f .LLST5
     /tmp/ccwRXG7a.s:2390   .debug_loc:00000000000005da .LLST6
     /tmp/ccwRXG7a.s:287    .text:0000000000000170 .LBB26
     /tmp/ccwRXG7a.s:300    .text:0000000000000180 .LBE26
     /tmp/ccwRXG7a.s:2401   .debug_loc:0000000000000610 .LLST7
     /tmp/ccwRXG7a.s:23     .text:0000000000000010 .LBB13
     /tmp/ccwRXG7a.s:415    .text:0000000000000200 .LVL35
     /tmp/ccwRXG7a.s:601    .text:0000000000000328 .LVL47
     /tmp/ccwRXG7a.s:616    .text:0000000000000344 .LVL51
     /tmp/ccwRXG7a.s:630    .text:0000000000000358 .LVL52
     /tmp/ccwRXG7a.s:678    .text:0000000000000398 .LVL56
     /tmp/ccwRXG7a.s:445    .text:0000000000000238 .LVL36
     /tmp/ccwRXG7a.s:458    .text:0000000000000244 .LVL38
     /tmp/ccwRXG7a.s:507    .text:00000000000002b0 .LVL39
     /tmp/ccwRXG7a.s:684    .text:00000000000003a0 .LVL58
GAS LISTING /tmp/ccwRXG7a.s 			page 27


     /tmp/ccwRXG7a.s:534    .text:00000000000002c8 .LVL42
     /tmp/ccwRXG7a.s:544    .text:00000000000002d8 .LVL43
     /tmp/ccwRXG7a.s:550    .text:00000000000002e0 .LVL44
     /tmp/ccwRXG7a.s:556    .text:00000000000002ec .LVL45
     /tmp/ccwRXG7a.s:563    .text:00000000000002f8 .LVL46
     /tmp/ccwRXG7a.s:681    .text:000000000000039c .LVL57
     /tmp/ccwRXG7a.s:640    .text:0000000000000360 .LVL53
     /tmp/ccwRXG7a.s:646    .text:0000000000000368 .LVL54
     /tmp/ccwRXG7a.s:675    .text:0000000000000394 .LVL55
     /tmp/ccwRXG7a.s:453    .text:000000000000023c .LVL37
     /tmp/ccwRXG7a.s:614    .text:0000000000000340 .LVL50
     /tmp/ccwRXG7a.s:336    .text:0000000000000198 .LVL27
     /tmp/ccwRXG7a.s:358    .text:00000000000001c0 .LVL28
     /tmp/ccwRXG7a.s:368    .text:00000000000001cc .LVL29
     /tmp/ccwRXG7a.s:391    .text:00000000000001ec .LVL30
     /tmp/ccwRXG7a.s:393    .text:00000000000001f0 .LVL31
     /tmp/ccwRXG7a.s:397    .text:00000000000001f4 .LVL32
     /tmp/ccwRXG7a.s:399    .text:00000000000001f8 .LVL33
     /tmp/ccwRXG7a.s:403    .text:00000000000001fc .LVL34
     /tmp/ccwRXG7a.s:14     .text:0000000000000000 .LVL0
     /tmp/ccwRXG7a.s:31     .text:000000000000001c .LVL1
     /tmp/ccwRXG7a.s:98     .text:0000000000000070 .LVL5
     /tmp/ccwRXG7a.s:114    .text:0000000000000084 .LVL8
     /tmp/ccwRXG7a.s:135    .text:0000000000000094 .LVL10
     /tmp/ccwRXG7a.s:155    .text:00000000000000bc .LVL11
     /tmp/ccwRXG7a.s:210    .text:0000000000000114 .LVL14
     /tmp/ccwRXG7a.s:216    .text:0000000000000118 .LVL15
     /tmp/ccwRXG7a.s:218    .text:000000000000011c .LVL16
     /tmp/ccwRXG7a.s:282    .text:000000000000016c .LVL19
     /tmp/ccwRXG7a.s:298    .text:0000000000000180 .LVL22
     /tmp/ccwRXG7a.s:307    .text:0000000000000188 .LVL24
     /tmp/ccwRXG7a.s:313    .text:0000000000000190 .LVL25
     /tmp/ccwRXG7a.s:319    .text:0000000000000194 .LVL26
     /tmp/ccwRXG7a.s:36     .text:0000000000000024 .LVL2
     /tmp/ccwRXG7a.s:186    .text:0000000000000100 .LVL12
     /tmp/ccwRXG7a.s:43     .text:0000000000000028 .LVL3
     /tmp/ccwRXG7a.s:121    .text:0000000000000088 .LVL9
     /tmp/ccwRXG7a.s:305    .text:0000000000000184 .LVL23
     /tmp/ccwRXG7a.s:84     .text:0000000000000060 .LVL4
     /tmp/ccwRXG7a.s:102    .text:0000000000000074 .LVL6
     /tmp/ccwRXG7a.s:108    .text:000000000000007c .LVL7
     /tmp/ccwRXG7a.s:228    .text:0000000000000124 .LVL17
     /tmp/ccwRXG7a.s:285    .text:0000000000000170 .LVL20
     /tmp/ccwRXG7a.s:268    .text:000000000000015c .LVL18
     /tmp/ccwRXG7a.s:292    .text:0000000000000178 .LVL21
     /tmp/ccwRXG7a.s:704    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccwRXG7a.s:38     .text:0000000000000024 .LBE13
     /tmp/ccwRXG7a.s:138    .text:0000000000000094 .LBB31
     /tmp/ccwRXG7a.s:189    .text:0000000000000100 .LBE31
     /tmp/ccwRXG7a.s:40     .text:0000000000000024 .LBB16
     /tmp/ccwRXG7a.s:126    .text:0000000000000088 .LBE16
     /tmp/ccwRXG7a.s:190    .text:0000000000000100 .LBB32
     /tmp/ccwRXG7a.s:325    .text:0000000000000198 .LBE32
     /tmp/ccwRXG7a.s:60     .text:0000000000000040 .LBB19
     /tmp/ccwRXG7a.s:123    .text:0000000000000088 .LBE19
     /tmp/ccwRXG7a.s:203    .text:0000000000000108 .LBB23
     /tmp/ccwRXG7a.s:221    .text:000000000000011c .LBE23
GAS LISTING /tmp/ccwRXG7a.s 			page 28


     /tmp/ccwRXG7a.s:447    .text:0000000000000238 .LBE37
     /tmp/ccwRXG7a.s:460    .text:0000000000000244 .LBB41
     /tmp/ccwRXG7a.s:510    .text:00000000000002b0 .LBE41
     /tmp/ccwRXG7a.s:450    .text:0000000000000238 .LBB40
     /tmp/ccwRXG7a.s:454    .text:000000000000023c .LBE40
     /tmp/ccwRXG7a.s:511    .text:00000000000002b0 .LBB42
     /tmp/ccwRXG7a.s:531    .text:00000000000002c8 .LBE42
     /tmp/ccwRXG7a.s:611    .text:000000000000033c .LBB43
     /tmp/ccwRXG7a.s:618    .text:0000000000000344 .LBE43
     /tmp/ccwRXG7a.s:632    .text:0000000000000358 .LBB44
     /tmp/ccwRXG7a.s:664    .text:0000000000000384 .LBE44

UNDEFINED SYMBOLS
HEAP_START_ADDR
HEAP_END_ADDR
