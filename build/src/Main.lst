GAS LISTING /tmp/cctRK8Jv.s 			page 1


   1              		.file	"Main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z7syscallP4args
   9              	_Z7syscallP4args:
  10              	.LFB24:
  11              		.file 1 "src/../h/syscall_c.h"
   1:src/../h/syscall_c.h **** //
   2:src/../h/syscall_c.h **** // Created by os on 6/19/22.
   3:src/../h/syscall_c.h **** //
   4:src/../h/syscall_c.h **** 
   5:src/../h/syscall_c.h **** #ifndef PROJECT_BASE_V1_1_SYSCALL_C_H
   6:src/../h/syscall_c.h **** #define PROJECT_BASE_V1_1_SYSCALL_C_H
   7:src/../h/syscall_c.h **** 
   8:src/../h/syscall_c.h **** #include "Riscv.hpp"
   9:src/../h/syscall_c.h **** 
  10:src/../h/syscall_c.h **** 
  11:src/../h/syscall_c.h **** 
  12:src/../h/syscall_c.h **** extern "C" void supervisorTrap();
  13:src/../h/syscall_c.h **** 
  14:src/../h/syscall_c.h **** struct args{
  15:src/../h/syscall_c.h ****     uint64 a0;
  16:src/../h/syscall_c.h ****     uint64 a1;
  17:src/../h/syscall_c.h ****     uint64 a2;
  18:src/../h/syscall_c.h ****     uint64 a3;
  19:src/../h/syscall_c.h **** 
  20:src/../h/syscall_c.h **** };
  21:src/../h/syscall_c.h **** 
  22:src/../h/syscall_c.h **** void syscall(args* arg){
  12              		.loc 1 22 24
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
  23:src/../h/syscall_c.h ****     //should prepare arguments in registers
  24:src/../h/syscall_c.h ****     //should call interrupt routine with ecall
  25:src/../h/syscall_c.h **** 
  26:src/../h/syscall_c.h **** 
  27:src/../h/syscall_c.h ****     uint64 arg0 = arg->a0;
  21              		.loc 1 27 5
  22              		.loc 1 27 12 is_stmt 0
  23 000c 03370500 		ld	a4,0(a0)
  24              	.LVL1:
  28:src/../h/syscall_c.h ****     uint64 arg1 = arg->a1;
  25              		.loc 1 28 5 is_stmt 1
  26              		.loc 1 28 12 is_stmt 0
  27 0010 83378500 		ld	a5,8(a0)
  28              	.LVL2:
  29:src/../h/syscall_c.h **** 
  30:src/../h/syscall_c.h **** 
GAS LISTING /tmp/cctRK8Jv.s 			page 2


  31:src/../h/syscall_c.h **** 
  32:src/../h/syscall_c.h ****     //lock this section?
  33:src/../h/syscall_c.h ****     __asm__ volatile("mv a0, %0" : : "r" (arg0));
  29              		.loc 1 33 5 is_stmt 1
  30              		.loc 1 33 49 is_stmt 0
  31              	#APP
  32              	# 33 "src/../h/syscall_c.h" 1
  34              	    __asm__ volatile("mv a1, %0" : : "r" (arg1));
  33              		mv a0, a4
  34              	# 0 "" 2
  35              		.loc 1 34 5 is_stmt 1
  36              		.loc 1 34 49 is_stmt 0
  37              	# 34 "src/../h/syscall_c.h" 1
  35              	
  36:src/../h/syscall_c.h **** 
  37:src/../h/syscall_c.h **** //    Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  38:src/../h/syscall_c.h ****     __asm__ volatile ("ecall");
  38              		mv a1, a5
  39              	# 0 "" 2
  40              		.loc 1 38 5 is_stmt 1
  41              		.loc 1 38 31 is_stmt 0
  42              	# 38 "src/../h/syscall_c.h" 1
  39              	
  40:src/../h/syscall_c.h **** 
  41:src/../h/syscall_c.h **** }
  43              		ecall
  44              	# 0 "" 2
  45              		.loc 1 41 1
  46              	#NO_APP
  47 0020 03348100 		ld	s0,8(sp)
  48              		.cfi_restore 8
  49              		.cfi_def_cfa 2, 16
  50 0024 13010101 		addi	sp,sp,16
  51              		.cfi_def_cfa_offset 0
  52 0028 67800000 		jr	ra
  53              		.cfi_endproc
  54              	.LFE24:
  56              		.align	2
  57              		.globl	_Z9mem_allocm
  59              	_Z9mem_allocm:
  60              	.LFB25:
  42:src/../h/syscall_c.h **** 
  43:src/../h/syscall_c.h **** void* mem_alloc (size_t size){
  61              		.loc 1 43 30 is_stmt 1
  62              		.cfi_startproc
  63              	.LVL3:
  64 002c 130101FE 		addi	sp,sp,-32
  65              		.cfi_def_cfa_offset 32
  66 0030 233C1100 		sd	ra,24(sp)
  67 0034 23388100 		sd	s0,16(sp)
  68 0038 23349100 		sd	s1,8(sp)
  69              		.cfi_offset 1, -8
  70              		.cfi_offset 8, -16
  71              		.cfi_offset 9, -24
  72 003c 13040102 		addi	s0,sp,32
  73              		.cfi_def_cfa 8, 0
  74 0040 93040500 		mv	s1,a0
GAS LISTING /tmp/cctRK8Jv.s 			page 3


  44:src/../h/syscall_c.h ****     //prepares parameters to arguments
  45:src/../h/syscall_c.h ****     //executes system call instruction
  46:src/../h/syscall_c.h ****     args* arg = new args();
  75              		.loc 1 46 5
  76              		.loc 1 46 26 is_stmt 0
  77 0044 13050002 		li	a0,32
  78              	.LVL4:
  79 0048 97000000 		call	_Znwm@plt
  79      E7800000 
  80              	.LVL5:
  81 0050 23380500 		sd	zero,16(a0)
  82 0054 233C0500 		sd	zero,24(a0)
  83              	.LVL6:
  47:src/../h/syscall_c.h ****     arg->a0=0x01;
  84              		.loc 1 47 5 is_stmt 1
  85              		.loc 1 47 12 is_stmt 0
  86 0058 93071000 		li	a5,1
  87 005c 2330F500 		sd	a5,0(a0)
  48:src/../h/syscall_c.h **** 
  49:src/../h/syscall_c.h ****     size_t blocks = size/MEM_BLOCK_SIZE;
  88              		.loc 1 49 5 is_stmt 1
  89              		.loc 1 49 12 is_stmt 0
  90 0060 93D76400 		srli	a5,s1,6
  91              	.LVL7:
  50:src/../h/syscall_c.h ****     if(size%MEM_BLOCK_SIZE!=0)blocks++;
  92              		.loc 1 50 5 is_stmt 1
  93              		.loc 1 50 12 is_stmt 0
  94 0064 93F4F403 		andi	s1,s1,63
  95              	.LVL8:
  96              		.loc 1 50 5
  97 0068 63840400 		beqz	s1,.L4
  98              		.loc 1 50 31 is_stmt 1 discriminator 1
  99              		.loc 1 50 37 is_stmt 0 discriminator 1
 100 006c 93871700 		addi	a5,a5,1
 101              	.LVL9:
 102              	.L4:
  51:src/../h/syscall_c.h ****     arg->a1=blocks;
 103              		.loc 1 51 5 is_stmt 1
 104              		.loc 1 51 12 is_stmt 0
 105 0070 2334F500 		sd	a5,8(a0)
  52:src/../h/syscall_c.h **** 
  53:src/../h/syscall_c.h ****     syscall(arg);
 106              		.loc 1 53 5 is_stmt 1
 107              		.loc 1 53 12 is_stmt 0
 108 0074 97000000 		call	_Z7syscallP4args
 108      E7800000 
 109              	.LVL10:
  54:src/../h/syscall_c.h **** 
  55:src/../h/syscall_c.h ****     uint64 ret;
 110              		.loc 1 55 5 is_stmt 1
  56:src/../h/syscall_c.h ****     __asm__ volatile("mv %0, a0" : "=r" (ret));
 111              		.loc 1 56 5
 112              		.loc 1 56 47 is_stmt 0
 113              	#APP
 114              	# 56 "src/../h/syscall_c.h" 1
  57              	
 115              		mv a0, a0
GAS LISTING /tmp/cctRK8Jv.s 			page 4


 116              	# 0 "" 2
 117              	.LVL11:
  58:src/../h/syscall_c.h ****     return (void*)ret;
 118              		.loc 1 58 5 is_stmt 1
  59:src/../h/syscall_c.h **** }
 119              		.loc 1 59 1 is_stmt 0
 120              	#NO_APP
 121 0080 83308101 		ld	ra,24(sp)
 122              		.cfi_restore 1
 123 0084 03340101 		ld	s0,16(sp)
 124              		.cfi_restore 8
 125              		.cfi_def_cfa 2, 32
 126 0088 83348100 		ld	s1,8(sp)
 127              		.cfi_restore 9
 128 008c 13010102 		addi	sp,sp,32
 129              		.cfi_def_cfa_offset 0
 130 0090 67800000 		jr	ra
 131              		.cfi_endproc
 132              	.LFE25:
 134              		.align	2
 135              		.globl	_Z8mem_freePv
 137              	_Z8mem_freePv:
 138              	.LFB26:
  60:src/../h/syscall_c.h **** 
  61:src/../h/syscall_c.h **** int mem_free (void* p){
 139              		.loc 1 61 23 is_stmt 1
 140              		.cfi_startproc
 141              	.LVL12:
 142 0094 130101FE 		addi	sp,sp,-32
 143              		.cfi_def_cfa_offset 32
 144 0098 233C1100 		sd	ra,24(sp)
 145 009c 23388100 		sd	s0,16(sp)
 146 00a0 23349100 		sd	s1,8(sp)
 147              		.cfi_offset 1, -8
 148              		.cfi_offset 8, -16
 149              		.cfi_offset 9, -24
 150 00a4 13040102 		addi	s0,sp,32
 151              		.cfi_def_cfa 8, 0
 152 00a8 93040500 		mv	s1,a0
  62:src/../h/syscall_c.h ****     args* arg = new args();
 153              		.loc 1 62 5
 154              		.loc 1 62 26 is_stmt 0
 155 00ac 13050002 		li	a0,32
 156              	.LVL13:
 157 00b0 97000000 		call	_Znwm@plt
 157      E7800000 
 158              	.LVL14:
 159 00b8 23380500 		sd	zero,16(a0)
 160 00bc 233C0500 		sd	zero,24(a0)
 161              	.LVL15:
  63:src/../h/syscall_c.h ****     arg->a0=0x02;
 162              		.loc 1 63 5 is_stmt 1
 163              		.loc 1 63 12 is_stmt 0
 164 00c0 13072000 		li	a4,2
 165 00c4 2330E500 		sd	a4,0(a0)
  64:src/../h/syscall_c.h ****     arg->a1=(uint64)p;
 166              		.loc 1 64 5 is_stmt 1
GAS LISTING /tmp/cctRK8Jv.s 			page 5


 167              		.loc 1 64 12 is_stmt 0
 168 00c8 23349500 		sd	s1,8(a0)
  65:src/../h/syscall_c.h **** 
  66:src/../h/syscall_c.h ****     syscall(arg);
 169              		.loc 1 66 5 is_stmt 1
 170              		.loc 1 66 12 is_stmt 0
 171 00cc 97000000 		call	_Z7syscallP4args
 171      E7800000 
 172              	.LVL16:
  67:src/../h/syscall_c.h ****     uint64 ret;
 173              		.loc 1 67 5 is_stmt 1
  68:src/../h/syscall_c.h ****     __asm__ volatile("mv %0, a0" : "=r" (ret));
 174              		.loc 1 68 5
 175              		.loc 1 68 47 is_stmt 0
 176              	#APP
 177              	# 68 "src/../h/syscall_c.h" 1
  69              	    return (int)ret;
 178              		mv a0, a0
 179              	# 0 "" 2
 180              	.LVL17:
 181              		.loc 1 69 5 is_stmt 1
  70:src/../h/syscall_c.h **** }
 182              		.loc 1 70 1 is_stmt 0
 183              	#NO_APP
 184 00d8 1B050500 		sext.w	a0,a0
 185              	.LVL18:
 186 00dc 83308101 		ld	ra,24(sp)
 187              		.cfi_restore 1
 188 00e0 03340101 		ld	s0,16(sp)
 189              		.cfi_restore 8
 190              		.cfi_def_cfa 2, 32
 191 00e4 83348100 		ld	s1,8(sp)
 192              		.cfi_restore 9
 193              	.LVL19:
 194 00e8 13010102 		addi	sp,sp,32
 195              		.cfi_def_cfa_offset 0
 196 00ec 67800000 		jr	ra
 197              		.cfi_endproc
 198              	.LFE26:
 200              		.section	.rodata.str1.8,"aMS",@progbits,1
 201              		.align	3
 202              	.LC0:
 203 0000 616C6C6F 		.string	"allocated \n"
 203      63617465 
 203      64200A00 
 204 000c 00000000 		.align	3
 205              	.LC1:
 206 0010 73756363 		.string	"successfully freed \n"
 206      65737366 
 206      756C6C79 
 206      20667265 
 206      6564200A 
 207 0025 000000   		.align	3
 208              	.LC2:
 209 0028 6E6F7420 		.string	"not freed \n"
 209      66726565 
 209      64200A00 
GAS LISTING /tmp/cctRK8Jv.s 			page 6


 210              		.text
 211              		.align	2
 212              		.globl	main
 214              	main:
 215              	.LFB27:
 216              		.file 2 "src/Main.cpp"
   1:src/Main.cpp  **** //
   2:src/Main.cpp  **** // Created by os on 6/18/22.
   3:src/Main.cpp  **** //
   4:src/Main.cpp  **** 
   5:src/Main.cpp  **** #include "../h/Riscv.hpp"
   6:src/Main.cpp  **** #include "../h/List.hpp"
   7:src/Main.cpp  **** #include "../h/syscall_c.h"
   8:src/Main.cpp  **** #include "../h/Print.hpp"
   9:src/Main.cpp  **** 
  10:src/Main.cpp  **** 
  11:src/Main.cpp  **** 
  12:src/Main.cpp  **** int main(){
 217              		.loc 2 12 11 is_stmt 1
 218              		.cfi_startproc
 219 00f0 130101FE 		addi	sp,sp,-32
 220              		.cfi_def_cfa_offset 32
 221 00f4 233C1100 		sd	ra,24(sp)
 222 00f8 23388100 		sd	s0,16(sp)
 223 00fc 23349100 		sd	s1,8(sp)
 224              		.cfi_offset 1, -8
 225              		.cfi_offset 8, -16
 226              		.cfi_offset 9, -24
 227 0100 13040102 		addi	s0,sp,32
 228              		.cfi_def_cfa 8, 0
  13:src/Main.cpp  **** 
  14:src/Main.cpp  **** //    Riscv::w_stvec((uint64)&supervisorTrap);
  15:src/Main.cpp  **** //    Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  16:src/Main.cpp  **** //    __asm__ volatile ("ecall");
  17:src/Main.cpp  ****     Riscv::w_stvec((uint64)&Riscv::supervisorTrap);
 229              		.loc 2 17 5
 230              		.loc 2 17 19 is_stmt 0
 231 0104 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
 231      83B70700 
 232              	.LVL20:
 233              	.LBB4:
 234              	.LBB5:
 235              		.file 3 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cctRK8Jv.s 			page 7


  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
GAS LISTING /tmp/cctRK8Jv.s 			page 8


  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  96:src/../h/Riscv.hpp ****     return scause;
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 108:src/../h/Riscv.hpp ****     return sepc;
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/Riscv.hpp ****     return stvec;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/Riscv.hpp **** {
 125:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 236              		.loc 3 125 5 is_stmt 1
 237              		.loc 3 125 69 is_stmt 0
 238              	#APP
GAS LISTING /tmp/cctRK8Jv.s 			page 9


 239              	# 125 "src/../h/Riscv.hpp" 1
 126              	}
 240              		csrw stvec, a5
 241              	# 0 "" 2
 242              	.LVL21:
 243              	#NO_APP
 244              	.LBE5:
 245              	.LBE4:
  18:src/Main.cpp  **** 
  19:src/Main.cpp  ****     void* ptr;
 246              		.loc 2 19 5 is_stmt 1
  20:src/Main.cpp  ****     ptr = mem_alloc(300);
 247              		.loc 2 20 5
 248              		.loc 2 20 20 is_stmt 0
 249 0110 1305C012 		li	a0,300
 250 0114 97000000 		call	_Z9mem_allocm
 250      E7800000 
 251              	.LVL22:
 252 011c 93040500 		mv	s1,a0
 253              	.LVL23:
  21:src/Main.cpp  ****     if(ptr!=nullptr){
 254              		.loc 2 21 5 is_stmt 1
 255 0120 630A0500 		beqz	a0,.L9
  22:src/Main.cpp  ****         printString("allocated \n");
 256              		.loc 2 22 9
 257              		.loc 2 22 20 is_stmt 0
 258 0124 17050000 		lla	a0,.LC0
 258      13050500 
 259 012c 97000000 		call	_Z11printStringPKc@plt
 259      E7800000 
 260              	.LVL24:
 261              	.L9:
  23:src/Main.cpp  ****     }
  24:src/Main.cpp  ****     if(!mem_free(ptr)){
 262              		.loc 2 24 5 is_stmt 1
 263              		.loc 2 24 17 is_stmt 0
 264 0134 13850400 		mv	a0,s1
 265 0138 97000000 		call	_Z8mem_freePv
 265      E7800000 
 266              	.LVL25:
 267              		.loc 2 24 5
 268 0140 63160502 		bnez	a0,.L10
  25:src/Main.cpp  ****         printString("successfully freed \n");
 269              		.loc 2 25 9 is_stmt 1
 270              		.loc 2 25 20 is_stmt 0
 271 0144 17050000 		lla	a0,.LC1
 271      13050500 
 272 014c 97000000 		call	_Z11printStringPKc@plt
 272      E7800000 
 273              	.LVL26:
 274              	.L11:
  26:src/Main.cpp  ****     }
  27:src/Main.cpp  ****     else{
  28:src/Main.cpp  ****         printString("not freed \n");
  29:src/Main.cpp  ****     }
  30:src/Main.cpp  ****     return 0;
 275              		.loc 2 30 5 is_stmt 1
GAS LISTING /tmp/cctRK8Jv.s 			page 10


  31:src/Main.cpp  **** }
 276              		.loc 2 31 1 is_stmt 0
 277 0154 13050000 		li	a0,0
 278 0158 83308101 		ld	ra,24(sp)
 279              		.cfi_remember_state
 280              		.cfi_restore 1
 281 015c 03340101 		ld	s0,16(sp)
 282              		.cfi_restore 8
 283              		.cfi_def_cfa 2, 32
 284 0160 83348100 		ld	s1,8(sp)
 285              		.cfi_restore 9
 286              	.LVL27:
 287 0164 13010102 		addi	sp,sp,32
 288              		.cfi_def_cfa_offset 0
 289 0168 67800000 		jr	ra
 290              	.LVL28:
 291              	.L10:
 292              		.cfi_restore_state
  28:src/Main.cpp  ****     }
 293              		.loc 2 28 9 is_stmt 1
  28:src/Main.cpp  ****     }
 294              		.loc 2 28 20 is_stmt 0
 295 016c 17050000 		lla	a0,.LC2
 295      13050500 
 296 0174 97000000 		call	_Z11printStringPKc@plt
 296      E7800000 
 297              	.LVL29:
 298 017c 6FF09FFD 		j	.L11
 299              		.cfi_endproc
 300              	.LFE27:
 302              	.Letext0:
 303              		.file 4 "src/../h/../lib/hw.h"
 304              		.file 5 "src/../h/Print.hpp"
GAS LISTING /tmp/cctRK8Jv.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Main.cpp
     /tmp/cctRK8Jv.s:9      .text:0000000000000000 _Z7syscallP4args
     /tmp/cctRK8Jv.s:13     .text:0000000000000000 .L0 
     /tmp/cctRK8Jv.s:15     .text:0000000000000000 .L0 
     /tmp/cctRK8Jv.s:16     .text:0000000000000004 .L0 
     /tmp/cctRK8Jv.s:18     .text:0000000000000008 .L0 
     /tmp/cctRK8Jv.s:20     .text:000000000000000c .L0 
     /tmp/cctRK8Jv.s:22     .text:000000000000000c .L0 
     /tmp/cctRK8Jv.s:23     .text:000000000000000c .L0 
     /tmp/cctRK8Jv.s:26     .text:0000000000000010 .L0 
     /tmp/cctRK8Jv.s:27     .text:0000000000000010 .L0 
     /tmp/cctRK8Jv.s:30     .text:0000000000000014 .L0 
src/../h/syscall_c.h:33     .text:0000000000000014 .L0 
     /tmp/cctRK8Jv.s:36     .text:0000000000000018 .L0 
src/../h/syscall_c.h:34     .text:0000000000000018 .L0 
     /tmp/cctRK8Jv.s:41     .text:000000000000001c .L0 
src/../h/syscall_c.h:38     .text:000000000000001c .L0 
     /tmp/cctRK8Jv.s:47     .text:0000000000000020 .L0 
     /tmp/cctRK8Jv.s:48     .text:0000000000000024 .L0 
     /tmp/cctRK8Jv.s:49     .text:0000000000000024 .L0 
     /tmp/cctRK8Jv.s:51     .text:0000000000000028 .L0 
     /tmp/cctRK8Jv.s:53     .text:000000000000002c .L0 
     /tmp/cctRK8Jv.s:59     .text:000000000000002c _Z9mem_allocm
     /tmp/cctRK8Jv.s:62     .text:000000000000002c .L0 
     /tmp/cctRK8Jv.s:64     .text:000000000000002c .L0 
     /tmp/cctRK8Jv.s:65     .text:0000000000000030 .L0 
     /tmp/cctRK8Jv.s:69     .text:000000000000003c .L0 
     /tmp/cctRK8Jv.s:70     .text:000000000000003c .L0 
     /tmp/cctRK8Jv.s:71     .text:000000000000003c .L0 
     /tmp/cctRK8Jv.s:73     .text:0000000000000040 .L0 
     /tmp/cctRK8Jv.s:76     .text:0000000000000044 .L0 
     /tmp/cctRK8Jv.s:77     .text:0000000000000044 .L0 
     /tmp/cctRK8Jv.s:85     .text:0000000000000058 .L0 
     /tmp/cctRK8Jv.s:86     .text:0000000000000058 .L0 
     /tmp/cctRK8Jv.s:89     .text:0000000000000060 .L0 
     /tmp/cctRK8Jv.s:90     .text:0000000000000060 .L0 
     /tmp/cctRK8Jv.s:93     .text:0000000000000064 .L0 
     /tmp/cctRK8Jv.s:94     .text:0000000000000064 .L0 
     /tmp/cctRK8Jv.s:97     .text:0000000000000068 .L0 
     /tmp/cctRK8Jv.s:99     .text:000000000000006c .L0 
     /tmp/cctRK8Jv.s:100    .text:000000000000006c .L0 
     /tmp/cctRK8Jv.s:104    .text:0000000000000070 .L0 
     /tmp/cctRK8Jv.s:105    .text:0000000000000070 .L0 
     /tmp/cctRK8Jv.s:107    .text:0000000000000074 .L0 
     /tmp/cctRK8Jv.s:108    .text:0000000000000074 .L0 
     /tmp/cctRK8Jv.s:111    .text:000000000000007c .L0 
     /tmp/cctRK8Jv.s:112    .text:000000000000007c .L0 
src/../h/syscall_c.h:56     .text:000000000000007c .L0 
     /tmp/cctRK8Jv.s:119    .text:0000000000000080 .L0 
     /tmp/cctRK8Jv.s:121    .text:0000000000000080 .L0 
     /tmp/cctRK8Jv.s:122    .text:0000000000000084 .L0 
     /tmp/cctRK8Jv.s:124    .text:0000000000000088 .L0 
     /tmp/cctRK8Jv.s:125    .text:0000000000000088 .L0 
     /tmp/cctRK8Jv.s:127    .text:000000000000008c .L0 
     /tmp/cctRK8Jv.s:129    .text:0000000000000090 .L0 
     /tmp/cctRK8Jv.s:131    .text:0000000000000094 .L0 
GAS LISTING /tmp/cctRK8Jv.s 			page 12


     /tmp/cctRK8Jv.s:137    .text:0000000000000094 _Z8mem_freePv
     /tmp/cctRK8Jv.s:140    .text:0000000000000094 .L0 
     /tmp/cctRK8Jv.s:142    .text:0000000000000094 .L0 
     /tmp/cctRK8Jv.s:143    .text:0000000000000098 .L0 
     /tmp/cctRK8Jv.s:147    .text:00000000000000a4 .L0 
     /tmp/cctRK8Jv.s:148    .text:00000000000000a4 .L0 
     /tmp/cctRK8Jv.s:149    .text:00000000000000a4 .L0 
     /tmp/cctRK8Jv.s:151    .text:00000000000000a8 .L0 
     /tmp/cctRK8Jv.s:154    .text:00000000000000ac .L0 
     /tmp/cctRK8Jv.s:155    .text:00000000000000ac .L0 
     /tmp/cctRK8Jv.s:163    .text:00000000000000c0 .L0 
     /tmp/cctRK8Jv.s:164    .text:00000000000000c0 .L0 
     /tmp/cctRK8Jv.s:167    .text:00000000000000c8 .L0 
     /tmp/cctRK8Jv.s:168    .text:00000000000000c8 .L0 
     /tmp/cctRK8Jv.s:170    .text:00000000000000cc .L0 
     /tmp/cctRK8Jv.s:171    .text:00000000000000cc .L0 
     /tmp/cctRK8Jv.s:174    .text:00000000000000d4 .L0 
     /tmp/cctRK8Jv.s:175    .text:00000000000000d4 .L0 
src/../h/syscall_c.h:68     .text:00000000000000d4 .L0 
     /tmp/cctRK8Jv.s:182    .text:00000000000000d8 .L0 
     /tmp/cctRK8Jv.s:184    .text:00000000000000d8 .L0 
     /tmp/cctRK8Jv.s:187    .text:00000000000000e0 .L0 
     /tmp/cctRK8Jv.s:189    .text:00000000000000e4 .L0 
     /tmp/cctRK8Jv.s:190    .text:00000000000000e4 .L0 
     /tmp/cctRK8Jv.s:192    .text:00000000000000e8 .L0 
     /tmp/cctRK8Jv.s:195    .text:00000000000000ec .L0 
     /tmp/cctRK8Jv.s:197    .text:00000000000000f0 .L0 
     /tmp/cctRK8Jv.s:214    .text:00000000000000f0 main
     /tmp/cctRK8Jv.s:218    .text:00000000000000f0 .L0 
     /tmp/cctRK8Jv.s:219    .text:00000000000000f0 .L0 
     /tmp/cctRK8Jv.s:220    .text:00000000000000f4 .L0 
     /tmp/cctRK8Jv.s:224    .text:0000000000000100 .L0 
     /tmp/cctRK8Jv.s:225    .text:0000000000000100 .L0 
     /tmp/cctRK8Jv.s:226    .text:0000000000000100 .L0 
     /tmp/cctRK8Jv.s:228    .text:0000000000000104 .L0 
     /tmp/cctRK8Jv.s:230    .text:0000000000000104 .L0 
     /tmp/cctRK8Jv.s:231    .text:0000000000000104 .L0 
     /tmp/cctRK8Jv.s:237    .text:000000000000010c .L0 
  src/../h/Riscv.hpp:125    .text:000000000000010c .L0 
     /tmp/cctRK8Jv.s:247    .text:0000000000000110 .L0 
     /tmp/cctRK8Jv.s:248    .text:0000000000000110 .L0 
     /tmp/cctRK8Jv.s:249    .text:0000000000000110 .L0 
     /tmp/cctRK8Jv.s:255    .text:0000000000000120 .L0 
     /tmp/cctRK8Jv.s:257    .text:0000000000000124 .L0 
     /tmp/cctRK8Jv.s:258    .text:0000000000000124 .L0 
     /tmp/cctRK8Jv.s:263    .text:0000000000000134 .L0 
     /tmp/cctRK8Jv.s:264    .text:0000000000000134 .L0 
     /tmp/cctRK8Jv.s:268    .text:0000000000000140 .L0 
     /tmp/cctRK8Jv.s:270    .text:0000000000000144 .L0 
     /tmp/cctRK8Jv.s:271    .text:0000000000000144 .L0 
     /tmp/cctRK8Jv.s:276    .text:0000000000000154 .L0 
     /tmp/cctRK8Jv.s:277    .text:0000000000000154 .L0 
     /tmp/cctRK8Jv.s:279    .text:000000000000015c .L0 
     /tmp/cctRK8Jv.s:280    .text:000000000000015c .L0 
     /tmp/cctRK8Jv.s:282    .text:0000000000000160 .L0 
     /tmp/cctRK8Jv.s:283    .text:0000000000000160 .L0 
     /tmp/cctRK8Jv.s:285    .text:0000000000000164 .L0 
GAS LISTING /tmp/cctRK8Jv.s 			page 13


     /tmp/cctRK8Jv.s:288    .text:0000000000000168 .L0 
     /tmp/cctRK8Jv.s:292    .text:000000000000016c .L0 
     /tmp/cctRK8Jv.s:294    .text:000000000000016c .L0 
     /tmp/cctRK8Jv.s:295    .text:000000000000016c .L0 
     /tmp/cctRK8Jv.s:299    .text:0000000000000180 .L0 
     /tmp/cctRK8Jv.s:305    .text:0000000000000180 .L0 
     /tmp/cctRK8Jv.s:231    .text:0000000000000104 .L0 
     /tmp/cctRK8Jv.s:202    .rodata.str1.8:0000000000000000 .LC0
     /tmp/cctRK8Jv.s:258    .text:0000000000000124 .L0 
     /tmp/cctRK8Jv.s:205    .rodata.str1.8:0000000000000010 .LC1
     /tmp/cctRK8Jv.s:271    .text:0000000000000144 .L0 
     /tmp/cctRK8Jv.s:208    .rodata.str1.8:0000000000000028 .LC2
     /tmp/cctRK8Jv.s:295    .text:000000000000016c .L0 
     /tmp/cctRK8Jv.s:102    .text:0000000000000070 .L4
     /tmp/cctRK8Jv.s:261    .text:0000000000000134 .L9
     /tmp/cctRK8Jv.s:291    .text:000000000000016c .L10
     /tmp/cctRK8Jv.s:274    .text:0000000000000154 .L11
     /tmp/cctRK8Jv.s:912    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cctRK8Jv.s:1745   .debug_str:00000000000003b2 .LASF67
     /tmp/cctRK8Jv.s:1677   .debug_str:00000000000001ee .LASF68
     /tmp/cctRK8Jv.s:1621   .debug_str:0000000000000021 .LASF69
     /tmp/cctRK8Jv.s:5      .text:0000000000000000 .Ltext0
     /tmp/cctRK8Jv.s:302    .text:0000000000000180 .Letext0
     /tmp/cctRK8Jv.s:1613   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cctRK8Jv.s:1691   .debug_str:0000000000000237 .LASF0
     /tmp/cctRK8Jv.s:1701   .debug_str:000000000000025e .LASF1
     /tmp/cctRK8Jv.s:1685   .debug_str:000000000000020c .LASF2
     /tmp/cctRK8Jv.s:1669   .debug_str:00000000000001ae .LASF4
     /tmp/cctRK8Jv.s:1725   .debug_str:0000000000000306 .LASF3
     /tmp/cctRK8Jv.s:1625   .debug_str:0000000000000058 .LASF5
     /tmp/cctRK8Jv.s:1703   .debug_str:0000000000000271 .LASF6
     /tmp/cctRK8Jv.s:1689   .debug_str:0000000000000224 .LASF7
     /tmp/cctRK8Jv.s:1753   .debug_str:000000000000049d .LASF8
     /tmp/cctRK8Jv.s:1661   .debug_str:0000000000000160 .LASF9
     /tmp/cctRK8Jv.s:1711   .debug_str:000000000000029d .LASF10
     /tmp/cctRK8Jv.s:1747   .debug_str:0000000000000476 .LASF11
     /tmp/cctRK8Jv.s:1627   .debug_str:000000000000005f .LASF12
     /tmp/cctRK8Jv.s:1617   .debug_str:0000000000000008 .LASF13
     /tmp/cctRK8Jv.s:1635   .debug_str:00000000000000a9 .LASF14
     /tmp/cctRK8Jv.s:1721   .debug_str:00000000000002d8 .LASF15
     /tmp/cctRK8Jv.s:1639   .debug_str:00000000000000c3 .LASF16
     /tmp/cctRK8Jv.s:1699   .debug_str:0000000000000258 .LASF70
     /tmp/cctRK8Jv.s:1719   .debug_str:00000000000002cd .LASF49
     /tmp/cctRK8Jv.s:1763   .debug_str:00000000000004ec .LASF51
     /tmp/cctRK8Jv.s:1619   .debug_str:0000000000000018 .LASF17
     /tmp/cctRK8Jv.s:1733   .debug_str:000000000000033d .LASF19
     /tmp/cctRK8Jv.s:1647   .debug_str:0000000000000115 .LASF21
     /tmp/cctRK8Jv.s:1645   .debug_str:0000000000000100 .LASF23
     /tmp/cctRK8Jv.s:1729   .debug_str:0000000000000327 .LASF18
     /tmp/cctRK8Jv.s:1715   .debug_str:00000000000002b5 .LASF20
     /tmp/cctRK8Jv.s:1743   .debug_str:00000000000003ab .LASF22
     /tmp/cctRK8Jv.s:1737   .debug_str:000000000000036a .LASF24
     /tmp/cctRK8Jv.s:1655   .debug_str:000000000000014d .LASF25
     /tmp/cctRK8Jv.s:1641   .debug_str:00000000000000d9 .LASF26
     /tmp/cctRK8Jv.s:1615   .debug_str:0000000000000000 .LASF27
     /tmp/cctRK8Jv.s:1665   .debug_str:0000000000000184 .LASF28
     /tmp/cctRK8Jv.s:1649   .debug_str:000000000000011e .LASF29
GAS LISTING /tmp/cctRK8Jv.s 			page 14


     /tmp/cctRK8Jv.s:1629   .debug_str:000000000000006f .LASF30
     /tmp/cctRK8Jv.s:1767   .debug_str:000000000000050f .LASF31
     /tmp/cctRK8Jv.s:1651   .debug_str:0000000000000126 .LASF32
     /tmp/cctRK8Jv.s:1693   .debug_str:0000000000000244 .LASF33
     /tmp/cctRK8Jv.s:1761   .debug_str:00000000000004d9 .LASF34
     /tmp/cctRK8Jv.s:1623   .debug_str:0000000000000051 .LASF35
     /tmp/cctRK8Jv.s:1653   .debug_str:000000000000013a .LASF36
     /tmp/cctRK8Jv.s:1659   .debug_str:000000000000015a .LASF37
     /tmp/cctRK8Jv.s:1741   .debug_str:0000000000000399 .LASF38
     /tmp/cctRK8Jv.s:1679   .debug_str:00000000000001fb .LASF39
     /tmp/cctRK8Jv.s:1769   .debug_str:0000000000000517 .LASF40
     /tmp/cctRK8Jv.s:1765   .debug_str:0000000000000504 .LASF41
     /tmp/cctRK8Jv.s:1723   .debug_str:00000000000002ee .LASF42
     /tmp/cctRK8Jv.s:1671   .debug_str:00000000000001b5 .LASF43
     /tmp/cctRK8Jv.s:1735   .debug_str:0000000000000352 .LASF44
     /tmp/cctRK8Jv.s:1633   .debug_str:000000000000009f .LASF45
     /tmp/cctRK8Jv.s:1667   .debug_str:0000000000000198 .LASF46
     /tmp/cctRK8Jv.s:1687   .debug_str:000000000000021a .LASF47
     /tmp/cctRK8Jv.s:1663   .debug_str:000000000000016e .LASF48
     /tmp/cctRK8Jv.s:1731   .debug_str:000000000000032e .LASF50
     /tmp/cctRK8Jv.s:1631   .debug_str:0000000000000083 .LASF52
     /tmp/cctRK8Jv.s:1757   .debug_str:00000000000004b7 .LASF53
     /tmp/cctRK8Jv.s:1675   .debug_str:00000000000001cc .LASF55
     /tmp/cctRK8Jv.s:1727   .debug_str:0000000000000318 .LASF54
     /tmp/cctRK8Jv.s:1739   .debug_str:000000000000037d .LASF56
     /tmp/cctRK8Jv.s:1695   .debug_str:000000000000024b .LASF71
     /tmp/cctRK8Jv.s:1707   .debug_str:000000000000028a .LASF63
     /tmp/cctRK8Jv.s:215    .text:00000000000000f0 .LFB27
     /tmp/cctRK8Jv.s:300    .text:0000000000000180 .LFE27
     /tmp/cctRK8Jv.s:1525   .debug_loc:0000000000000000 .LLST6
     /tmp/cctRK8Jv.s:233    .text:000000000000010c .LBB4
     /tmp/cctRK8Jv.s:245    .text:0000000000000110 .LBE4
     /tmp/cctRK8Jv.s:251    .text:000000000000011c .LVL22
     /tmp/cctRK8Jv.s:260    .text:0000000000000134 .LVL24
     /tmp/cctRK8Jv.s:266    .text:0000000000000140 .LVL25
     /tmp/cctRK8Jv.s:273    .text:0000000000000154 .LVL26
     /tmp/cctRK8Jv.s:297    .text:000000000000017c .LVL29
     /tmp/cctRK8Jv.s:1713   .debug_str:00000000000002ac .LASF57
     /tmp/cctRK8Jv.s:1709   .debug_str:000000000000028f .LASF59
     /tmp/cctRK8Jv.s:138    .text:0000000000000094 .LFB26
     /tmp/cctRK8Jv.s:198    .text:00000000000000f0 .LFE26
     /tmp/cctRK8Jv.s:1536   .debug_loc:0000000000000036 .LLST3
     /tmp/cctRK8Jv.s:1554   .debug_loc:0000000000000082 .LLST4
     /tmp/cctRK8Jv.s:1561   .debug_loc:00000000000000a5 .LLST5
     /tmp/cctRK8Jv.s:158    .text:00000000000000b8 .LVL14
     /tmp/cctRK8Jv.s:172    .text:00000000000000d4 .LVL16
     /tmp/cctRK8Jv.s:1755   .debug_str:00000000000004ad .LASF58
     /tmp/cctRK8Jv.s:1637   .debug_str:00000000000000b5 .LASF60
     /tmp/cctRK8Jv.s:60     .text:000000000000002c .LFB25
     /tmp/cctRK8Jv.s:132    .text:0000000000000094 .LFE25
     /tmp/cctRK8Jv.s:1717   .debug_str:00000000000002c8 .LASF61
     /tmp/cctRK8Jv.s:1568   .debug_loc:00000000000000c8 .LLST0
     /tmp/cctRK8Jv.s:1586   .debug_loc:0000000000000114 .LLST1
     /tmp/cctRK8Jv.s:1751   .debug_str:0000000000000496 .LASF62
     /tmp/cctRK8Jv.s:1593   .debug_loc:0000000000000137 .LLST2
     /tmp/cctRK8Jv.s:80     .text:0000000000000050 .LVL5
     /tmp/cctRK8Jv.s:109    .text:000000000000007c .LVL10
GAS LISTING /tmp/cctRK8Jv.s 			page 15


     /tmp/cctRK8Jv.s:1697   .debug_str:0000000000000250 .LASF64
     /tmp/cctRK8Jv.s:1749   .debug_str:0000000000000485 .LASF72
     /tmp/cctRK8Jv.s:10     .text:0000000000000000 .LFB24
     /tmp/cctRK8Jv.s:54     .text:000000000000002c .LFE24
     /tmp/cctRK8Jv.s:1683   .debug_str:0000000000000207 .LASF65
     /tmp/cctRK8Jv.s:1657   .debug_str:0000000000000155 .LASF66
     /tmp/cctRK8Jv.s:1705   .debug_str:0000000000000284 .LASF73
     /tmp/cctRK8Jv.s:1643   .debug_str:00000000000000ed .LASF74
     /tmp/cctRK8Jv.s:1673   .debug_str:00000000000001c0 .LASF75
     /tmp/cctRK8Jv.s:1681   .debug_str:0000000000000201 .LASF76
     /tmp/cctRK8Jv.s:1759   .debug_str:00000000000004cc .LASF77
     /tmp/cctRK8Jv.s:253    .text:0000000000000120 .LVL23
     /tmp/cctRK8Jv.s:286    .text:0000000000000164 .LVL27
     /tmp/cctRK8Jv.s:290    .text:000000000000016c .LVL28
     /tmp/cctRK8Jv.s:141    .text:0000000000000094 .LVL12
     /tmp/cctRK8Jv.s:156    .text:00000000000000b0 .LVL13
     /tmp/cctRK8Jv.s:193    .text:00000000000000e8 .LVL19
     /tmp/cctRK8Jv.s:161    .text:00000000000000c0 .LVL15
     /tmp/cctRK8Jv.s:180    .text:00000000000000d8 .LVL17
     /tmp/cctRK8Jv.s:185    .text:00000000000000dc .LVL18
     /tmp/cctRK8Jv.s:63     .text:000000000000002c .LVL3
     /tmp/cctRK8Jv.s:78     .text:0000000000000048 .LVL4
     /tmp/cctRK8Jv.s:95     .text:0000000000000068 .LVL8
     /tmp/cctRK8Jv.s:83     .text:0000000000000058 .LVL6
     /tmp/cctRK8Jv.s:91     .text:0000000000000064 .LVL7
     /tmp/cctRK8Jv.s:306    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Znwm
_ZN5Riscv14supervisorTrapEv
_Z11printStringPKc
