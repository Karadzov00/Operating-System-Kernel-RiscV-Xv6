GAS LISTING /tmp/ccy0A2j8.s 			page 1


   1              		.file	"Main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB41:
  11              		.file 1 "src/Main.cpp"
   1:src/Main.cpp  **** //
   2:src/Main.cpp  **** // Created by os on 6/18/22.
   3:src/Main.cpp  **** //
   4:src/Main.cpp  **** 
   5:src/Main.cpp  **** #include "../h/Riscv.hpp"
   6:src/Main.cpp  **** 
   7:src/Main.cpp  **** #include "../h/_thread.hpp"
   8:src/Main.cpp  **** #include "../h/syscall_c.h"
   9:src/Main.cpp  **** #include "../test/printing.hpp"
  10:src/Main.cpp  **** //
  11:src/Main.cpp  **** //
  12:src/Main.cpp  **** 
  13:src/Main.cpp  **** extern void userMain();
  14:src/Main.cpp  **** extern int thread_create (
  15:src/Main.cpp  ****         _thread::thread_t * handle,
  16:src/Main.cpp  ****         void(*start_routine)(void*),
  17:src/Main.cpp  ****         void* arg
  18:src/Main.cpp  **** );
  19:src/Main.cpp  **** 
  20:src/Main.cpp  **** extern void userMain(void*);
  21:src/Main.cpp  **** 
  22:src/Main.cpp  **** int main(){
  12              		.loc 1 22 11
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  23:src/Main.cpp  **** 
  24:src/Main.cpp  **** 
  25:src/Main.cpp  ****     Riscv::w_stvec((uint64)&Riscv::supervisorTrap);
  22              		.loc 1 25 5
  23              		.loc 1 25 19 is_stmt 0
  24 0010 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  24      83B70700 
  25              	.LVL0:
  26              	.LBB6:
  27              	.LBB7:
  28              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccy0A2j8.s 			page 2


   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
GAS LISTING /tmp/ccy0A2j8.s 			page 3


  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp ****     static void TrapConsole();
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp **** private:
  86:src/../h/Riscv.hpp **** 
  87:src/../h/Riscv.hpp ****     // supervisor trap handler
  88:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp ****     static void handleTrapConsole();
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** //    static void syscallHandler();
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** };
  95:src/../h/Riscv.hpp **** 
  96:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  97:src/../h/Riscv.hpp **** {
  98:src/../h/Riscv.hpp ****     uint64 volatile scause;
  99:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 100:src/../h/Riscv.hpp ****     return scause;
 101:src/../h/Riscv.hpp **** }
 102:src/../h/Riscv.hpp **** 
 103:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 104:src/../h/Riscv.hpp **** {
 105:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 109:src/../h/Riscv.hpp **** {
 110:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 112:src/../h/Riscv.hpp ****     return sepc;
 113:src/../h/Riscv.hpp **** }
 114:src/../h/Riscv.hpp **** 
 115:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 116:src/../h/Riscv.hpp **** {
 117:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 118:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccy0A2j8.s 			page 4


 119:src/../h/Riscv.hpp **** 
 120:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 121:src/../h/Riscv.hpp **** {
 122:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 123:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 124:src/../h/Riscv.hpp ****     return stvec;
 125:src/../h/Riscv.hpp **** }
 126:src/../h/Riscv.hpp **** 
 127:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 128:src/../h/Riscv.hpp **** {
 129:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  29              		.loc 2 129 5 is_stmt 1
  30              		.loc 2 129 69 is_stmt 0
  31              	#APP
  32              	# 129 "src/../h/Riscv.hpp" 1
 130              	}
  33              		csrw stvec, a5
  34              	# 0 "" 2
  35              	.LVL1:
  36              	#NO_APP
  37              	.LBE7:
  38              	.LBE6:
  26:src/Main.cpp  **** 
  27:src/Main.cpp  **** 
  28:src/Main.cpp  ****     Riscv::mc_sstatus(Riscv::SSTATUS_SPIE);
  39              		.loc 1 28 5 is_stmt 1
  40              	.LBB8:
  41              	.LBB9:
 131:src/../h/Riscv.hpp **** 
 132:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 133:src/../h/Riscv.hpp **** {
 134:src/../h/Riscv.hpp ****     uint64 volatile stval;
 135:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 136:src/../h/Riscv.hpp ****     return stval;
 137:src/../h/Riscv.hpp **** }
 138:src/../h/Riscv.hpp **** 
 139:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 140:src/../h/Riscv.hpp **** {
 141:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 142:src/../h/Riscv.hpp **** }
 143:src/../h/Riscv.hpp **** 
 144:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 145:src/../h/Riscv.hpp **** {
 146:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 147:src/../h/Riscv.hpp **** }
 148:src/../h/Riscv.hpp **** 
 149:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 150:src/../h/Riscv.hpp **** {
 151:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/Riscv.hpp **** }
 153:src/../h/Riscv.hpp **** 
 154:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 155:src/../h/Riscv.hpp **** {
 156:src/../h/Riscv.hpp ****     uint64 volatile sip;
 157:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 158:src/../h/Riscv.hpp ****     return sip;
 159:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccy0A2j8.s 			page 5


 160:src/../h/Riscv.hpp **** 
 161:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 162:src/../h/Riscv.hpp **** {
 163:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 164:src/../h/Riscv.hpp **** }
 165:src/../h/Riscv.hpp **** 
 166:src/../h/Riscv.hpp **** //mask set
 167:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 168:src/../h/Riscv.hpp **** {
 169:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 170:src/../h/Riscv.hpp **** }
 171:src/../h/Riscv.hpp **** 
 172:src/../h/Riscv.hpp **** //mask clear
 173:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 174:src/../h/Riscv.hpp **** {
 175:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
  42              		.loc 2 175 5
  43              		.loc 2 175 68 is_stmt 0
  44 001c 93070002 		li	a5,32
  45              	#APP
  46              	# 175 "src/../h/Riscv.hpp" 1
 176              	}
  47              		csrc sstatus, a5
  48              	# 0 "" 2
  49              	.LVL2:
  50              	#NO_APP
  51              	.L3:
  52              	.LBE9:
  53              	.LBE8:
  29:src/Main.cpp  **** 
  30:src/Main.cpp  ****     //make system thread
  31:src/Main.cpp  **** //    _thread* main = (_thread*)MemoryAllocator::kmem_alloc(sizeof(_thread));
  32:src/Main.cpp  **** //    _thread::running=main;
  33:src/Main.cpp  **** //    uint64 * stack = (uint64*)MemoryAllocator::kmem_alloc(DEFAULT_STACK_SIZE* sizeof(uint64));
  34:src/Main.cpp  **** //    main->setStack(stack);
  35:src/Main.cpp  **** //    __asm__ volatile("ecall");
  36:src/Main.cpp  **** 
  37:src/Main.cpp  **** 
  38:src/Main.cpp  ****     //make user thread
  39:src/Main.cpp  **** //    _thread* thr;
  40:src/Main.cpp  **** //    thread_create(&thr, userMain, nullptr);
  41:src/Main.cpp  **** //
  42:src/Main.cpp  **** //    while(!thr->isFinished()){
  43:src/Main.cpp  **** //        thread_dispatch();
  44:src/Main.cpp  **** //    }
  45:src/Main.cpp  **** 
  46:src/Main.cpp  ****     char c;
  54              		.loc 1 46 5 is_stmt 1
  47:src/Main.cpp  ****     while((c=getc())!=0x31){
  55              		.loc 1 47 5
  56              		.loc 1 47 21
  57              		.loc 1 47 18 is_stmt 0
  58 0024 97000000 		call	_Z4getcv@plt
  58      E7800000 
  59              	.LVL3:
  60              		.loc 1 47 21
  61 002c 93071003 		li	a5,49
GAS LISTING /tmp/ccy0A2j8.s 			page 6


  62 0030 6308F500 		beq	a0,a5,.L2
  48:src/Main.cpp  ****         putc(c);
  63              		.loc 1 48 9 is_stmt 1
  64              		.loc 1 48 13 is_stmt 0
  65 0034 97000000 		call	_Z4putcc@plt
  65      E7800000 
  66              	.LVL4:
  47:src/Main.cpp  ****     while((c=getc())!=0x31){
  67              		.loc 1 47 5
  68 003c 6FF09FFE 		j	.L3
  69              	.LVL5:
  70              	.L2:
  49:src/Main.cpp  ****     }
  50:src/Main.cpp  **** 
  51:src/Main.cpp  ****     return 0;
  71              		.loc 1 51 5 is_stmt 1
  52:src/Main.cpp  **** }
  72              		.loc 1 52 1 is_stmt 0
  73 0040 13050000 		li	a0,0
  74              	.LVL6:
  75 0044 83308100 		ld	ra,8(sp)
  76              		.cfi_restore 1
  77 0048 03340100 		ld	s0,0(sp)
  78              		.cfi_restore 8
  79              		.cfi_def_cfa 2, 16
  80 004c 13010101 		addi	sp,sp,16
  81              		.cfi_def_cfa_offset 0
  82 0050 67800000 		jr	ra
  83              		.cfi_endproc
  84              	.LFE41:
  86              	.Letext0:
  87              		.file 3 "src/../h/../lib/hw.h"
  88              		.file 4 "src/../h/syscall_c.h"
GAS LISTING /tmp/ccy0A2j8.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Main.cpp
     /tmp/ccy0A2j8.s:9      .text:0000000000000000 main
     /tmp/ccy0A2j8.s:13     .text:0000000000000000 .L0 
     /tmp/ccy0A2j8.s:14     .text:0000000000000000 .L0 
     /tmp/ccy0A2j8.s:15     .text:0000000000000004 .L0 
     /tmp/ccy0A2j8.s:18     .text:000000000000000c .L0 
     /tmp/ccy0A2j8.s:19     .text:000000000000000c .L0 
     /tmp/ccy0A2j8.s:21     .text:0000000000000010 .L0 
     /tmp/ccy0A2j8.s:23     .text:0000000000000010 .L0 
     /tmp/ccy0A2j8.s:24     .text:0000000000000010 .L0 
     /tmp/ccy0A2j8.s:30     .text:0000000000000018 .L0 
  src/../h/Riscv.hpp:129    .text:0000000000000018 .L0 
     /tmp/ccy0A2j8.s:42     .text:000000000000001c .L0 
     /tmp/ccy0A2j8.s:43     .text:000000000000001c .L0 
     /tmp/ccy0A2j8.s:44     .text:000000000000001c .L0 
     /tmp/ccy0A2j8.s:55     .text:0000000000000024 .L0 
     /tmp/ccy0A2j8.s:56     .text:0000000000000024 .L0 
     /tmp/ccy0A2j8.s:57     .text:0000000000000024 .L0 
     /tmp/ccy0A2j8.s:58     .text:0000000000000024 .L0 
     /tmp/ccy0A2j8.s:61     .text:000000000000002c .L0 
     /tmp/ccy0A2j8.s:64     .text:0000000000000034 .L0 
     /tmp/ccy0A2j8.s:65     .text:0000000000000034 .L0 
     /tmp/ccy0A2j8.s:68     .text:000000000000003c .L0 
     /tmp/ccy0A2j8.s:72     .text:0000000000000040 .L0 
     /tmp/ccy0A2j8.s:73     .text:0000000000000040 .L0 
     /tmp/ccy0A2j8.s:76     .text:0000000000000048 .L0 
     /tmp/ccy0A2j8.s:78     .text:000000000000004c .L0 
     /tmp/ccy0A2j8.s:79     .text:000000000000004c .L0 
     /tmp/ccy0A2j8.s:81     .text:0000000000000050 .L0 
     /tmp/ccy0A2j8.s:83     .text:0000000000000054 .L0 
     /tmp/ccy0A2j8.s:89     .text:0000000000000054 .L0 
     /tmp/ccy0A2j8.s:24     .text:0000000000000010 .L0 
     /tmp/ccy0A2j8.s:70     .text:0000000000000040 .L2
     /tmp/ccy0A2j8.s:51     .text:0000000000000024 .L3
     /tmp/ccy0A2j8.s:530    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccy0A2j8.s:1117   .debug_str:00000000000003cc .LASF70
     /tmp/ccy0A2j8.s:1055   .debug_str:0000000000000229 .LASF71
     /tmp/ccy0A2j8.s:995    .debug_str:0000000000000040 .LASF72
     /tmp/ccy0A2j8.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccy0A2j8.s:86     .text:0000000000000054 .Letext0
     /tmp/ccy0A2j8.s:985    .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccy0A2j8.s:1071   .debug_str:0000000000000285 .LASF0
     /tmp/ccy0A2j8.s:1077   .debug_str:000000000000029f .LASF1
     /tmp/ccy0A2j8.s:1063   .debug_str:0000000000000255 .LASF2
     /tmp/ccy0A2j8.s:1049   .debug_str:00000000000001f5 .LASF4
     /tmp/ccy0A2j8.s:1101   .debug_str:000000000000034b .LASF3
     /tmp/ccy0A2j8.s:999    .debug_str:0000000000000077 .LASF5
     /tmp/ccy0A2j8.s:1079   .debug_str:00000000000002b2 .LASF6
     /tmp/ccy0A2j8.s:1069   .debug_str:0000000000000272 .LASF7
     /tmp/ccy0A2j8.s:1121   .debug_str:000000000000049f .LASF8
     /tmp/ccy0A2j8.s:1041   .debug_str:00000000000001a7 .LASF9
     /tmp/ccy0A2j8.s:1087   .debug_str:00000000000002d5 .LASF10
     /tmp/ccy0A2j8.s:1119   .debug_str:0000000000000490 .LASF11
     /tmp/ccy0A2j8.s:1003   .debug_str:000000000000008a .LASF12
     /tmp/ccy0A2j8.s:991    .debug_str:0000000000000027 .LASF13
     /tmp/ccy0A2j8.s:1011   .debug_str:00000000000000d4 .LASF14
GAS LISTING /tmp/ccy0A2j8.s 			page 8


     /tmp/ccy0A2j8.s:1095   .debug_str:0000000000000314 .LASF15
     /tmp/ccy0A2j8.s:1015   .debug_str:00000000000000ec .LASF16
     /tmp/ccy0A2j8.s:1075   .debug_str:0000000000000299 .LASF73
     /tmp/ccy0A2j8.s:1019   .debug_str:0000000000000116 .LASF74
     /tmp/ccy0A2j8.s:1013   .debug_str:00000000000000e0 .LASF17
     /tmp/ccy0A2j8.s:1059   .debug_str:000000000000023c .LASF18
     /tmp/ccy0A2j8.s:1001   .debug_str:000000000000007e .LASF19
     /tmp/ccy0A2j8.s:1093   .debug_str:0000000000000309 .LASF52
     /tmp/ccy0A2j8.s:1129   .debug_str:00000000000004dc .LASF54
     /tmp/ccy0A2j8.s:993    .debug_str:0000000000000037 .LASF20
     /tmp/ccy0A2j8.s:1107   .debug_str:0000000000000373 .LASF22
     /tmp/ccy0A2j8.s:1023   .debug_str:000000000000013a .LASF24
     /tmp/ccy0A2j8.s:1021   .debug_str:0000000000000125 .LASF26
     /tmp/ccy0A2j8.s:1103   .debug_str:000000000000035d .LASF21
     /tmp/ccy0A2j8.s:1089   .debug_str:00000000000002e4 .LASF23
     /tmp/ccy0A2j8.s:1115   .debug_str:00000000000003c5 .LASF25
     /tmp/ccy0A2j8.s:1111   .debug_str:00000000000003a0 .LASF27
     /tmp/ccy0A2j8.s:1035   .debug_str:0000000000000180 .LASF28
     /tmp/ccy0A2j8.s:1017   .debug_str:0000000000000102 .LASF29
     /tmp/ccy0A2j8.s:989    .debug_str:000000000000001f .LASF30
     /tmp/ccy0A2j8.s:1045   .debug_str:00000000000001cb .LASF31
     /tmp/ccy0A2j8.s:1025   .debug_str:0000000000000143 .LASF32
     /tmp/ccy0A2j8.s:1005   .debug_str:000000000000009a .LASF33
     /tmp/ccy0A2j8.s:1133   .debug_str:00000000000004ff .LASF34
     /tmp/ccy0A2j8.s:1027   .debug_str:000000000000014b .LASF35
     /tmp/ccy0A2j8.s:1073   .debug_str:0000000000000292 .LASF36
     /tmp/ccy0A2j8.s:1127   .debug_str:00000000000004c9 .LASF37
     /tmp/ccy0A2j8.s:997    .debug_str:0000000000000070 .LASF38
     /tmp/ccy0A2j8.s:1033   .debug_str:000000000000016d .LASF39
     /tmp/ccy0A2j8.s:1039   .debug_str:00000000000001a1 .LASF40
     /tmp/ccy0A2j8.s:1113   .debug_str:00000000000003b3 .LASF41
     /tmp/ccy0A2j8.s:1057   .debug_str:0000000000000236 .LASF42
     /tmp/ccy0A2j8.s:1137   .debug_str:000000000000050c .LASF43
     /tmp/ccy0A2j8.s:1131   .debug_str:00000000000004f4 .LASF44
     /tmp/ccy0A2j8.s:1097   .debug_str:000000000000032a .LASF45
     /tmp/ccy0A2j8.s:1051   .debug_str:00000000000001fc .LASF46
     /tmp/ccy0A2j8.s:1109   .debug_str:0000000000000388 .LASF47
     /tmp/ccy0A2j8.s:1009   .debug_str:00000000000000ca .LASF48
     /tmp/ccy0A2j8.s:1047   .debug_str:00000000000001df .LASF49
     /tmp/ccy0A2j8.s:1065   .debug_str:0000000000000263 .LASF50
     /tmp/ccy0A2j8.s:1043   .debug_str:00000000000001b5 .LASF51
     /tmp/ccy0A2j8.s:1105   .debug_str:0000000000000364 .LASF53
     /tmp/ccy0A2j8.s:1007   .debug_str:00000000000000ae .LASF55
     /tmp/ccy0A2j8.s:1061   .debug_str:0000000000000249 .LASF56
     /tmp/ccy0A2j8.s:1037   .debug_str:0000000000000188 .LASF57
     /tmp/ccy0A2j8.s:1123   .debug_str:00000000000004af .LASF58
     /tmp/ccy0A2j8.s:1053   .debug_str:0000000000000207 .LASF60
     /tmp/ccy0A2j8.s:1091   .debug_str:00000000000002f7 .LASF59
     /tmp/ccy0A2j8.s:987    .debug_str:0000000000000000 .LASF61
     /tmp/ccy0A2j8.s:1029   .debug_str:000000000000015f .LASF62
     /tmp/ccy0A2j8.s:1085   .debug_str:00000000000002d0 .LASF75
     /tmp/ccy0A2j8.s:10     .text:0000000000000000 .LFB41
     /tmp/ccy0A2j8.s:84     .text:0000000000000054 .LFE41
     /tmp/ccy0A2j8.s:952    .debug_loc:0000000000000000 .LLST0
     /tmp/ccy0A2j8.s:26     .text:0000000000000018 .LBB6
     /tmp/ccy0A2j8.s:38     .text:000000000000001c .LBE6
     /tmp/ccy0A2j8.s:40     .text:000000000000001c .LBB8
GAS LISTING /tmp/ccy0A2j8.s 			page 9


     /tmp/ccy0A2j8.s:53     .text:0000000000000024 .LBE8
     /tmp/ccy0A2j8.s:963    .debug_loc:0000000000000036 .LLST1
     /tmp/ccy0A2j8.s:59     .text:000000000000002c .LVL3
     /tmp/ccy0A2j8.s:66     .text:000000000000003c .LVL4
     /tmp/ccy0A2j8.s:1081   .debug_str:00000000000002c5 .LASF63
     /tmp/ccy0A2j8.s:1135   .debug_str:0000000000000507 .LASF64
     /tmp/ccy0A2j8.s:1083   .debug_str:00000000000002ca .LASF65
     /tmp/ccy0A2j8.s:1099   .debug_str:0000000000000342 .LASF66
     /tmp/ccy0A2j8.s:1125   .debug_str:00000000000004c4 .LASF68
     /tmp/ccy0A2j8.s:1031   .debug_str:0000000000000164 .LASF67
     /tmp/ccy0A2j8.s:1067   .debug_str:000000000000026d .LASF69
     /tmp/ccy0A2j8.s:69     .text:0000000000000040 .LVL5
     /tmp/ccy0A2j8.s:74     .text:0000000000000044 .LVL6
     /tmp/ccy0A2j8.s:35     .text:000000000000001c .LVL1
     /tmp/ccy0A2j8.s:49     .text:0000000000000024 .LVL2
     /tmp/ccy0A2j8.s:90     .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN5Riscv14supervisorTrapEv
_Z4getcv
_Z4putcc
