GAS LISTING /tmp/ccw77EQt.s 			page 1


   1              		.file	"Main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB16:
  11              		.file 1 "src/Main.cpp"
   1:src/Main.cpp  **** //
   2:src/Main.cpp  **** // Created by os on 6/18/22.
   3:src/Main.cpp  **** //
   4:src/Main.cpp  **** 
   5:src/Main.cpp  **** #include "../h/Riscv.hpp"
   6:src/Main.cpp  **** 
   7:src/Main.cpp  **** 
   8:src/Main.cpp  **** //extern void userMain1();
   9:src/Main.cpp  **** extern void userMain2();
  10:src/Main.cpp  **** 
  11:src/Main.cpp  **** int main(){
  12              		.loc 1 11 11
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  12:src/Main.cpp  **** 
  13:src/Main.cpp  **** //    Riscv::w_stvec((uint64)&supervisorTrap);
  14:src/Main.cpp  **** //    Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  15:src/Main.cpp  **** //    __asm__ volatile ("ecall");
  16:src/Main.cpp  ****     Riscv::w_stvec((uint64)&Riscv::supervisorTrap);
  22              		.loc 1 16 5
  23              		.loc 1 16 19 is_stmt 0
  24 0010 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  24      83B70700 
  25              	.LVL0:
  26              	.LBB4:
  27              	.LBB5:
  28              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/17/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
GAS LISTING /tmp/ccw77EQt.s 			page 2


  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/Riscv.hpp ****     static void popSppSpie();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     // read register scause
  19:src/../h/Riscv.hpp ****     static uint64 r_scause();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     // write register scause
  22:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     // read register sepc
  25:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     // write register sepc
  28:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     // read register stvec
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp ****     // write register stvec
  34:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp ****     // read register stval
  37:src/../h/Riscv.hpp ****     static uint64 r_stval();
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     // write register stval
  40:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     // mask set register sip
  50:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp ****     // mask clear register sip
  53:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp ****     // read register sip
  56:src/../h/Riscv.hpp ****     static uint64 r_sip();
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     // write register sip
  59:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  62:src/../h/Riscv.hpp ****     {
  63:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  64:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  66:src/../h/Riscv.hpp ****     };
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     // mask set register sstatus
  69:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccw77EQt.s 			page 3


  71:src/../h/Riscv.hpp ****     // mask clear register sstatus
  72:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp ****     // read register sstatus
  75:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     // write register sstatus
  78:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp ****     // supervisor trap
  81:src/../h/Riscv.hpp ****     static void supervisorTrap();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     // supervisor trap handler
  86:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp ****     static void syscallHandler();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** };
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     uint64 volatile scause;
  95:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  96:src/../h/Riscv.hpp ****     return scause;
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/Riscv.hpp **** {
 101:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 107:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 108:src/../h/Riscv.hpp ****     return sepc;
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/Riscv.hpp **** {
 113:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 119:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 120:src/../h/Riscv.hpp ****     return stvec;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 124:src/../h/Riscv.hpp **** {
 125:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  29              		.loc 2 125 5 is_stmt 1
  30              		.loc 2 125 69 is_stmt 0
GAS LISTING /tmp/ccw77EQt.s 			page 4


  31              	#APP
  32              	# 125 "src/../h/Riscv.hpp" 1
 126              	}
  33              		csrw stvec, a5
  34              	# 0 "" 2
  35              	.LVL1:
  36              	#NO_APP
  37              	.LBE5:
  38              	.LBE4:
  17:src/Main.cpp  **** 
  18:src/Main.cpp  **** //    void* t1;
  19:src/Main.cpp  **** //    t1 = mem_alloc(300);
  20:src/Main.cpp  **** //    if(t1!=nullptr){
  21:src/Main.cpp  **** //        printString("allocated \n");
  22:src/Main.cpp  **** //    }
  23:src/Main.cpp  **** //    if(!mem_free(t1)){
  24:src/Main.cpp  **** //        printString("successfully freed \n");
  25:src/Main.cpp  **** //    }
  26:src/Main.cpp  **** //    else{
  27:src/Main.cpp  **** //        printString("not freed \n");
  28:src/Main.cpp  **** //    }
  29:src/Main.cpp  **** 
  30:src/Main.cpp  **** 
  31:src/Main.cpp  ****     //memory leak without delete
  32:src/Main.cpp  **** //    for (auto &thread: threads)
  33:src/Main.cpp  **** //    {
  34:src/Main.cpp  **** //        delete thread;
  35:src/Main.cpp  **** //    }
  36:src/Main.cpp  **** 
  37:src/Main.cpp  **** 
  38:src/Main.cpp  ****     userMain2();
  39              		.loc 1 38 5 is_stmt 1
  40              		.loc 1 38 14 is_stmt 0
  41 001c 97000000 		call	_Z9userMain2v@plt
  41      E7800000 
  42              	.LVL2:
  39:src/Main.cpp  **** 
  40:src/Main.cpp  **** 
  41:src/Main.cpp  ****     return 0;
  43              		.loc 1 41 5 is_stmt 1
  42:src/Main.cpp  **** }
  44              		.loc 1 42 1 is_stmt 0
  45 0024 13050000 		li	a0,0
  46 0028 83308100 		ld	ra,8(sp)
  47              		.cfi_restore 1
  48 002c 03340100 		ld	s0,0(sp)
  49              		.cfi_restore 8
  50              		.cfi_def_cfa 2, 16
  51 0030 13010101 		addi	sp,sp,16
  52              		.cfi_def_cfa_offset 0
  53 0034 67800000 		jr	ra
  54              		.cfi_endproc
  55              	.LFE16:
  57              	.Letext0:
  58              		.file 3 "src/../h/../lib/hw.h"
GAS LISTING /tmp/ccw77EQt.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Main.cpp
     /tmp/ccw77EQt.s:9      .text:0000000000000000 main
     /tmp/ccw77EQt.s:13     .text:0000000000000000 .L0 
     /tmp/ccw77EQt.s:14     .text:0000000000000000 .L0 
     /tmp/ccw77EQt.s:15     .text:0000000000000004 .L0 
     /tmp/ccw77EQt.s:18     .text:000000000000000c .L0 
     /tmp/ccw77EQt.s:19     .text:000000000000000c .L0 
     /tmp/ccw77EQt.s:21     .text:0000000000000010 .L0 
     /tmp/ccw77EQt.s:23     .text:0000000000000010 .L0 
     /tmp/ccw77EQt.s:24     .text:0000000000000010 .L0 
     /tmp/ccw77EQt.s:30     .text:0000000000000018 .L0 
  src/../h/Riscv.hpp:125    .text:0000000000000018 .L0 
     /tmp/ccw77EQt.s:40     .text:000000000000001c .L0 
     /tmp/ccw77EQt.s:41     .text:000000000000001c .L0 
     /tmp/ccw77EQt.s:44     .text:0000000000000024 .L0 
     /tmp/ccw77EQt.s:45     .text:0000000000000024 .L0 
     /tmp/ccw77EQt.s:47     .text:000000000000002c .L0 
     /tmp/ccw77EQt.s:49     .text:0000000000000030 .L0 
     /tmp/ccw77EQt.s:50     .text:0000000000000030 .L0 
     /tmp/ccw77EQt.s:52     .text:0000000000000034 .L0 
     /tmp/ccw77EQt.s:54     .text:0000000000000038 .L0 
     /tmp/ccw77EQt.s:59     .text:0000000000000038 .L0 
     /tmp/ccw77EQt.s:24     .text:0000000000000010 .L0 
     /tmp/ccw77EQt.s:424    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccw77EQt.s:850    .debug_str:00000000000001c0 .LASF57
     /tmp/ccw77EQt.s:872    .debug_str:00000000000002ff .LASF58
     /tmp/ccw77EQt.s:798    .debug_str:000000000000002d .LASF59
     /tmp/ccw77EQt.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccw77EQt.s:57     .text:0000000000000038 .Letext0
     /tmp/ccw77EQt.s:790    .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccw77EQt.s:864    .debug_str:00000000000002de .LASF0
     /tmp/ccw77EQt.s:840    .debug_str:0000000000000178 .LASF1
     /tmp/ccw77EQt.s:830    .debug_str:0000000000000135 .LASF2
     /tmp/ccw77EQt.s:808    .debug_str:000000000000008c .LASF4
     /tmp/ccw77EQt.s:836    .debug_str:000000000000015e .LASF3
     /tmp/ccw77EQt.s:796    .debug_str:0000000000000026 .LASF5
     /tmp/ccw77EQt.s:794    .debug_str:0000000000000013 .LASF6
     /tmp/ccw77EQt.s:822    .debug_str:00000000000000eb .LASF7
     /tmp/ccw77EQt.s:878    .debug_str:0000000000000333 .LASF8
     /tmp/ccw77EQt.s:806    .debug_str:000000000000007e .LASF9
     /tmp/ccw77EQt.s:920    .debug_str:000000000000049d .LASF10
     /tmp/ccw77EQt.s:826    .debug_str:0000000000000111 .LASF11
     /tmp/ccw77EQt.s:910    .debug_str:0000000000000454 .LASF12
     /tmp/ccw77EQt.s:888    .debug_str:000000000000038f .LASF13
     /tmp/ccw77EQt.s:842    .debug_str:000000000000018b .LASF14
     /tmp/ccw77EQt.s:814    .debug_str:00000000000000b3 .LASF15
     /tmp/ccw77EQt.s:882    .debug_str:0000000000000355 .LASF16
     /tmp/ccw77EQt.s:816    .debug_str:00000000000000c9 .LASF60
     /tmp/ccw77EQt.s:848    .debug_str:00000000000001b5 .LASF49
     /tmp/ccw77EQt.s:900    .debug_str:0000000000000412 .LASF51
     /tmp/ccw77EQt.s:852    .debug_str:0000000000000284 .LASF17
     /tmp/ccw77EQt.s:820    .debug_str:00000000000000d6 .LASF19
     /tmp/ccw77EQt.s:854    .debug_str:000000000000028d .LASF21
     /tmp/ccw77EQt.s:810    .debug_str:0000000000000093 .LASF23
     /tmp/ccw77EQt.s:868    .debug_str:00000000000002f3 .LASF18
     /tmp/ccw77EQt.s:834    .debug_str:000000000000014b .LASF20
GAS LISTING /tmp/ccw77EQt.s 			page 6


     /tmp/ccw77EQt.s:818    .debug_str:00000000000000cf .LASF22
     /tmp/ccw77EQt.s:824    .debug_str:00000000000000fe .LASF24
     /tmp/ccw77EQt.s:866    .debug_str:00000000000002eb .LASF25
     /tmp/ccw77EQt.s:894    .debug_str:00000000000003d7 .LASF26
     /tmp/ccw77EQt.s:838    .debug_str:0000000000000170 .LASF27
     /tmp/ccw77EQt.s:876    .debug_str:000000000000031f .LASF28
     /tmp/ccw77EQt.s:902    .debug_str:000000000000042a .LASF29
     /tmp/ccw77EQt.s:802    .debug_str:0000000000000064 .LASF30
     /tmp/ccw77EQt.s:832    .debug_str:0000000000000143 .LASF31
     /tmp/ccw77EQt.s:912    .debug_str:0000000000000464 .LASF32
     /tmp/ccw77EQt.s:914    .debug_str:0000000000000478 .LASF33
     /tmp/ccw77EQt.s:792    .debug_str:0000000000000000 .LASF34
     /tmp/ccw77EQt.s:800    .debug_str:000000000000005d .LASF35
     /tmp/ccw77EQt.s:874    .debug_str:000000000000030c .LASF36
     /tmp/ccw77EQt.s:908    .debug_str:000000000000044e .LASF37
     /tmp/ccw77EQt.s:880    .debug_str:0000000000000343 .LASF38
     /tmp/ccw77EQt.s:804    .debug_str:0000000000000078 .LASF39
     /tmp/ccw77EQt.s:906    .debug_str:000000000000043c .LASF40
     /tmp/ccw77EQt.s:898    .debug_str:0000000000000407 .LASF41
     /tmp/ccw77EQt.s:858    .debug_str:00000000000002a0 .LASF42
     /tmp/ccw77EQt.s:812    .debug_str:00000000000000a8 .LASF43
     /tmp/ccw77EQt.s:846    .debug_str:000000000000019d .LASF44
     /tmp/ccw77EQt.s:856    .debug_str:0000000000000296 .LASF45
     /tmp/ccw77EQt.s:884    .debug_str:000000000000036b .LASF46
     /tmp/ccw77EQt.s:904    .debug_str:0000000000000432 .LASF47
     /tmp/ccw77EQt.s:892    .debug_str:00000000000003c1 .LASF48
     /tmp/ccw77EQt.s:916    .debug_str:000000000000047f .LASF50
     /tmp/ccw77EQt.s:860    .debug_str:00000000000002b8 .LASF52
     /tmp/ccw77EQt.s:828    .debug_str:0000000000000120 .LASF53
     /tmp/ccw77EQt.s:890    .debug_str:000000000000039f .LASF55
     /tmp/ccw77EQt.s:918    .debug_str:000000000000048e .LASF54
     /tmp/ccw77EQt.s:896    .debug_str:00000000000003eb .LASF56
     /tmp/ccw77EQt.s:870    .debug_str:00000000000002fa .LASF61
     /tmp/ccw77EQt.s:10     .text:0000000000000000 .LFB16
     /tmp/ccw77EQt.s:55     .text:0000000000000038 .LFE16
     /tmp/ccw77EQt.s:26     .text:0000000000000018 .LBB4
     /tmp/ccw77EQt.s:38     .text:000000000000001c .LBE4
     /tmp/ccw77EQt.s:42     .text:0000000000000024 .LVL2
     /tmp/ccw77EQt.s:844    .debug_str:0000000000000197 .LASF62
     /tmp/ccw77EQt.s:886    .debug_str:0000000000000381 .LASF63
     /tmp/ccw77EQt.s:862    .debug_str:00000000000002d4 .LASF64
     /tmp/ccw77EQt.s:60     .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN5Riscv14supervisorTrapEv
_Z9userMain2v
